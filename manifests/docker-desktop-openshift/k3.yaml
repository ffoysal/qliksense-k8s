apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: chronos
    chart: chronos-1.5.7
    heritage: Tiller
    release: qliksense
  name: qliksense-chronos
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: elastic-infra
    chart: nginx-ingress-1.24.1
    heritage: Tiller
    release: qliksense
  name: qliksense-elastic-infra-nginx-ingress
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    release: qliksense
  name: qliksense-encryption
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: licenses
    chart: licenses-1.15.10
    heritage: Tiller
    release: qliksense
  name: qliksense-licenses
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: odag
    chart: odag-1.8.8
    heritage: Tiller
    release: qliksense
  name: qliksense-odag
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: qix-sessions
    chart: qix-sessions-4.0.10
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-sessions
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: chronos
    chart: chronos-1.5.7
    heritage: Tiller
    release: qliksense
  name: qliksense-chronos
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: elastic-infra
    chart: nginx-ingress-1.24.1
    heritage: Tiller
    release: qliksense
  name: qliksense-elastic-infra-nginx-ingress
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - update
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - ""
  resourceNames:
  - ingress-controller-leader-qlik-nginx
  resources:
  - configmaps
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - get
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: licenses
    chart: licenses-1.15.10
    heritage: Tiller
    release: qliksense
  name: qliksense-licenses
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - update
  - create
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: odag
    chart: odag-1.8.8
    heritage: Tiller
    release: qliksense
  name: qliksense-odag
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - update
  - create
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    app: qix-sessions
    chart: qix-sessions-4.0.10
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-sessions
  namespace: default
rules:
- apiGroups:
  - ""
  - extensions
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  - extensions
  - apps
  resources:
  - replicasets
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  verbs:
  - '*'
- apiGroups:
  - qixmanager.qlik.com
  resources:
  - engines
  - engines/finalizers
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: chronos
    chart: chronos-1.5.7
    heritage: Tiller
    release: qliksense
  name: qliksense-chronos
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: qliksense-chronos
subjects:
- kind: ServiceAccount
  name: qliksense-chronos
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: elastic-infra
    chart: nginx-ingress-1.24.1
    heritage: Tiller
    release: qliksense
  name: qliksense-elastic-infra-nginx-ingress
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: qliksense-elastic-infra-nginx-ingress
subjects:
- kind: ServiceAccount
  name: qliksense-elastic-infra-nginx-ingress
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: licenses
    chart: licenses-1.15.10
    heritage: Tiller
    release: qliksense
  name: qliksense-licenses
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: qliksense-licenses
subjects:
- kind: ServiceAccount
  name: qliksense-licenses
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: odag
    chart: odag-1.8.8
    heritage: Tiller
    release: qliksense
  name: qliksense-odag
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: qliksense-odag
subjects:
- kind: ServiceAccount
  name: qliksense-odag
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    app: qix-sessions
    chart: qix-sessions-4.0.10
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-sessions
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: qliksense-qix-sessions
subjects:
- kind: ServiceAccount
  name: qliksense-qix-sessions
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: audit
    release: qliksense
  name: qliksense-audit-configs-dmfm2fmthc
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  redisUri: chronos-redis-master:6379
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: chronos
    release: qliksense
  name: qliksense-chronos-configs-g99286b86k
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  redisUri: qliksense-chronos-worker-redis-master
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: chronos-worker
    release: qliksense
  name: qliksense-chronos-worker-configs-d9d6gdmkfd
  namespace: default
---
apiVersion: v1
data:
  featureFlagsUri: http://qliksense-collections-feature-flags:8080
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: collections
    release: qliksense
  name: qliksense-collections-configs-bc78d5gk78
  namespace: default
---
apiVersion: v1
data:
  acceptEULA: "no"
  chronosUri: http://qliksense-chronos:8585
  collectionsUri: http://qliksense-collections:8080
  corsUri: http://qliksense-tenants.default.svc.cluster.local:8080/v1
  dataFilesUri: http://qliksense-datafiles:8080
  dcaasUri: http://qliksense-dcaas:9026
  dpsUri: http://qliksense-data-prep.svc.cluster.local:9072
  encryptionUri: http://qliksense-encryption:8080
  engineUri: http://qliksense-engine:9076
  featureFlagsUri: http://qliksense-feature-flags:8080
  geoOperationsUri: qliksense-geo-operations:50072
  groupsUri: http://qliksense-groups.default.svc.cluster.local:8080
  identityProvidersUri: http://qliksense-identity-providers.default.svc.cluster.local:8080/v0
  identityProvidersV1Uri: http://qliksense-identity-providers-ext.default.svc.cluster.local:8080/v1
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  keysUri: http://qliksense-keys:8080/v1
  licensesUri: http://qliksense-licenses:9200
  natsStreamingClusterId: qliksense-messaging-nats-streaming-cluster
  natsUri: nats://qliksense-messaging-nats-client:4222
  parserUri: http://qliksense-nl-parser:30302
  pdsUri: http://qliksense-policy-decisions:5080
  precedentsUri: http://qliksense-precedents:9054
  qixDataConnectionUri: http://qliksense-qix-data-connection:9011
  qixDataFilesUri: http://qliksense-qix-datafiles:8080
  qixDataReloadUri: http://qliksense-qix-data-reload:8080
  qixSessionsUri: http://qliksense-qix-sessions:8080
  quotasUri: http://qliksense-quotas:6080
  redisImageRegistry: docker.io/bitnami
  redisUri: qliksense-redis-master
  redisUriWithPort: qliksense-redis-master:6379
  reloadTasksUri: http://qliksense-reload-tasks:8080
  reportingUri: http://qliksense-reporting:8282
  spacesUri: http://qliksense-spaces:6080
  storageClassName: ""
  temporaryContentsUri: http://qliksense-temporary-contents:6080
  tenantsUri: http://qliksense-tenants.default.svc.cluster.local:8080/v1
  tokenAuthUri: http://qliksense-edge-auth:8080
  usersUri: http://qliksense-users.default.svc.cluster.local:8080/v1
kind: ConfigMap
metadata:
  labels:
    app: qliksense
    release: qliksense
  name: qliksense-configs-k5hgd4cf2c
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: data-connector-odbc
    release: qliksense
  name: qliksense-data-connector-odbc-configs-hb45dk82c9
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  redisUri: qliksense-data-connector-qwc-redis-master:6379
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: data-connector-qwc
    release: qliksense
  name: qliksense-data-connector-qwc-configs-gtc2fd5m86
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: data-connector-rest
    release: qliksense
  name: qliksense-data-connector-rest-configs-75bcfmd79d
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: data-prep
    release: qliksense
  name: qliksense-data-prep-configs-6hkbmd64kd
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: data-rest-source
    release: qliksense
  name: qliksense-data-rest-source-configs-bhfg925dkk
  namespace: default
---
apiVersion: v1
data:
  connectorServices: qliksense-data-connector-rest-rld:qliksense-data-connector-rest-cmd:50060
    qliksense-data-connector-qwc-rld:qliksense-data-connector-qwc-cmd:50060 qliksense-data-connector-odbc-rld:qliksense-data-connector-odbc-cmd:50060
    qliksense-data-connector-sap-sql-rld:qliksense-data-connector-sap-sql-cmd:50060
    qliksense-data-connector-sfdc-rld:qliksense-data-connector-sfdc-cmd:50060 qliksense-qix-datafiles:50051
  dcaasDataConnectionUri: http://qliksense-dcaas-data-connections:9011
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  redisUri: qliksense-dcaas-redis-master:6379
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    release: qliksense
  name: qliksense-dcaas-configs-tk5t9gmtd2
  namespace: default
---
apiVersion: v1
data:
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  redis.conf: |-
    # User-supplied configuration:
    # maxmemory-policy volatile-lru
  replica.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
kind: ConfigMap
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas-redis
  namespace: default
---
apiVersion: v1
data:
  ping_local.sh: |-
    response=$(
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_local.sh" || exit_status=$?
    "$script_dir/ping_master.sh" || exit_status=$?
    exit $exit_status
  ping_master.sh: |-
    response=$(
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas-redis-health
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: dcaas-web
    release: qliksense
  name: qliksense-dcaas-web-configs-67fch8g8m6
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  oidcRedirectUri: https://elastic.example/login/callback
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: edge-auth
    release: qliksense
  name: qliksense-edge-auth-configs-bfk4hk58k2
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: elastic-infra
    release: qliksense
  name: qliksense-elastic-infra-configs-tfg97gg22k
  namespace: default
---
apiVersion: v1
data:
  proxy-add-original-uri-header: "true"
  worker-shutdown-timeout: 300s
kind: ConfigMap
metadata:
  labels:
    app: elastic-infra
    chart: nginx-ingress-1.24.1
    component: controller
    heritage: Tiller
    release: qliksense
  name: qliksense-elastic-infra-nginx-ingress-controller
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    release: qliksense
  name: qliksense-encryption-configs-6t8mf2chcb
  namespace: default
---
apiVersion: v1
data:
  acceptEULA: "no"
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: engine
    release: qliksense
  name: qliksense-engine-configs-tm467hdbd4
  namespace: default
---
apiVersion: v1
data:
  rules.yaml: |
    - allow: |
        # If app has originAppId and user is publisher in a managed space user can republish
        resource.IsApp() and resource.UserIsPublisherInManagedSpace() and resource.originAppId == app.id and resource._actions={"republish"}
        # Professional user can create an app in a personal space or in a shared space where the user is an editor, or in a everyone space where the user is a member.
        resource.IsApp() and user.IsProfessional() and resource.IsOwnedInPersonalOrSharedOrEveryoneSpace() and resource._actions={"create"}
        # A user can delete app if the user is the owner in a personal space or owner in a everyone space, or in a shared space where the user is producer. A tenant admin can always delete an app
        resource.IsApp() and (resource.IsOwnedInPersonalSpace() or resource.IsOwnedInEveryoneSpace() or resource.UserIsEditorInSharedSpace() or resource.UserIsFacilitatorInManagedSpace()) and resource._actions={"delete"}
        # A user can copy an app if he is copying it to a personal space, a everyone space where the user is a member, or a shared space where the user is producer. Read access on the src file is implicit
        resource.IsApp() and resource.IsOwnedInPersonalOrSharedOrEveryoneSpace() and resource._actions={"duplicate"}
        # A professional user can import an app if the user is importing to a personal space, or to a everyone space where the user is a member, or to a shared space where the user is producer.
        resource.IsApp() and user.IsProfessional() and resource.IsOwnedInPersonalOrSharedOrEveryoneSpace() and resource._actions={"import"}
        # The app can be opened in a personal space by the owner or shared to me
        resource.IsApp() and resource.IsPersonal() and (resource.IsOwnedByMe() or resource.IsSharedWithMe()) and resource._actions={"read"}
        # A tenant admin can open all apps and delete all apps.
        resource.IsApp() and user.IsTenantAdmin() and resource._actions={"read","delete"}
        # A tenant admin can change the owner, update app attributes or export an app for personal apps, or apps in a everyone space or shared space
        resource.IsApp() and user.IsTenantAdmin() and (resource.IsPersonal() or resource.IsEveryone() or resource.IsShared()) and resource._actions={"change_owner","update","export"}
        # A tenant admin can change the space on apps in a disabled everyone space.
        resource.IsApp() and user.IsTenantAdmin() and resource.IsDisabledEveryone() and resource._actions={"change_space"}
        # A user can open apps that the user has access to in an everyone space.
        resource.IsApp() and resource.UserIsMemberInEveryoneSpace() and resource._actions={"read"}
        # A user can open apps that the user has access to in a shared space
        resource.IsApp() and resource.UserIsSharedSpaceMember() and resource._actions={"read"}
        # A user can open apps that the user has access to in a managed space
        resource.IsApp() and (resource.UserIsViewerInManagedSpace() or resource.UserIsFacilitatorInManagedSpace()) and resource._actions={"read"}
        # A user can open distributed apps that the user has access to
        resource.IsApp() and resource.IsDistributed() and (resource.IsOwnedByMe() or resource.IsSharedWithMe()) and resource._actions={"read"}
        # Professional user that owns the app can edit scripts and reload the app if it's a personal space, or the user is a member in the everyone space, or the user is an editor in the shared space
        resource.IsApp() and user.IsProfessional() and resource.IsOwnedByMe() and (resource.IsPersonal() or resource.UserIsMemberInEveryoneSpace() or resource.UserIsEditorInSharedSpace()) and !resource.IsPublished() and resource._actions={"reload"}
        # Professional user can reload the app if the user is facilitator in a managed space
        resource.IsApp() and user.IsProfessional() and resource.UserIsFacilitatorInManagedSpace() and resource._actions={"update","reload"}
        # A user can update app attributes on personal apps, or in everyone space as member and app owner, or in a shared space as producer.
        resource.IsApp() and resource.HasPrivilege("read") and (resource.IsOwnedInPersonalSpace() or resource.IsOwnedInEveryoneSpace() or resource.UserIsEditorInSharedSpace()) and resource._actions={"update"}
        # A facilitator can change the owner of an app in a shared space.
        resource.IsApp() and resource.UserIsFacilitator() and resource._actions={"change_owner"}
        # A user can change the space on personal apps or as a member of everyone space, or as editor of shared apps or as facilitator in managed apps.
        resource.IsApp() and (resource.IsOwnedInPersonalOrSharedOrEveryoneSpace() or resource.UserIsFacilitatorInManagedSpace()) and resource._actions={"change_space"}
        # A publisher can publish an app to a managed space.
        resource.IsApp() and resource.UserIsPublisherInManagedSpace() and resource._actions={"publish"}
        # Impersonator from the ODAG service can change owner. This rule will be removed when odag does not need to impersonate
        resource.IsApp() and user.act.sub == "odag" and resource._actions={"read","change_owner"}
        # A user can export apps that the user owns, or in a everyone space as member, or in a shared space as producer. Only user visable (objects and data) will be exported
        resource.IsApp() and !resource.HasSectionAccess() and resource.HasPrivilege("read") and resource.IsOwnedInPersonalOrSharedOrEveryoneSpace() and resource._actions={"export"}
        # Professional user can import an appobject if the user is importing to a personal space, or to a everyone space where the user is a member, or to a shared space where the user is a producer.
        resource.IsAppObject() and user.IsProfessional() and resource.app.IsOwnedInPersonalOrSharedOrEveryoneSpace() and resource._actions={"import"}
        # In apps that the user has read access to, the user can read all published objects and his personal objects and all master items.
        resource.IsAppObject() and resource.app.HasPrivilege("read") and ((resource.IsOwnedByMe() or resource.IsPublished() or resource.IsMasterObject() or resource.IsPublicObject()) and !resource.IsScriptObject()) and resource._actions={"read"}
        # If you have access to the app you can read all published objects
        resource.IsAppObject() and resource.app.HasPrivilege("read") and resource.IsPublished() and !resource.IsScriptObject() and resource._actions={"read"}
        # A professional user can read the script in owned personal apps, or as member in a everyone space, or as editor in a shared space, or as facilitator in managed space.
        resource.IsAppObject() and user.IsProfessional() and (resource.app.IsOwnedInPersonalOrSharedOrEveryoneSpace() or resource.app.UserIsFacilitatorInManagedSpace()) and resource.IsScriptObject() and resource._actions={"read"}
        # A professional user can update the script in owned personal apps, or owned apps in a everyone space, or owned apps in a shared space
        resource.IsAppObject() and user.IsProfessional() and (resource.app.IsOwnedInPersonalSpace() or ((resource.app.UserIsEditorInSharedSpace() or resource.app.UserIsMemberInEveryoneSpace()) and resource.IsOwnedByMe())) and resource.IsScriptObject() and resource._actions={"update"}
        # A professional user can create any object in an unpublished app that is in a personal space, or in a everyone space as member, or in a shared space as producer
        resource.IsAppObject() and user.IsProfessional() and resource.app.HasPrivilege("read") and !resource.app.IsPublished() and resource.app.IsOwnedInPersonalOrSharedOrEveryoneSpace() and resource.IsOwnedByMe() and resource._actions={"create"}
        # A user can create a story object (stories, bookmarks and snapshot) in a personal space app shared to me
        resource.IsAppObject() and resource.app.HasPrivilege("read") and !resource.app.IsPublished() and resource.app.IsPersonal() and (resource.app.IsOwnedByMe() or resource.app.IsSharedWithMe()) and resource.IsStoryObject() and !resource.IsPublished() and resource.IsOwnedByMe() and resource._actions={"create"}
        # A user can update and delete an unpublished story object owned by me (stories, bookmarks and snapshot) in a personal app owner or shared to me
        resource.IsAppObject() and resource.app.HasPrivilege("read") and !resource.app.IsPublished() and resource.app.IsPersonal() and (resource.app.IsOwnedByMe() or resource.app.IsSharedWithMe()) and resource.IsStoryObject() and !resource.IsPublished() and resource.IsOwnedByMe() and resource._actions={"update","delete"}
        # In apps that a user has read access to, a professional user can update, delete master objects and other public objects.
        resource.IsAppObject() and user.IsProfessional() and resource.app.HasPrivilege("read") and (resource.IsMasterObject() or resource.IsPublicObject()) and resource.app.IsOwnedInPersonalOrSharedOrEveryoneSpace() and resource._actions={"update","delete"}
        # In apps that a user has update access to, the user can update app properties.
        resource.IsAppObject() and resource.app.HasPrivilege("update") and resource._objecttype == "appprops" and resource._actions={"update"}
        # A professional user can update and delete any unpublished object in an unpublished app that the user owns, or in a everyone space as a member, or in a shared space as producer.
        resource.IsAppObject() and user.IsProfessional() and resource.app.HasPrivilege("read") and resource.app.IsOwnedInPersonalOrSharedOrEveryoneSpace() and !resource.IsPublished() and resource.IsOwnedByMe() and resource._actions={"update","delete"}
        # A professional user can publish objects in an unpublished app that the user owns, or in a everyone space as a member, or in a shared space as producer.
        resource.IsAppObject() and user.IsProfessional() and resource.app.HasPrivilege("read") and !resource.app.IsPublished() and resource.app.IsOwnedInPersonalOrSharedOrEveryoneSpace() and !resource.IsScriptObject() and resource._actions={"publish"}
        # A user can create a story object (stories, bookmarks and snapshot) in a everyone space where the user is a member, or in a shared space where the user is a consumer.
        resource.IsAppObject() and resource.app.HasPrivilege("read") and (resource.app.UserIsMemberInEveryoneSpace() or resource.app.UserIsSharedSpaceMember()) and resource.IsStoryObject() and !resource.IsPublished() and resource._actions={"create"}
        # A user can update and delete an owned personal story object (stories, bookmarks and snapshot) in a everyone space where the user is a member, or in a shared space where the user is a consumer.
        resource.IsAppObject() and resource.app.HasPrivilege("read") and (resource.app.UserIsMemberInEveryoneSpace() or resource.app.UserIsSharedSpaceMember()) and resource.IsStoryObject() and !resource.IsPublished()  and resource.IsOwnedByMe() and resource._actions={"update","delete"}
        # A user can duplicate objects if the user has duplicate access on the app
        resource.IsAppObject() and resource.app.HasPrivilege("duplicate") and resource.app.IsOwnedInPersonalOrSharedOrEveryoneSpace() and resource._actions={"duplicate"}
        # Analyser users can create app objects of type stories, snapshot and bookmarks in managed apps
        resource.IsAppObject() and resource.app.UserIsViewerInManagedSpace() and resource.app.HasPrivilege("read") and resource.IsStoryObject() and !resource.IsPublished() and resource._actions={"create"}
        # Analyser users can update and delete owned, unpublished app objects of type stories, snapshot and bookmarks in managed apps
        resource.IsAppObject() and resource.app.UserIsViewerInManagedSpace() and resource.app.HasPrivilege("read") and resource.IsStoryObject() and !resource.IsPublished() and resource.IsOwnedByMe() and resource._actions={"update","delete"}
        # Professional users can create app objects of type sheets, stories, snapshot and bookmarks in managed apps
        resource.IsAppObject() and user.IsProfessional() and resource.app.UserIsContributorInManagedSpace() and resource.app.HasPrivilege("read") and resource.IsContentObject() and resource._actions={"create"}
        # Professional users can update and delete owned, unpublished app objects of type sheets, stories, snapshot and bookmarks in managed apps that allows self service
        resource.IsAppObject() and user.IsProfessional() and resource.app.UserIsContributorInManagedSpace() and resource.app.HasPrivilege("read") and resource.IsContentObject() and !resource.IsPublished() and resource.IsOwnedByMe() and resource._actions={"update","delete"}
        # Professional users can publish and unpublish app objects of type stories, snapshot and bookmarks in managed apps
        resource.IsAppObject() and user.IsProfessional() and resource.app.UserIsContributorInManagedSpace() and resource.app.HasPrivilege("read") and resource.IsContentObject() and resource.IsOwnedByMe() and !resource.IsApproved() and resource._actions={"publish"}
        # External services can read, import, create, update, and delete apps.
        resource.IsAppOrAppObject() and user.IsExternal() and resource._actions={"read","import","create","update","delete"}
        # A professional user shall be able to upload a QlikView app
        resource.IsQvApp() and user.IsProfessional() and resource.IsOwnedInPersonalSpace() and resource._actions={"import"}
        # External services shall have full access to QlikView apps
        resource.IsQvApp() and user.IsExternal() and resource._actions={"read","import","create","update","delete"}
        # If Qlikview app is in my personal space and owned by me I can share it
        resource.IsQvApp() and resource.IsPersonal() and resource.IsOwnedByMe() and !resource.IsPublished() and resource._actions={"share"}
        # The QlikView app can be opened in a personal space by the owner or shared to me
        resource.IsQvApp() and resource.IsPersonal() and (resource.IsOwnedByMe() or resource.IsSharedWithMe()) and resource._actions={"read"}
        # A tenant admin can open and delete all QlikView apps
        resource.IsQvApp() and user.IsTenantAdmin() and resource._actions={"read","delete"}
        # A user can open QlikView apps that the user has access to in a managed space
        resource.IsQvApp() and (resource.UserIsViewerInManagedSpace() or resource.UserIsFacilitatorInManagedSpace()) and resource._actions={"read"}
        # A user can update QlikView personal app attributes
        resource.IsQvApp() and resource.IsOwnedInPersonalSpace() and resource.HasPrivilege("read") and resource._actions={"update"}
        # A publisher can publish a QlikView app to a managed space.
        resource.IsQvApp() and resource.UserIsPublisherInManagedSpace() and resource._actions={"publish"}
        # If QV app has originAppId and user is publisher in a managed space user can republish
        resource.IsQvApp() and resource.UserIsPublisherInManagedSpace() and resource.originAppId == app.id and resource._actions={"republish"}
        # A user with role facilitator or space owner can delete apps in a managed space
        resource.IsQvApp() and resource.UserIsFacilitatorInManagedSpace() and resource._actions={"delete"}
        # A professional user can delete QlikView personal apps
        resource.IsQvApp() and user.IsProfessional() and resource.IsOwnedInPersonalSpace() and resource._actions={"delete"}
        # A user can read QlikView personal apps
        resource.IsQvApp() and resource.IsOwnedInPersonalSpace() and resource._actions={"read"}
        # A professional user with role facilitator or space owner can update QlikView apps in a managed space
        resource.IsQvApp() and user.IsProfessional() and resource.UserIsFacilitatorInManagedSpace() and resource._actions={"update"}
        # A user can publish QlikView personal apps to a managed space
        resource.IsQvApp() and resource.IsOwnedInPersonalSpace() and resource._actions={"publish"}
        # A tenant admin user can duplicte an app in his own personal space
        resource.IsQvApp() and resource.IsOwnedInPersonalSpace() and user.IsTenantAdmin() and resource._actions={"duplicate"}
        # A shared space member user can open QlikView apps in a shared space
        resource.IsQvApp() and resource.UserIsSharedSpaceMember() and resource._actions={"read"}
        # A shared space editor user can delete QlikView apps in a shared space
        resource.IsQvApp() and resource.UserIsEditorInSharedSpace() and resource._actions={"delete"}
        # A shared space editor user can update QlikView apps in a shared space
        resource.IsQvApp() and resource.UserIsEditorInSharedSpace() and resource._actions={"update"}
        # A shared space editor professional user can import QlikView apps to a shared space
        resource.IsQvApp() and user.IsProfessional() and resource.UserIsEditorInSharedSpace() and resource._actions={"import"}
        # A shared space editor professional or personal space professional user can change space for QlikView apps
        resource.IsQvApp() and user.IsProfessional() and (resource.UserIsEditorInSharedSpace() or resource.IsOwnedInPersonalSpace()) and resource._actions={"change_space"}
        # If you have access to the QlikView app you can read all objects
        resource.IsQvAppObject() and resource.app.HasPrivilege("read") and !resource.IsScriptObject() and resource._actions={"read"}
        # On global API:s we allow read to everyone
        resource._resourcetype="node" and resource._actions={"read"}
        # On global API:s with reload access professional users should have access
        resource._resourcetype="node" and user.IsProfessional() and resource._actions={"reload"}
      deny: ""
      func: |
        # User is a professional user.
        IsProfessional() (self._provision.accesstype == "professional")
        # User is an analyzer user.
        IsAnalyzer() (self._provision.accesstype == "analyzer")
        # User is a service user (external).
        IsExternal() (self.subType == "externalClient")
        # User is a tenant administrator.
        IsTenantAdmin() (self.roles =="TenantAdmin")
        # Checks parent app privileges. Privileges on parent must currently be computed in a first pass.
        app.HasPrivilege(x) (self.app._privileges == x)
        # Checks if a privilege exists on a resource.
        HasPrivilege(x) (self._actions.Matched () = x)
        # Resource is published.
        IsPublished() (self.published == "true")
        # App has Section Access.
        HasSectionAccess() (self.hassectionaccess == "true")
        # Helper macro for detecting if a property is missing or empty string.
        MissingOrEmptyProp(prop) (self.prop.empty() or self.prop = "")
        # Space is disabled
        IsDisabledSpace() (self.spaceId == space.id and space.disabled == "true")
        # Everyone space is disabled
        IsDisabledEveryone() (self.spaceId == space.id and space.type == "everyone" and space.disabled == "true")
        # In managed space
        IsManaged() (self.spaceId == space.id and space.type == "managed")
        # In shared space
        IsShared() (self.spaceId == space.id and space.type == "shared")
        # In everyone space
        IsEveryone() (self.spaceId == space.id and space.type == "everyone" and !self.IsDisabledSpace())
        # In distributed from another environment
        IsDistributed() (self.MissingOrEmptyProp(spaceId) and self.IsPublished())
        # Resource is approved.
        IsApproved() (self.approved = "true")
        # App is personal, in a personal space or not in a space.
        IsPersonal() ((self.spaceId == space.id and space.type == "personal") or (self.MissingOrEmptyProp(spaceId) and !self.IsPublished()))
        # App is shared with user.
        IsSharedWithMe() ((!user.MissingOrEmptyProp(sub) and self.custom.userswithaccess = user) or (!user.MissingOrEmptyProp(userId) and self.custom.userIdsWithAccess = user.userId) or (!user.MissingOrEmptyProp(groups) and self.custom.groupswithaccess = user.groups) or (!user.MissingOrEmptyProp(groupIds) and self.custom.groupIdsWithAccess = user.groupIds))
        # Resource is owned by user.
        IsOwnedByMe() (self.owner = user or (!self.MissingOrEmptyProp(ownerId) and self.ownerId == user.userId))
        # Is app object a master item.
        IsMasterObject() (self._objecttype = { "masterobject", "dimension", "measure" })
        # Is app object a story item.
        IsStoryObject() (self._objecttype = { "story", "snapshot", "bookmark" })
        # Is app object a content item (sheet, story, snapshot, bookmark).
        IsContentObject() (self._objecttype = {"sheet", "story", "snapshot", "bookmark"})
        # Public objects created outside of sheets
        IsPublicObject() (self._objecttype = { "appprops", "colormap", "odagapplink", "loadmodel", "dynamicappview"})
        # Is it the script object.
        IsScriptObject() (self._objecttype = "app_appscript")
        # Is user a member of an everyone space that the resource belongs to.
        UserIsMemberInEveryoneSpace() (self.spaceId == space.id and space.type == "everyone" and !self.IsDisabledSpace())
        # Is user an editor in the space this resource belongs to. Producers are the roles produce or facilitator (space owner is automatically a facilitator)
        UserIsEditorInSharedSpace() (self.spaceId == space.id and space.type == "shared" and (space.roles == {"producer", "facilitator"} or user.userId == space.ownerId))
        # Is is a consumer in a shared space
        UserIsConsumerInSharedSpace() (self.spaceId == space.id and space.type == "shared" and space.roles == {"consumer"})
        # Is user the owner of this personal space.
        IsOwnedInPersonalSpace() (self.IsOwnedByMe() and self.IsPersonal())
        # Is user member of a shared space that the resource belongs to.
        UserIsSharedSpaceMember() (self.spaceId == space.id and space.type == "shared" and (space.roles == {"consumer", "producer", "facilitator"} or user.userId == space.ownerId))
        # User can publish to a managed space if he has the role publisher or he is the owner of the space.
        UserIsPublisherInManagedSpace() (self.spaceId == space.id and space.type == "managed" and (space.roles == {"publisher"} or user.userId == space.ownerId))
        # Is user member of a managed space that the resource belongs to.
        UserIsViewerInManagedSpace() (self.spaceId == space.id and space.type == "managed" and (space.roles == {"consumer", "contributor", "facilitator"} or user.userId == space.ownerId))
        # Is user member of a managed space that the resource belongs to.
        UserIsFacilitatorInManagedSpace() (self.spaceId == space.id and space.type == "managed" and (space.roles == {"facilitator"} or user.userId == space.ownerId))
        # Is user member of a managed space that the resource belongs to.
        UserIsContributorInManagedSpace() (self.spaceId == space.id and space.type == "managed" and (space.roles == {"contributor", "facilitator"} or user.userId == space.ownerId))
        # Is user a facilitator on the space this resource belongs to.
        UserIsFacilitator() (self.spaceId == space.id and space.type == {"shared", "managed"} and (space.roles == {"facilitator"} or user.userId == space.ownerId))
        # Is owned in personal space, or is member in everyone space, or editor in shared space.
        IsOwnedInPersonalOrSharedOrEveryoneSpace() (self.IsOwnedInPersonalSpace() or self.UserIsMemberInEveryoneSpace() or self.UserIsEditorInSharedSpace())
        # Is owned in everyone space.
        IsOwnedInEveryoneSpace() (self.IsOwnedByMe() and self.UserIsMemberInEveryoneSpace())
        # Is app.
        IsApp() (self._resourcetype=={"app"})
        # Is app object.
        IsAppObject() (self._resourcetype=={"app.object"})
        # Is app or app object.
        IsAppOrAppObject() (self._resourcetype=={"app", "app.object"})
        # Is a QlikView app.
        IsQvApp() (self._resourcetype=={"qvapp"})
        # Is a QlikView app object.
        IsQvAppObject() (self._resourcetype=={"qvapp.object"})
        # Is datafile.
        IsDataFile() (self._resourcetype=={"datafile"})
        # Is GenericLink.
        IsGenericLink() (self._resourcetype=={"genericlink"})
kind: ConfigMap
metadata:
  labels:
    app: engine
    release: qliksense
  name: qliksense-engine-engine-rules-cm
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: eventing
    release: qliksense
  name: qliksense-eventing-configs-66689tmb8m
  namespace: default
---
apiVersion: v1
data:
  featuresConfig: '{"globalFeatures":{"ACCUMULATIONS":true,"ACCUMULATION_OTHERS":true,"ALLOW_OPEN_HUB_IN_SAME_TAB":true,"AOSHARE":true,"AOSHARE_FROM_SPACE":true,"AUDIT_API_ENABLED":true,"AUDIT_SUBSCRIPTION_ENABLED":true,"AYLIEN_NewsConnector":true,"AYLIEN_SentimentConnector":true,"AmazonS3Connector":true,"AzureStorageConnector":true,"BARCHART":true,"BC_STYLE_EDITOR":true,"BC_XAXIS_MODE":true,"BitlyConnector":true,"CAO":true,"CAO_DATA_VALUES":true,"CAO_ENABLE_PUBLISHED":true,"CAO_TWEAK":true,"CE_PRECEDENTS":true,"CLASSIFY_ON_DEMAND":true,"CLIENT_DATACONNECTIONS":true,"CLIENT_METRICS":true,"CLIENT_REST_TIMEOUT":true,"CLOUD_EXTENSIONS":true,"CLOUD_SHARING_SERVICE":true,"CLOUD_THEMES":true,"CONNECTOR_DCAAS":true,"CONTAINER_OBJECT":true,"DASHBOARD_EXT_BUNDLE":true,"DATAFILES_SPACES_ENABLED":true,"DATAPREP_REST":true,"DISABLE_ONPREM_THEMES":true,"DMV_SEARCH":true,"DM_join_tables":true,"DOWNLOAD_DATA_OBJECT":true,"DOWNLOAD_OBJECT":true,"DOWNLOAD_USE_REPORTING":true,"DROP_ZONES":true,"DYNAMIC_VIEWS":true,"DropboxConnector":true,"ELASTIC_DND":true,"EXPORT_DATA_ENABLED":true,"EXPORT_IMAGE_ENABLED":true,"FacebookFanPagesConnector":true,"FacebookInsightsConnector":true,"File_AmazonS3Connector":true,"File_AzureStorageConnector":true,"File_DropboxConnector":true,"File_GoogleDriveConnector":true,"GEO_BACKGROUND_IMAGE":true,"GEO_BACKGROUND_WMS":true,"GEO_EXCL_AUTOZOOM":true,"GEO_EXPLORATION_MENU":true,"GEO_MYLOC":true,"GEO_OPERATIONS_GEOCODING":true,"GEO_OPERATIONS_SERVICE":true,"GEO_SIZE_LEGEND":true,"GitHubConnector":true,"GoogleAdSenseConnector":true,"GoogleAdWordsConnector":true,"GoogleAnalyticsConnector":true,"GoogleCalendarConnector":true,"GoogleDriveConnector":true,"GoogleSearchConsoleConnector":true,"HIDE_ABOUT_BUTTON":true,"HIDE_IDP":true,"HIDE_INVITE_USER":true,"HUB_BJ":true,"HUB_BJ2":true,"HUB_EXPORT_APP":true,"HUB_FILTER_BY_TAG":true,"HUB_GENERIC_LINKS":true,"HUB_GROUPS":true,"HUB_HOME":true,"HUB_MANAGED_SPACES":true,"HUB_QV":true,"HUB_SCHEDULE_RELOAD":true,"HUB_SHARE_APP":true,"HUB_SPACES":true,"HUB_WEBSOCKETS":true,"IFRAME_CONNECTOR_QWC":true,"INSIGHT_LIGHT_EDITING":true,"JIRAConnector":true,"LANDING_PAGE":true,"MANAGEMENT_CONSOLE_INVITE_USERS_ENABLED":true,"MANAGEMENT_CONSOLE_METRICS_ENABLED":false,"MANAGEMENT_CONSOLE_TRIAL_COUNTDOWN_ENABLED":true,"MEKKO":true,"MLREST":true,"MOBILE_GRID":true,"MailChimpConnectorV2":true,"MailboxIMAPConnector":true,"NLU_INSIGHTS":true,"NLU_INSIGHTS_VOICE_QUERY":true,"ODAG_CLIENT_SAAS":true,"ODAG_SAAS_ENABLED":true,"ODAG_SHARED_SPACES":true,"PC_STYLE_EDITOR":true,"PP_ADD_MASTER":true,"QUOTA_MANAGEMENT_APP_SIZE":true,"QUOTA_MANAGEMENT_SPACES":true,"REBRAND2018":true,"REMOTE_CONFIG_ENABLED":true,"SELECTION_INSIGHTS":true,"SELECTION_INSIGHTS_V2":true,"SHARED_SPACES_API_ENABLED":true,"SHARE_BUTTON_EXTENSION":true,"SINGLE_CONFIG":true,"SMTPConnector":true,"SPA":true,"SlackConnector":true,"StravaConnector":true,"SugarCRMConnector":true,"SurveyMonkeyConnector":true,"TABLE_STYLES":true,"THEME_CARDS":true,"TextAnalyser_MeaningCloudConnector":true,"TextAnalyser_RepustateConnector":true,"TextAnalyser_Sentiment140Connector":true,"TextAnalyser_WatsonConnector":true,"TwitterConnector":true,"USE_LOCALE_SERVICE":true,"VIZBUN_QCS_31":true,"VIZBUN_QCS_SMARTPIVOT":true,"VIZBUN_QCS_TRELLIS":true,"VIZBUN_QCS_VARIANCE_WATERFALL":true,"VIZ_EXT_BUNDLE":true,"YouTubeAnalyticsConnector":true,"YouTubeConnector":true,"analyzerEnabled":true,"apache-hive":true,"apache-phoenix":true,"apache-spark":true,"apiClientsEnabled":true,"azure_sql":true,"createAndReloadEnabled":true,"drill":true,"gbq":true,"impala":true,"mongo":true,"mssql":true,"mysql":true,"oracle":true,"postgres":true,"presto":true,"qix-datafiles":true,"redshift":true,"rest":true,"sap-sql":true,"sfdc":true,"snowflake":true,"teradata":true},"tenantFeatures":{},"userFeatures":{}}'
kind: ConfigMap
metadata:
  labels:
    app: feature-flags
    release: qliksense
  name: qliksense-feature-flags-configmap
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: feature-flags
    release: qliksense
  name: qliksense-feature-flags-configs-bhgd28h2t5
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: generic-links
    release: qliksense
  name: qliksense-generic-links-configs-g85hh57b6g
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: geo-operations
    release: qliksense
  name: qliksense-geo-operations-configs-d484h7bcb4
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: groups
    release: qliksense
  name: qliksense-groups-configs-8mh8h8dc56
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: hub
    release: qliksense
  name: qliksense-hub-configs-hbd8bd6446
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: identity-providers
    release: qliksense
  name: qliksense-identity-providers-configs-d6877t78hm
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: insights
    release: qliksense
  name: qliksense-insights-configs-t6ftf27dd5
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  qlik.api.internal-api-keys: '{"keys":[{"kty":"EC","kid":"GR4BOyUiWkDpR1SGrquOymiuKSMdrYE4uuDBIkYnjyo","crv":"P-384","x":"I6klmP30Hl4QLEJdDve5eTiOvyIECXS-WQfFlcMq-mFqI82S6pOO57643k50l5aL","y":"csshnKq3RpKGMaDuBNLJjiG3WqXyAKhYP4P4JfEJR8yDqKuuNG69xag2nlzKdK4G","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEI6klmP30Hl4QLEJdDve5eTiOvyIECXS+\nWQfFlcMq+mFqI82S6pOO57643k50l5aLcsshnKq3RpKGMaDuBNLJjiG3WqXyAKhY\nP4P4JfEJR8yDqKuuNG69xag2nlzKdK4G\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-audit: '{"keys":[{"kty":"EC","kid":"V5uEI2x2sYjIq0Ezz7NlqoExS1Y4dvwhdt3iakflxGY","crv":"P-384","x":"7NySyRC9cu6VEOrtXjoSdzOQVUT2UUOHbqLkbETP8JAG_jpTALMhWQrhILQxdeBv","y":"9kWOIHqVJAEQRQoBDtBN1mq0hB0DEtuqTX5ERxxFAGjr0-rz-PgaoEJoftDG0rSi","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE7NySyRC9cu6VEOrtXjoSdzOQVUT2UUOH\nbqLkbETP8JAG/jpTALMhWQrhILQxdeBv9kWOIHqVJAEQRQoBDtBN1mq0hB0DEtuq\nTX5ERxxFAGjr0+rz+PgaoEJoftDG0rSi\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-chronos-worker: '{"keys":[{"kty":"EC","kid":"BKIz36TOxYe2wf6sB2f2pA5sb9GIDOZZXmWHDYG-pwQ","crv":"P-384","x":"jKPw2LipVXTTGU9IdWMVXaHraZkTFzw-rDyV46lzdSi9UhWJPW_70BGWCVrlqwK0","y":"xHoMjZjTj72j1Ji498c7ebFJ3hmNC5UPMn9lLw4mJpRnLCd-aHdYJHDkNsJN5Wjc","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEjKPw2LipVXTTGU9IdWMVXaHraZkTFzw+\nrDyV46lzdSi9UhWJPW/70BGWCVrlqwK0xHoMjZjTj72j1Ji498c7ebFJ3hmNC5UP\nMn9lLw4mJpRnLCd+aHdYJHDkNsJN5Wjc\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-collections: '{"keys":[{"kty":"EC","kid":"2gMxQ_Xn45K4P_UZK8QcQT72l1R9-zwQGnNTiDvx8VI","crv":"P-384","x":"gh2rEM1NVo611yqSY2HJkaZzclyrUuYFhsRUBTCXSElKij48E9V6ALxuy8apKi-I","y":"-sU5Y9BxoIoVdA71LHbst004tQ_thYGXyYtYmGaxSr1Xe1-Jp47_OLD2afOhwIHJ","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEgh2rEM1NVo611yqSY2HJkaZzclyrUuYF\nhsRUBTCXSElKij48E9V6ALxuy8apKi+I+sU5Y9BxoIoVdA71LHbst004tQ/thYGX\nyYtYmGaxSr1Xe1+Jp47/OLD2afOhwIHJ\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-data-connections: '{"keys":[{"kty":"EC","kid":"Imjw67kdScLNfPPragGwlTSZf4E_XvoNCR3IK6BETGk","crv":"P-384","x":"fCCpT_yrTX_rq175JJvRlfxGdxSizgg9UK7CWcmRO5jBnutLOfMVm68yjbWpMp5s","y":"1FK4YAyVh5mOFp-Fg3sKChvAog33FNtI0AaVLbWoSZGRd-9Ei50zITWnnzTOEv-A","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEfCCpT/yrTX/rq175JJvRlfxGdxSizgg9\nUK7CWcmRO5jBnutLOfMVm68yjbWpMp5s1FK4YAyVh5mOFp+Fg3sKChvAog33FNtI\n0AaVLbWoSZGRd+9Ei50zITWnnzTOEv+A\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-data-engineering-exporter: '{"keys":[{"kty":"EC","kid":"Ekg75kPFEn8WzawPn59o5jr_BqcOkli-919rYn_VCmg","crv":"P-384","x":"t7HxljSnx4SCHE3eykDSxnE1yU0CBESJDAHVvCukyuvzcQALuqwwVXkfMOVtnVwf","y":"qTL2PNQVqjCTHzj_FxVAS8w9YhiZSNDcw9y2aE_nYVbaH59hevkg0oBTTcnpcogh","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEt7HxljSnx4SCHE3eykDSxnE1yU0CBESJ\nDAHVvCukyuvzcQALuqwwVXkfMOVtnVwfqTL2PNQVqjCTHzj/FxVAS8w9YhiZSNDc\nw9y2aE/nYVbaH59hevkg0oBTTcnpcogh\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-edge-auth: '{"keys":[{"kty":"EC","kid":"ENTY6Jgmp49H6xPfogxepd-xXdbEgqvQsUu3e5cPkmI","crv":"P-384","x":"agf54BGVzQ1yooK8JvYVeCXB1Oham64QvVe33orqj8LrxlEurZnyfFdUKK1Q-0hX","y":"_sTVgkhpeAic4anO2pfdoBTgndRJgm3GW_Z89FUjShI55fcgnE904Xa--cET2es6","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEagf54BGVzQ1yooK8JvYVeCXB1Oham64Q\nvVe33orqj8LrxlEurZnyfFdUKK1Q+0hX/sTVgkhpeAic4anO2pfdoBTgndRJgm3G\nW/Z89FUjShI55fcgnE904Xa++cET2es6\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-engine: '{"keys":[{"kty":"EC","kid":"uHxp0YvnYQx-AqQgHnxgKqTk_HmZiT67B8SYOlzSgoM","crv":"P-384","x":"kPiEXSJOQ1FSVvC7flId1pZYIxox10XyPmjQXJjONZ2MEZR72nVBseRmaphX-IOz","y":"L-uxUeqMiLUQ5j7bfUDg5tgT8gN2n7jzaaDxHOgy4Dvbba2Ex1jpHnB2P2Tm6h9q","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEkPiEXSJOQ1FSVvC7flId1pZYIxox10Xy\nPmjQXJjONZ2MEZR72nVBseRmaphX+IOzL+uxUeqMiLUQ5j7bfUDg5tgT8gN2n7jz\naaDxHOgy4Dvbba2Ex1jpHnB2P2Tm6h9q\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-eventing: '{"keys":[{"kty":"EC","kid":"_a9lgpnajgIAPxZIrOfyJ2O_xFyEP0QyywWewyYNoWo","crv":"P-384","x":"cKoZW3g0aMq85UkPgTnTEKKoiw8BD5u5kN-dJwCt4hItEGvSnKDlTq97f-teXvkw","y":"HdF8BxSQTdSjV_LrDMspP_B5Mtyvs-oCJ6nZb_o-P0EKMSZT1fGXfQh7kTvUu5HF","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEcKoZW3g0aMq85UkPgTnTEKKoiw8BD5u5\nkN+dJwCt4hItEGvSnKDlTq97f+teXvkwHdF8BxSQTdSjV/LrDMspP/B5Mtyvs+oC\nJ6nZb/o+P0EKMSZT1fGXfQh7kTvUu5HF\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-generic-links: '{"keys":[{"kty":"EC","kid":"z4YaArQ3CzF9748arHaNfJkHjPTB2nCoBLeN-Zbdle0","crv":"P-384","x":"u9hZCyiVTPdhEFGBWwx4yozNQGXDItPQcEAgzYaAG0tjuHqeU4bBEgE-58PyqAzd","y":"WzB8k0OlmEQdKekhfe5lm6PRlCWbI-k_jZA1prsz5OiNf7A4OZDKlay0LAF419RB","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEu9hZCyiVTPdhEFGBWwx4yozNQGXDItPQ\ncEAgzYaAG0tjuHqeU4bBEgE+58PyqAzdWzB8k0OlmEQdKekhfe5lm6PRlCWbI+k/\njZA1prsz5OiNf7A4OZDKlay0LAF419RB\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-geo-operations: '{"keys":[{"kty":"EC","kid":"N0I3roEVoh1utSb1JFkqklahRXmGikq8FIkxLLuEpcU","crv":"P-384","x":"ypbW9AEZdYOPOFJhrUUzWGTEuPqT0rOYzSP2bSa2-ISKuJen25cCMQ2bzJTOWpMn","y":"G-4DaOWXMKM6WW_ufgnhf-cDGpcitGvlWThgmfNLUsbgO3Aeq8ADmjt2IZqJZL-G","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEypbW9AEZdYOPOFJhrUUzWGTEuPqT0rOY\nzSP2bSa2+ISKuJen25cCMQ2bzJTOWpMnG+4DaOWXMKM6WW/ufgnhf+cDGpcitGvl\nWThgmfNLUsbgO3Aeq8ADmjt2IZqJZL+G\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-groups: '{"keys":[{"kty":"EC","kid":"-zq2j2DUp6FisDDITRjytFCNj7ieIySuThHIz_TthR0","crv":"P-384","x":"4K52XYrU0GK-pYu-ZtkDU-5P1-jsuovRa8aCqwd_JdFb4EpZEepCTXWg1Vs_M2SV","y":"tAoENNE39uCVJx9_wWZN8YoDgEoryd8pbhsPkf6uSYEsMnnAOC8KctNosBk6CbfI","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE4K52XYrU0GK+pYu+ZtkDU+5P1+jsuovR\na8aCqwd/JdFb4EpZEepCTXWg1Vs/M2SVtAoENNE39uCVJx9/wWZN8YoDgEoryd8p\nbhsPkf6uSYEsMnnAOC8KctNosBk6CbfI\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-identity-providers: '{"keys":[{"kty":"EC","kid":"JYJ4SoPYPN8JWQR7UBuE2orr1rZEFSc53ARC0e1ldVo","crv":"P-384","x":"cdOgdRskL4yQccelknZPICzsjpjekBiUfBzBG4cRHQ3spcDp_s05yBkiiH4e1y2d","y":"BerNrxRqxYEotHKNdzDdi-qcnA1jJULdPT9nWF5wzWsYweAYS-lbuqWzjC7uab78","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEcdOgdRskL4yQccelknZPICzsjpjekBiU\nfBzBG4cRHQ3spcDp/s05yBkiiH4e1y2dBerNrxRqxYEotHKNdzDdi+qcnA1jJULd\nPT9nWF5wzWsYweAYS+lbuqWzjC7uab78\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-insights: '{"keys":[{"kty":"EC","kid":"a6TNsX_wYGt2ADVrUf7E2mtc3dHYVGB4smiuluDfAnc","crv":"P-384","x":"Lj0RX4o0OTcXxsg07antpqr5GZAsFU_FOGVVlpa7y3yxGDThCgqQ-ECvWyxWUVT-","y":"PB5DoV63jWxdpnBN1XWKSWZeIZz0CBswirORAFduHLG2wZm9QrYPP6JfSrry6zXW","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAELj0RX4o0OTcXxsg07antpqr5GZAsFU/F\nOGVVlpa7y3yxGDThCgqQ+ECvWyxWUVT+PB5DoV63jWxdpnBN1XWKSWZeIZz0CBsw\nirORAFduHLG2wZm9QrYPP6JfSrry6zXW\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-invite: '{"keys":[{"kty":"EC","kid":"JtyhhqJOLBf8_-vRTthOdYW4ZsPC_sVn14eYRwrZbIw","crv":"P-384","x":"DhDSolF2fxuHGcySnczwSnhE97GgD8trtQeaCnmHTqoEkRPgHCNDdRW7KCecWKCL","y":"_zkjdDKwOVDwHtFe_9aPTb56YypPGTpXpPTC4Zaf0ODKmpMynwS8wDLgS__rIjMQ","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEDhDSolF2fxuHGcySnczwSnhE97GgD8tr\ntQeaCnmHTqoEkRPgHCNDdRW7KCecWKCL/zkjdDKwOVDwHtFe/9aPTb56YypPGTpX\npPTC4Zaf0ODKmpMynwS8wDLgS//rIjMQ\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-licenses: '{"keys":[{"kty":"EC","kid":"_WChJV76hqP6rsnPFV44TNYUR1l4jweS612XuTMopz0","crv":"P-384","x":"tiFoWOHCY4Sr_6wlauuDkUNNWOej76Ajt1YNtwHbji3vzdCCj3nZIu7ll-96J12c","y":"-ciEthokwFipGqaANkC5x1jqwt8HJM-wFgIybYIHqAr01ISZhui2PUgiQMBDvMbj","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEtiFoWOHCY4Sr/6wlauuDkUNNWOej76Aj\nt1YNtwHbji3vzdCCj3nZIu7ll+96J12c+ciEthokwFipGqaANkC5x1jqwt8HJM+w\nFgIybYIHqAr01ISZhui2PUgiQMBDvMbj\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-nl-parser: '{"keys":[{"kty":"EC","kid":"F3nEYPcWVLOjvqqeb8oMl-qk0xbMkV6j1sNb3w5DZ5Y","crv":"P-384","x":"Vg6b4TpqaqRYYY27lQWoIdN03Keo9a97ji68cA9hUMuNCdTMlsSCQgeLeVEmhg9p","y":"uGQIKuqadGyhceptJnxCG20jTrOqZoFm0HJIQDvHuje9t_V2cXvUsCmBXefry9u8","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEVg6b4TpqaqRYYY27lQWoIdN03Keo9a97\nji68cA9hUMuNCdTMlsSCQgeLeVEmhg9puGQIKuqadGyhceptJnxCG20jTrOqZoFm\n0HJIQDvHuje9t/V2cXvUsCmBXefry9u8\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-notification-prep: '{"keys":[{"kty":"EC","kid":"oy6oficqj3Os7ZLLNKIDeKPOzQDoKdhGQa-w0e6YQvI","crv":"P-384","x":"OJxJX7aWqfSnnBsiLeNW_QTNB1Kws1IYToSvw7fA_pLbB9Ezqbfre7maIOLoM1pc","y":"pktSxFQbYaqFkNDkqCs6iOOApZLU0pzxiaQoa0enGjZnBjmb3pfKKKoDcJZE9kvP","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEOJxJX7aWqfSnnBsiLeNW/QTNB1Kws1IY\nToSvw7fA/pLbB9Ezqbfre7maIOLoM1pcpktSxFQbYaqFkNDkqCs6iOOApZLU0pzx\niaQoa0enGjZnBjmb3pfKKKoDcJZE9kvP\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-odag: '{"keys":[{"kty":"EC","kid":"J-QC62aBDJrkbJXxEiZixY1wlPwAjJDeZHIgE_DjnXw","crv":"P-384","x":"uaEyYzjoRKYqhLOwlwWOXR4KDk6wMAlhlOBbzi0HZZeu25jThv1V3uEdXhIFH87e","y":"dkoVK3-zFA3BOYDHAp22_1oejwURjUR5BpHbAuXoU7wGrqPjch8Psd7gpF5WH8XO","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEuaEyYzjoRKYqhLOwlwWOXR4KDk6wMAlh\nlOBbzi0HZZeu25jThv1V3uEdXhIFH87edkoVK3+zFA3BOYDHAp22/1oejwURjUR5\nBpHbAuXoU7wGrqPjch8Psd7gpF5WH8XO\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-onboarding: '{"keys":[{"kty":"EC","kid":"9xviu78nWGhTSjKTUIKAWkTCQsYJ4g19iQMix8tl068","crv":"P-384","x":"WnXApdbD0fTwXSZQPHlurOFaDJe-_Qi33Q7nJM8iQJfoUBacJomm_b_7OgfEG3sy","y":"nZlo-lTKgwLDh7zG7DBkMItzYCOTSyNpkT5Alh5F6RI0QJWPvxYCMsqG43nO5Mev","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEWnXApdbD0fTwXSZQPHlurOFaDJe+/Qi3\n3Q7nJM8iQJfoUBacJomm/b/7OgfEG3synZlo+lTKgwLDh7zG7DBkMItzYCOTSyNp\nkT5Alh5F6RI0QJWPvxYCMsqG43nO5Mev\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-precedents: '{"keys":[{"kty":"EC","kid":"GrvbBlHIXFBB7vrpoOl4VyrGIYl_1kUgKSfNqBoh0ds","crv":"P-384","x":"CQFHkVIKx1pnS4BsE5Agwft7VicXrdE9PSYevBnRuuF_4G4A17Q0lZbVGeiffC9Y","y":"-1nOPkQrjZctPbI63Key_qRUOJVg1gOPYWvexNDjE_SwW3R7WFk8a-5_OM4Oe8Dr","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAECQFHkVIKx1pnS4BsE5Agwft7VicXrdE9\nPSYevBnRuuF/4G4A17Q0lZbVGeiffC9Y+1nOPkQrjZctPbI63Key/qRUOJVg1gOP\nYWvexNDjE/SwW3R7WFk8a+5/OM4Oe8Dr\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-qix-data-connection: '{"keys":[{"kty":"EC","kid":"Imjw67kdScLNfPPragGwlTSZf4E_XvoNCR3IK6BETGk","crv":"P-384","x":"fCCpT_yrTX_rq175JJvRlfxGdxSizgg9UK7CWcmRO5jBnutLOfMVm68yjbWpMp5s","y":"1FK4YAyVh5mOFp-Fg3sKChvAog33FNtI0AaVLbWoSZGRd-9Ei50zITWnnzTOEv-A","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEfCCpT/yrTX/rq175JJvRlfxGdxSizgg9\nUK7CWcmRO5jBnutLOfMVm68yjbWpMp5s1FK4YAyVh5mOFp+Fg3sKChvAog33FNtI\n0AaVLbWoSZGRd+9Ei50zITWnnzTOEv+A\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-qix-data-reload: '{"keys":[{"kty":"EC","kid":"QtiFtx-5MCcsnHb-xmWGgjwoJuEZYYkYHblN2I_Bibo","crv":"P-384","x":"tcecGYbktKzY2UACFHyM3V8iatPsxMk7TU-vyvsqBQqW13x8QXxM5oWHoUT2ffAn","y":"vrrEcsMbhqVGtzHgfu5UALLkurJrgdhnEVAbid8nivhC0kOMjjbMHHB9OsavQJsB","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEtcecGYbktKzY2UACFHyM3V8iatPsxMk7\nTU+vyvsqBQqW13x8QXxM5oWHoUT2ffAnvrrEcsMbhqVGtzHgfu5UALLkurJrgdhn\nEVAbid8nivhC0kOMjjbMHHB9OsavQJsB\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-qix-datafiles: '{"keys":[{"kty":"EC","kid":"zpiZ-klS65lfcq1K0-o29Sa0AAZYYr4ON_1VCtAbMEA","crv":"P-384","x":"W12TTwY7C8tuZl19O0ornUq6yPI87vJA4mSF1YKmWC9XvF32-ZRoerstW1j6Aisw","y":"Aphoey39y2s-_NDkrtevp-Yoy-OMC8O-9b-rFEJbBdFKT_xycepciTPUCG5HXDpr","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEW12TTwY7C8tuZl19O0ornUq6yPI87vJA\n4mSF1YKmWC9XvF32+ZRoerstW1j6AiswAphoey39y2s+/NDkrtevp+Yoy+OMC8O+\n9b+rFEJbBdFKT/xycepciTPUCG5HXDpr\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-qix-sessions: '{"keys":[{"kty":"EC","kid":"Wybd2-X3hcBpqDIjd3NwZahTsjpP1BqegTYVhx_KN1o","crv":"P-384","x":"oDr1snacUnZCEZ8ML4QhcTra9YOj-NLqJTKOHoUuZ9ovB_iSrNHyQjxseTtaL3lN","y":"Bx2nXRul753mPWyzQQpXK-n_K9dP7gMzLVMW9uTmsA8ftLtUFA2ubp13xkpb88bU","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEoDr1snacUnZCEZ8ML4QhcTra9YOj+NLq\nJTKOHoUuZ9ovB/iSrNHyQjxseTtaL3lNBx2nXRul753mPWyzQQpXK+n/K9dP7gMz\nLVMW9uTmsA8ftLtUFA2ubp13xkpb88bU\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-quotas: '{"keys":[{"kty":"EC","kid":"1Kyk7eZuL_cTcwK-n0IgGcupF9vdQnvgeov5fpxugCY","crv":"P-384","x":"TrlITZjHltbmQd11Vb9hKEsoSmYiXhhfkBIPa94chNtUbyF3CLjYOqZzUo0kCIKE","y":"70Ro89RtnRW8iBKEVJhs3P69aU7Gh0Ac6oRXRj0f_MVVzHBZI_pI1caEv8MdF1Hx","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAETrlITZjHltbmQd11Vb9hKEsoSmYiXhhf\nkBIPa94chNtUbyF3CLjYOqZzUo0kCIKE70Ro89RtnRW8iBKEVJhs3P69aU7Gh0Ac\n6oRXRj0f/MVVzHBZI/pI1caEv8MdF1Hx\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-reporting: '{"keys":[{"kty":"EC","kid":"7nHZ6rfrzzjxuhqByuIrLTWg4HnNzgMMQdURgUQKOvg","crv":"P-384","x":"OljjAsqkMTxBiNr6Gxwbo27gCP0NtaOE-Z-AEedIY97nOdcWaVIxBEPJK_6ubfcY","y":"p42QA1FsAKtN76TQF3vOa0hqMuaf0seBYoryhb8CQDbboLxKC1H4M07vWdYpwKRA","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEOljjAsqkMTxBiNr6Gxwbo27gCP0NtaOE\n+Z+AEedIY97nOdcWaVIxBEPJK/6ubfcYp42QA1FsAKtN76TQF3vOa0hqMuaf0seB\nYoryhb8CQDbboLxKC1H4M07vWdYpwKRA\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-resource-library: '{"keys":[{"kty":"EC","kid":"m_1HJQ4CKk1CGdjahppB9TE-ijXzfeZbPyEaPdrZ7q0","crv":"P-384","x":"RjVZgoQaUfAVxEiI8VGtbsz6ph64__XddAkj8pa6jNmNw5Ojnx_TVC7tHIMU9YYJ","y":"Rr5yaCSDwQouF4mlAC8hqiOirhYWNdovJlFzOn19A9sU1rnWTlVOMlBzVNrLmjdF","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAERjVZgoQaUfAVxEiI8VGtbsz6ph64//Xd\ndAkj8pa6jNmNw5Ojnx/TVC7tHIMU9YYJRr5yaCSDwQouF4mlAC8hqiOirhYWNdov\nJlFzOn19A9sU1rnWTlVOMlBzVNrLmjdF\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-sharing: '{"keys":[{"kty":"EC","kid":"nt7vrIzpznLm1wGRS7U7TF_4p4GEm5OEFmmuVJKy7Lc","crv":"P-384","x":"MyFvn6pcsJ2rdMfuNWcK3hbcLv4Bg9q0zt7Xcyapf7zT4b0G9um6bV-mRMpXNqjr","y":"2MXi0RajsQTY2T1VmOPF-uZqQs6vMCUnCZRI0zYKe8D-DeVMdq_lMdUlgJkCQnNp","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEMyFvn6pcsJ2rdMfuNWcK3hbcLv4Bg9q0\nzt7Xcyapf7zT4b0G9um6bV+mRMpXNqjr2MXi0RajsQTY2T1VmOPF+uZqQs6vMCUn\nCZRI0zYKe8D+DeVMdq/lMdUlgJkCQnNp\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-spaces: '{"keys":[{"kty":"EC","kid":"j3MbBtOiEib3tLcVbvscwehV3K0WAZVFBp3ysfsdksg","crv":"P-384","x":"ep7pduYemcRVVqWKe--V7m-kacwIKC18A2yuBVbBQGLUKCTBAO23fR6QGf_U5y-w","y":"l9n9QlF5fgqyfk8PckpPKq_zXvGTMNg_uoN1sB-KYgPjr0jQsHdRO_JgxbGEI_bq","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEep7pduYemcRVVqWKe++V7m+kacwIKC18\nA2yuBVbBQGLUKCTBAO23fR6QGf/U5y+wl9n9QlF5fgqyfk8PckpPKq/zXvGTMNg/\nuoN1sB+KYgPjr0jQsHdRO/JgxbGEI/bq\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-subscriptions: '{"keys":[{"kty":"EC","kid":"iUsv5s2Q5CXHPTFn-mHEnr5CIPrW5-KUrfuJPKlpyCE","crv":"P-384","x":"1vyDjEuHHM-Bvo-oO4ZKd6dRS5NazHM-qcl_2T1UGtAl6bIBUD9a6MMMfIxG1yOh","y":"6LTPElvI3DIF1Gmj6xlZELdafczq2eZoCG1NutlsOxXzG4gRVVNhwohDrhGbOj0C","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE1vyDjEuHHM+Bvo+oO4ZKd6dRS5NazHM+\nqcl/2T1UGtAl6bIBUD9a6MMMfIxG1yOh6LTPElvI3DIF1Gmj6xlZELdafczq2eZo\nCG1NutlsOxXzG4gRVVNhwohDrhGbOj0C\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-temporary-contents: '{"keys":[{"kty":"EC","kid":"ckZJbjOzS1zWHMV8XqX5Q_YKWx2A4FIuGM-Ac8PF4aA","crv":"P-384","x":"Dr1eUA8DovqLG6h1rzkEyuUoU2nnuQP6poSg4PKYx7SkC2wgWp3ru2BOGrCFGLq-","y":"O29e6ZKUxvV5_bOCTL8zuvOXCkvdA-DIgLZ3iF-RSc91UZxnU4odMjDwvXwKnbKy","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEDr1eUA8DovqLG6h1rzkEyuUoU2nnuQP6\npoSg4PKYx7SkC2wgWp3ru2BOGrCFGLq+O29e6ZKUxvV5/bOCTL8zuvOXCkvdA+DI\ngLZ3iF+RSc91UZxnU4odMjDwvXwKnbKy\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-tenants: '{"keys":[{"kty":"EC","kid":"Mf9AcMRQ-bLHduxLoE-POyozm6Ze6yfvW1Pyq3Fv1Bo","crv":"P-384","x":"sGQYXzx6jEU8pAzDBOjS6JJM3jqvW1MBOlWpm3AqagOErOjzI_l6C_6Z0NxuguKx","y":"BK8fuZsLY7UQ9QoHctUqxjImtgMTqpkgKo1C4zA5Ybo5lnUtIDffFsKIuSMhvA-F","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEsGQYXzx6jEU8pAzDBOjS6JJM3jqvW1MB\nOlWpm3AqagOErOjzI/l6C/6Z0NxuguKxBK8fuZsLY7UQ9QoHctUqxjImtgMTqpkg\nKo1C4zA5Ybo5lnUtIDffFsKIuSMhvA+F\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-users: '{"keys":[{"kty":"EC","kid":"jhnbOw3nZwHlAfz4FRjEPgo5CG_Tw0uezR2VsyagBzY","crv":"P-384","x":"JhGD0ZR_tBKSIChkAWlYE1C2kVuCF4gHUTEZcvzh1i77WeSJbMofOsLaPQ68EkC8","y":"FtULlIOHnafa8dZDY9aLnpo-Th3hklEQYnMNBHkIU-nUpuR2RQ84o0bj8Gsfb1dW","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEJhGD0ZR/tBKSIChkAWlYE1C2kVuCF4gH\nUTEZcvzh1i77WeSJbMofOsLaPQ68EkC8FtULlIOHnafa8dZDY9aLnpo+Th3hklEQ\nYnMNBHkIU+nUpuR2RQ84o0bj8Gsfb1dW\n-----END
    PUBLIC KEY-----\n"}]}'
  qlik.api.internal-web-notifications: '{"keys":[{"kty":"EC","kid":"YUiIenAWJzwQHexnMp5gqMm7-JzlAx5JhnoeqLHLvmo","crv":"P-384","x":"KbUjCkZdqhK0IEV_fI04AeVGs1Aa_Oe_Y6fop4GHgWZCQIY0l3-0lQTYc7_nUSyH","y":"fncz7kPKWLdhR76urjIFj2cmlm907t3ywfI8awrMVpCX8oV5LSDfL69_Jox7QPWo","pem":"-----BEGIN
    PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEKbUjCkZdqhK0IEV/fI04AeVGs1Aa/Oe/\nY6fop4GHgWZCQIY0l3+0lQTYc7/nUSyHfncz7kPKWLdhR76urjIFj2cmlm907t3y\nwfI8awrMVpCX8oV5LSDfL69/Jox7QPWo\n-----END
    PUBLIC KEY-----\n"}]}'
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: keys
    release: qliksense
  name: qliksense-keys-configs-b6tgf6d5f8
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: licenses
    release: qliksense
  name: qliksense-licenses-configs-4fbdct54b4
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: locale
    release: qliksense
  name: qliksense-locale-configs-g2b64824c5
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: management-console
    release: qliksense
  name: qliksense-management-console-configs-m8t7h76h4h
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: messaging
    release: qliksense
  name: qliksense-messaging-configs-hmmbf8ghg7
  namespace: default
---
apiVersion: v1
data:
  gnatsd.conf: |-
    listen: 0.0.0.0:4222
    http: 0.0.0.0:8222
    client_advertise: messaging-nats-client:4222

    # Authorization for client connections
    authorization {
      timeout:  1
      users: [
        {
          user: "nats_client",
          password: "T0pS3cr3t",
        }
      ]
    }

    # Logging options
    debug: false
    trace: false
    logtime: false

    # Pid file
    pid_file: "/tmp/gnatsd.pid"

    # Some system overides


    # Clustering definition
    cluster {
      listen: 0.0.0.0:6222

      no_advertise: false

      # Authorization for cluster connections

      # Routes are actively solicited and connected to from this server.
      # Other servers can connect to us if they supply the correct credentials
      # in their routes definitions from above
      routes = [
        nats://qliksense-messaging-nats-cluster:6222
      ]
    }
  users.json: '[{"stanPermissions":{"subscribe":["system-events.odag.request","system-events.engine.app","system-events.user-session","system-events.spaces","system-events.licenses","system-events.generic-links","system-events.api-keys"]},"user":"audit"},{"stanPermissions":{"publish":["chronos-worker.\u003e"]},"user":"chronos-worker"},{"stanPermissions":{"subscribe":["system-events.\u003e"]},"user":"data-engineering-exporter"},{"stanPermissions":{"publish":["system-events.user-session"],"subscribe":["system-events.users","system-events.user-session","system-events.identity-providers","private.idp-sync"]},"user":"edge-auth"},{"stanPermissions":{"publish":["com.qlik.app","com.qlik.engine.session","system-events.engine.app","system-events.engine.session"]},"user":"engine"},{"stanPermissions":{"publish":["private.idp-sync","system-events.identity-providers"]},"user":"identity-providers"},{"stanPermissions":{"publish":["system-events.invite"],"subscribe":["system-events.users"]},"user":"invite"},{"stanPermissions":{"subscribe":["system-events.engine.app"]},"user":"nl-parser"},{"stanPermissions":{"publish":["system-events.odag.request","odag.\u003e"],"subscribe":["odag.\u003e","system-events.engine.app","system-events.reloadResults"]},"user":"odag"},{"stanPermissions":{"publish":["reload","system-events.reloadResults"],"subscribe":["reload"]},"user":"qix-data-reload"},{"stanPermissions":{"publish":["system-events.resource-library"]},"user":"resource-library"},{"stanPermissions":{"publish":["system-events.tenants","system-events.web-integrations"]},"user":"tenants"},{"stanPermissions":{"publish":["system-events.users"]},"user":"users"},{"stanPermissions":{"publish":["system-events.api-keys"]},"user":"api-keys"},{"stanPermissions":{"publish":["system-events.items"],"subscribe":["system-events.engine.app"]},"user":"collections"},{"stanPermissions":{"publish":["system-events.licenses"],"subscribe":["system-events.licenses"]},"user":"licenses"},{"stanPermissions":{"publish":["system-events.spaces"],"subscribe":["system-events.tenants"]},"user":"spaces"},{"stanPermissions":{"subscribe":["system-events.engine.app"]},"user":"precedents"},{"stanPermissions":{"publish":["system-events.notification-requests"],"subscribe":["system-events.engine.app"]},"user":"eventing"},{"stanPermissions":{"subscribe":["system-events.engine.app","system-events.reloadResults"]},"user":"qix-sessions"},{"stanPermissions":{"subscribe":["system-events.engine.app","system-events.spaces"]},"user":"qix-datafiles"},{"stanPermissions":{"publish":["system-events.notification-request"],"subscribe":["system-events.engine.app"]},"user":"sharing"},{"stanPermissions":{"subscribe":["system-events.engine.app"]},"user":"subscriptions"},{"stanPermissions":{"publish":["system-events.transport-request"],"subscribe":["system-events.notification-request"]},"user":"notification-prep"},{"natsPermissions":{"subscribe":["system-events.web-notifications"]},"user":"web-notifications"},{"stanPermissions":{"publish":["system-events.generic-links"]},"user":"generic-links"},{"stanPermissions":{"subscribe":["system-events.spaces"]},"user":"data-connections"}]'
kind: ConfigMap
metadata:
  labels:
    app: messaging
    chart: nats-2.4.1
    heritage: Tiller
    release: qliksense
  name: qliksense-messaging-nats
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: mongodb
    release: qliksense
  name: qliksense-mongodb-configs-g8hmkgkgk2
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: nl-broker
    release: qliksense
  name: qliksense-nl-broker-configs-2d6g6595h4
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: nl-parser
    release: qliksense
  name: qliksense-nl-parser-configs-5kcfm5c877
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: odag
    release: qliksense
  name: qliksense-odag-configs-7h6dm8bk7t
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: policy-decisions
    release: qliksense
  name: qliksense-policy-decisions-configs-mc7k7cgkc2
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  mongoDbUri: mongodb://$(PREFIX)-mongodb:27017/precedents
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: precedents
    release: qliksense
  name: qliksense-precedents-configs-8hg85mf574
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  mongoDbUri: mongodb://$(PREFIX)-mongodb:27017/qix-data-connection
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: qix-data-connection
    release: qliksense
  name: qliksense-qix-data-connection-configs-h8d7h22b9c
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: qix-data-reload
    release: qliksense
  name: qliksense-qix-data-reload-configs-fbbt544k27
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  mongoDbUri: mongodb://$(PREFIX)-mongodb:27017/qix-datafiles
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: qix-datafiles
    release: qliksense
  name: qliksense-qix-datafiles-configs-b2gktgtmt4
  namespace: default
---
apiVersion: v1
data:
  appPlacement: |
    selectors:
    - qlik.com/default
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  selectors: '{"qv-selectors":["qlik.com/default"],"selectors":["qlik.com/default"]}'
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: qix-sessions
    release: qliksense
  name: qliksense-qix-sessions-configs-ht46k686dg
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  something: other
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: qlikview-client
    release: qliksense
  name: qliksense-qlikview-client-configs-9245h2t282
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: quotas
    release: qliksense
  name: qliksense-quotas-configs-dm49m86ht9
  namespace: default
---
apiVersion: v1
data:
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  redis.conf: |-
    # User-supplied configuration:
    # maxmemory-policy volatile-lru
  replica.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
kind: ConfigMap
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-redis
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    release: qliksense
  name: qliksense-redis-configs-c7hm7th5f7
  namespace: default
---
apiVersion: v1
data:
  ping_local.sh: |-
    response=$(
      redis-cli \
        -a $REDIS_PASSWORD \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_local.sh" || exit_status=$?
    "$script_dir/ping_master.sh" || exit_status=$?
    exit $exit_status
  ping_master.sh: |-
    response=$(
      redis-cli \
        -a $REDIS_MASTER_PASSWORD \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
kind: ConfigMap
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-redis-health
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: reload-tasks
    release: qliksense
  name: qliksense-reload-tasks-configs-tf8gg5d4md
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  redisUri: http://qliksense-reporting-redis-master:6379
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: reporting
    release: qliksense
  name: qliksense-reporting-configs-d9fmc9ctc4
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  mongoDbUri: mongodb://$(PREFIX)-mongodb:27017/resource-library
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: resource-library
    release: qliksense
  name: qliksense-resource-library-configs-fd4g99k5mf
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: sense-client
    release: qliksense
  name: qliksense-space-client-configs-6g8d96797g
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  mongoDbUri: mongodb://$(PREFIX)-mongodb:27017/spaces
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: spaces
    release: qliksense
  name: qliksense-spaces-configs-654ftth4k4
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  keysUri: http://qliksense-temporary-contents-keys:8080/v1/keys/qlik.api.internal
  mongoDbUri: mongodb://$(PREFIX)-mongodb:27017/temporary-contents
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: temporary-contents
    release: qliksense
  name: qliksense-temporary-contents-configs-hh228g6b5t
  namespace: default
---
apiVersion: v1
data:
  blacklistedHostnames: '[]'
kind: ConfigMap
metadata:
  labels:
    app: tenants
    release: qliksense
  name: qliksense-tenants-configmap
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: tenants
    release: qliksense
  name: qliksense-tenants-configs-6tc689g652
  namespace: default
---
apiVersion: v1
data:
  imageRegistry: qlik-docker-qsefe.bintray.io
  ingressAuthUrl: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  ingressClass: qlik-nginx
  redisImageRegistry: docker.io/bitnami
  storageClassName: ""
kind: ConfigMap
metadata:
  labels:
    app: users
    release: qliksense
  name: qliksense-users-configs-797g2bt77f
  namespace: default
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRBSWpUZm5mRG9hOUNlRUlybFhKcFp3YytMZTFIYmg3THdvb1FoOVlicGRCdzVuSVFPUkdBSTAKRXNHRWlVUERpTXFnQndZRks0RUVBQ0toWkFOaUFBVHMzSkxKRUwxeTdwVVE2dTFlT2hKM001QlZSUFpSUTRkdQpvdVJzUk0vd2tBYitPbE1Bc3lGWkN1RWd0REYxNEcvMlJZNGdlcFVrQVJCRkNnRU8wRTNXYXJTRUhRTVMyNnBOCmZrUkhIRVVBYU92VDZ2UDQrQnFnUW1oKzBNYlN0S0k9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: VjV1RUkyeDJzWWpJcTBFeno3Tmxxb0V4UzFZNGR2d2hkdDNpYWtmbHhHWQ==
kind: Secret
metadata:
  labels:
    app: audit
    release: qliksense
  name: qliksense-audit-secrets-bh877m4dmf
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  redisPassword: NGkUp0VDJtc3xiyC
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: chronos
    release: qliksense
  name: qliksense-chronos-secrets-k69tk64c8b
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  redisPassword: TkdrVXAwVkRKdGMzeGl5Qw==
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRDM2RPR0R2M201WC82eThkcDFwUVFCZWdDYXZLWkN3VW1JMWw0cC9IamFVRURadW5TY1oxbXYKVmNlVGNIMi9nNHVnQndZRks0RUVBQ0toWkFOaUFBU01vL0RZdUtsVmROTVpUMGgxWXhWZG9ldHBtUk1YUEQ2cwpQSlhqcVhOMUtMMVNGWWs5Yi92UUVaWUpXdVdyQXJURWVneU5tTk9QdmFQVW1MajN4enQ1c1VuZUdZMExsUTh5CmYyVXZEaVltbEdjc0ozNW9kMWdrY09RMndrM2xhTnc9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: QktJejM2VE94WWUyd2Y2c0IyZjJwQTVzYjlHSURPWlpYbVdIRFlHLXB3UQ==
kind: Secret
metadata:
  labels:
    app: chronos-worker
    release: qliksense
  name: qliksense-chronos-worker-secrets-tbkbm8b6d9
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRCS1BWMHlGQ3JlamE3OVcxa3JRc2xTMFZPV1VVLzRhSDhMbmVDRHpGL29TeXBGZlR0Z0xKNVEKNXNZWVZ4N3Nqd0tnQndZRks0RUVBQ0toWkFOaUFBU0NIYXNRelUxV2pyWFhLcEpqWWNtUnBuTnlYS3RTNWdXRwp4RlFGTUpkSVNVcUtQandUMVhvQXZHN0x4cWtxTDRqNnhUbGowSEdnaWhWMER2VXNkdXkzVFRpMUQrMkZnWmZKCmkxaVlackZLdlZkN1g0bW5qdjg0c1BacDg2SEFnY2s9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: MmdNeFFfWG40NUs0UF9VWks4UWNRVDcybDFSOS16d1FHbk5UaUR2eDhWSQ==
kind: Secret
metadata:
  labels:
    app: collections
    release: qliksense
  name: qliksense-collections-secrets-2487k5cfhh
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  token-kid: MmdNeFFfWG40NUs0UF9VWks4UWNRVDcybDFSOS16d1FHbk5UaUR2eDhWSQ==
  token-privateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRCS1BWMHlGQ3JlamE3OVcxa3JRc2xTMFZPV1VVLzRhSDhMbmVDRHpGL29TeXBGZlR0Z0xKNVEKNXNZWVZ4N3Nqd0tnQndZRks0RUVBQ0toWkFOaUFBU0NIYXNRelUxV2pyWFhLcEpqWWNtUnBuTnlYS3RTNWdXRwp4RlFGTUpkSVNVcUtQandUMVhvQXZHN0x4cWtxTDRqNnhUbGowSEdnaWhWMER2VXNkdXkzVFRpMUQrMkZnWmZKCmkxaVlackZLdlZkN1g0bW5qdjg0c1BacDg2SEFnY2s9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: collections
    chart: collections-2.8.15
    heritage: Tiller
    release: qliksense
  name: qliksense-collections-tokenconfig
  namespace: default
stringData:
  mongoDbUri: mongodb://qliksense-mongodb:27017/collections
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: data-connector-odbc
    release: qliksense
  name: qliksense-data-connector-odbc-secrets-k95fckhfhd
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  redisPassword: TkdrVXAwVkRKdGMzeGl5Qw==
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: data-connector-qwc
    release: qliksense
  name: qliksense-data-connector-qwc-secrets-c4fmk54k9k
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: data-connector-rest
    release: qliksense
  name: qliksense-data-connector-rest-secrets-9594gt9b25
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: data-prep
    release: qliksense
  name: qliksense-data-prep-secrets-4hc528cddt
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: data-rest-source
    release: qliksense
  name: qliksense-data-rest-source-secrets-b4d8b48kmf
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data: null
kind: Secret
metadata:
  labels:
    release: qliksense
  name: qliksense-dcaas-dcaas-redis-secret
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  redisPassword: ""
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    release: qliksense
  name: qliksense-dcaas-secrets-kh87dtggd5
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: dcaas-web
    release: qliksense
  name: qliksense-dcaas-web-secrets-6t67h4gb65
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  cookiesKeys: WyJVaUw2WWVQRWNVTWsyTXFpR2sxQnVHc3FNV2ZvSHorYjFTdVgxM2xLdXZVPSJd
  loginStateKey: ckxrOWRNa3cxbm1jblJQbWErMENROHY2UEJaQVB4UWFlZW5vUVBKYzRQST0=
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREYVNlSzNXTE9wT0c5Tnh2b2NaNUVvdC9WbzduNlE1amtrZXNzdzNXd3h3M2I3eFNDNWRXTVYKWHV0YkVXQmhaOHlnQndZRks0RUVBQ0toWkFOaUFBUnFCL25nRVpYTkRYS2lncndtOWhWNEpjSFU2RnFicmhDOQpWN2ZlaXVxUHd1dkdVUzZ0bWZKOFYxUW9yVkQ3U0ZmK3hOV0NTR2w0Q0p6aHFjN2FsOTJnRk9DZDFFbUNiY1piCjluejBWU05LRWpubDl5Q2NUM1RoZHI3NXdSUFo2em89Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: ""
kind: Secret
metadata:
  labels:
    app: edge-auth
    release: qliksense
  name: qliksense-edge-auth-secrets-g54h4dhft5
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURWRENDQWp5Z0F3SUJBZ0lKQUowdHFNVDVEV3BzTUEwR0NTcUdTSWIzRFFFQkN3VUFNRDh4R0RBV0JnTlYKQkFNTUQyVnNZWE4wYVdNdVpYaGhiWEJzWlRFak1DRUdBMVVFQ2d3YVpXeGhjM1JwWXkxbGJHRnpkR2xqTFd4dgpZMkZzTFdObGNuUXdIaGNOTVRnd05qRXhNVFV4TVRBeldoY05Namd3TkRFNU1UVXhNVEF6V2pBL01SZ3dGZ1lEClZRUUREQTlsYkdGemRHbGpMbVY0WVcxd2JHVXhJekFoQmdOVkJBb01HbVZzWVhOMGFXTXRaV3hoYzNScFl5MXMKYjJOaGJDMWpaWEowTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFwUUxJZ1Z4QwpkRjI3UFhzL3M4VFh2VGRVeTVwZFFneG9jWi9MenUxblJXbW1GRUc1Mlo5MmRjS1dJMDljdVg5ZUlZZzE0c21ZCkczSmtjb28vNUt0WUtpNmh5dVBtNlZrdGRyU1dCam1VdGxkbHg3UVRLNkxFVlhFeUU3VDZ6QW1GV3lMZTVJMEIKbDdRQlk2dnVoK3g1dlpkSWd3SzVldzBFZmNJUU1Ra2tiMzVkb00xYm41TEJEVklxUzNmNXUxNTArMTM1RitsWQpOc2lFcWhZaVExZm1PMmkzSzBLOW5TMEl3Nm5vNWp2MkZaNnR5bU9zY2wvaWYzdWQzUzUxOTZNTjJtaFpCRFVaCmlwbThlRVkxNVJOa3VQSXBETzhMYkEwZlFOcUcyYXFGa3JybFcrbEdTaDRYZjZLNmdtZkFRdW15K2xrR3RqVlUKZU5OdGF6NnlMMWNkU3dJREFRQUJvMU13VVRBTEJnTlZIUThFQkFNQ0JMQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQgpCUVVIQXdFd0xRWURWUjBSQkNZd0pJSVBaV3hoYzNScFl5NWxlR0Z0Y0d4bGdoRXFMbVZzWVhOMGFXTXVaWGhoCmJYQnNaVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBVDFnMFhqelNDRDBBTkF5cDFOWURLU3ZZVUdHcGpSaFkKdUJRYnRwcDUrUDNzd2xvdTNvMDVwdDNydlZ3QmxwK2tjalFwTEJpN3AyRFNuNTdFWHM5eHFEQTBHRjlMSHdpUwpzcGZVYlhRazJIa1E3SGpHb01FSEJLVWpOVUJoZjJkWVRuK1BtbHhobllpZitoU2dkeDdIZ1JuMTh0K0hqTC9JClVlUUkxMHYvdExiT1diZkdBZmlGYjQyUHEvVjg1aGJlNW9mU1VObHVsNFZNOGVXNk1SNlB2b1dYYWJYcVB2ajMKSXpVOVk2UVFoN2dqYmNQN2RmWUZCd3FFRnUxOHlpMUdFbzcxK0NtUjFFL2VpK2kzZDdZTHlMTWhUOHZnMVNDUgozeTB1TVZZOHkxVHpIdS9OTEl0NVozYm1rNFJjcUo1MDVsYmtrTHdzSVFYUzJpMUxud25weXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRQ2xBc2lCWEVKMFhiczkKZXorenhOZTlOMVRMbWwxQ0RHaHhuOHZPN1dkRmFhWVVRYm5abjNaMXdwWWpUMXk1ZjE0aGlEWGl5WmdiY21SeQppai9rcTFncUxxSEs0K2JwV1MxMnRKWUdPWlMyVjJYSHRCTXJvc1JWY1RJVHRQck1DWVZiSXQ3a2pRR1h0QUZqCnErNkg3SG05bDBpREFybDdEUVI5d2hBeENTUnZmbDJnelZ1ZmtzRU5VaXBMZC9tN1huVDdYZmtYNlZnMnlJU3EKRmlKRFYrWTdhTGNyUXIyZExRakRxZWptTy9ZVm5xM0tZNnh5WCtKL2U1M2RMblgzb3czYWFGa0VOUm1LbWJ4NApSalhsRTJTNDhpa003d3RzRFI5QTJvYlpxb1dTdXVWYjZVWktIaGQvb3JxQ1o4QkM2Ykw2V1FhMk5WUjQwMjFyClBySXZWeDFMQWdNQkFBRUNnZ0VBZUVPWUNSaEo0dS94cUxTc1VBUldUTFVJRzBDTldiY2JaRHpYMlNBVUZYWVQKc2szWSszQ0tjUGQ2WDQvVy8rZUJucVRjeVVhdWtzcUR4U3RYdC96ZHpCaWltUElUZU4wakVwSTVpWjNyOGgydQpzNmRlRlg2UzQ4Y1ZmV0Y1TEw1L3NGV3c2QmlSSVpUek1rYThHZHJUTzhnSDlGeEcvUlVXd2VWdjBaMWRMZGhiCkY3MXB4SjJiUUYvaWhQTmo5TW53NGt2NkkrcW81NjBDZTd0dW5GODRnOS91MFMzTGlwVFRXc0tsTWNjS0liR1UKWUovNHRkRU5Cd3ErKzU2cXh1bGJEcXA4QnJQNHJVbnFFNUg4MEZwNTFQYkI0V2E4aysybStBVHVmQ3RpZ0FCSAo3Z0ljTnNMRGRuRnhXRjNENlg5OUlqdndFRGZIUGFxSzBDaFFKQTIvcVFLQmdRRFErM3VJTXgrUHRkMkhPTVJmCmY4VFVEN1BudkhXaUo1YTE2YzBwcTNrYzdFei9mZHlwbU1mbXRzMERnUXJsNTBTM0YrYjNOSUFtUVhQZHd3d3AKaFhBUktrZ0F5QXUrRDdlVFVEajBoa0ZzZ1hUeWxyL0FnMGlDOU9tMUhFVFVEbGpzUS94TWFYcSt0R2tBVEhpMwowVy9mOHYzSWRBNW9Fblg1VUdac1htNkU5d0tCZ1FES0lybSt5Z1B3ZndwcWkraW02djkvNzcwRVZDU0NJNjNtCi9teWtmZXVNVVFwcHY2RDBZS25ha21RcXBPRFI5cFRNK01yS01DTi9TdkZVeDdDR0FwbjNUKzRKTjhMb05kVTQKaG0yYmtmY05MbGtPMGtmRHVKOHA2M1ZNeEs1OUthbVNhY2hBU0JLVlpoZEMxK0lpNkUwQ2NrVFAwWFpuU0NJRApaOGFEellzWlRRS0JnRmZLUFdQQzdqQkYyeER5RlBSMVRTODBoWVFGRkhtUkhldS9rdk05V0h5QSsvdWNXUFZaCi9DZjhoUFZDNFZ3aElpbTBQYzk5VzVRMmpNRU5MZS9IWVlPa2VtanhvSlV3THhNUWNVeXZsWTVLZCtGczJKSzcKMDl0SG5XSDZ4U003LzdrSStsVHpQcUFjVTd2UFpDcjhMWDRycXRicGdoL1FHWVVwZEUxMEFnT1RBb0dBSW5ragpwb2M3ZnNPYjJpbjhScU5qYWNWUVBqRy9mRFpyalM2dEJxeTNCRm81NVdrYUlUTnZKR2k5RG96S0R1VDM0YkU0Cm5KenpJTjErSlJCZGFhMTk1ckRLRHVaa3BrZXdFcERTbHFxaE1LMUw0UHc1NHdaVWxzaWlXN0piYzlzc0lWMUwKR3JOdi8rekdZTThDc1NOZkp1Q29IYTFDZlVEUEZEZVpvcGJtZHkwQ2dZQlpZTk01NFlPck12VjBJU3FibmEvQwpPQWMrci8yWU5BQmQvNFRHcFgzVHNpTHlTaG5YS04zbVcveEQxb2RUTkZNRVcwSFAza2c3NDhmMVNLSjNVWkJzCjBHcG80aHo4dlZYYUJDNmxDVkd3dnNwWWJkUDJBOEdQbkFOREpud2pyUEp1Q2xTZC9Hcm9tSVBuSVBtQTErVWkKWVRERFhZVWU2TVhncUUxc2lZU2x0Zz09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: elastic-infra
    chart: elastic-infra-2.23.0
    heritage: Tiller
    release: qliksense
  name: qliksense-elastic-infra-elastic-infra-tls-secret
  namespace: default
stringData:
  mongoDbUri: mongodb://qliksense-mongodb:27017/elastic-infra
type: kubernetes.io/tls
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: ""
  tokenAuthPrivateKeyId: ""
kind: Secret
metadata:
  labels:
    app: elastic-infra
    release: qliksense
  name: qliksense-elastic-infra-secrets-g7529c95dc
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    release: qliksense
  name: qliksense-encryption-secrets-5c8b9ddb94
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRDSUg1WEU1L1R3VGh6bkkxenIvcGM4RGdzVUpLa0xrN0x3bHd4YzhPaXhzZnllMUZNdDNRR2oKQmZjcEFlUVh0WldnQndZRks0RUVBQ0toWkFOaUFBU1ErSVJkSWs1RFVWSlc4THQrVWgzV2xsZ2pHakhYUmZJKwphTkJjbU00MW5Zd1JsSHZhZFVHeDVHWnFtRmY0ZzdNdjY3RlI2b3lJdFJEbVB0dDlRT0RtMkJQeUEzYWZ1UE5wCm9QRWM2RExnTzl0dHJZVEhXT2tlY0hZL1pPYnFIMm89Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: dUh4cDBZdm5ZUXgtQXFRZ0hueGdLcVRrX0htWmlUNjdCOFNZT2x6U2dvTQ==
kind: Secret
metadata:
  labels:
    app: engine
    release: qliksense
  name: qliksense-engine-secrets-2cc229m58m
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  jwtPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRDSUg1WEU1L1R3VGh6bkkxenIvcGM4RGdzVUpLa0xrN0x3bHd4YzhPaXhzZnllMUZNdDNRR2oKQmZjcEFlUVh0WldnQndZRks0RUVBQ0toWkFOaUFBU1ErSVJkSWs1RFVWSlc4THQrVWgzV2xsZ2pHakhYUmZJKwphTkJjbU00MW5Zd1JsSHZhZFVHeDVHWnFtRmY0ZzdNdjY3RlI2b3lJdFJEbVB0dDlRT0RtMkJQeUEzYWZ1UE5wCm9QRWM2RExnTzl0dHJZVEhXT2tlY0hZL1pPYnFIMm89Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: engine
    release: qliksense
  name: qliksense-engine-service-jwt-secret
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  jwtPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRDbHJNY3ZOcTNpSDYrOS9KeDFkSTdmTE9valErM2JqTDJxelBXZWJZclNpRVVBYzVpYSt1WDkKSkIvREk4OHh6NTZnQndZRks0RUVBQ0toWkFOaUFBUndxaGxiZURSb3lyemxTUStCT2RNUW9xaUxEd0VQbTdtUQozNTBuQUszaUVpMFFhOUtjb09WT3IzdC82MTVlK1RBZDBYd0hGSkJOMUtOWDh1c015eWsvOEhreTNLK3o2Z0luCnFkbHYrajQvUVFveEpsUFY4WmQ5Q0h1Uk85UzdrY1U9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: eventing
    release: qliksense
  name: qliksense-eventing-secret
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRDbHJNY3ZOcTNpSDYrOS9KeDFkSTdmTE9valErM2JqTDJxelBXZWJZclNpRVVBYzVpYSt1WDkKSkIvREk4OHh6NTZnQndZRks0RUVBQ0toWkFOaUFBUndxaGxiZURSb3lyemxTUStCT2RNUW9xaUxEd0VQbTdtUQozNTBuQUszaUVpMFFhOUtjb09WT3IzdC82MTVlK1RBZDBYd0hGSkJOMUtOWDh1c015eWsvOEhreTNLK3o2Z0luCnFkbHYrajQvUVFveEpsUFY4WmQ5Q0h1Uk85UzdrY1U9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: X2E5bGdwbmFqZ0lBUHhaSXJPZnlKMk9feEZ5RVAwUXl5d1dld3lZTm9Xbw==
kind: Secret
metadata:
  labels:
    app: eventing
    release: qliksense
  name: qliksense-eventing-secrets-bk4d6hb9d9
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRENnNiOVl2UEppVFpkb2RjTzdLaU5IRCtBd0toNEN4ekg5NGdVUUUyekVLU3FxaGRWbXFiREQKcGFzeWxIZWFOMTJnQndZRks0RUVBQ0toWkFOaUFBUzcyRmtMS0pWTTkyRVFVWUZiREhqS2pNMUFaY01pMDlCdwpRQ0ROaG9BYlMyTzRlcDVUaHNFU0FUN253L0tvRE4xYk1IeVRRNldZUkIwcDZTRjk3bVdibzlHVUpac2o2VCtOCmtEV211elBrNkkxL3NEZzVrTXFWckxRc0FYalgxRUU9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: ejRZYUFyUTNDekY5NzQ4YXJIYU5mSmtIalBUQjJuQ29CTGVOLVpiZGxlMA==
kind: Secret
metadata:
  labels:
    app: generic-links
    release: qliksense
  name: qliksense-generic-links-secrets-47558btchd
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  token-kid: ejRZYUFyUTNDekY5NzQ4YXJIYU5mSmtIalBUQjJuQ29CTGVOLVpiZGxlMA==
  token-privateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRENnNiOVl2UEppVFpkb2RjTzdLaU5IRCtBd0toNEN4ekg5NGdVUUUyekVLU3FxaGRWbXFiREQKcGFzeWxIZWFOMTJnQndZRks0RUVBQ0toWkFOaUFBUzcyRmtMS0pWTTkyRVFVWUZiREhqS2pNMUFaY01pMDlCdwpRQ0ROaG9BYlMyTzRlcDVUaHNFU0FUN253L0tvRE4xYk1IeVRRNldZUkIwcDZTRjk3bVdibzlHVUpac2o2VCtOCmtEV211elBrNkkxL3NEZzVrTXFWckxRc0FYalgxRUU9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: generic-links
    chart: generic-links-1.1.10
    heritage: Tiller
    release: qliksense
  name: qliksense-generic-links-tokenconfig
  namespace: default
stringData:
  mongoDbUri: mongodb://qliksense-mongodb:27017/generic-links
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JRzJBZ0VBTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQklHZU1JR2JBZ0VCQkREdDVJeEh1b2Y3YmRpNFRUMy8KeDFLQzJ0UEpQSFFsM20rU3FubDRTM0h1bVZ0ZnJIUHBNVVlETy85ZTZhZmdheXVoWkFOaUFBVEtsdGIwQVJsMQpnNDg0VW1HdFJUTllaTVM0K3BQU3M1ak5JL1p0SnJiNGhJcTRsNmZibHdJeERadk1sTTVha3ljYjdnTm81WmN3Cm96cFpiKzUrQ2VGLzV3TWFseUswYStWWk9HQ1o4MHRTeHVBN2NCNnJ3QU9hTzNZaG1vbGt2NFk9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: TjBJM3JvRVZvaDF1dFNiMUpGa3FrbGFoUlhtR2lrcThGSWt4TEx1RXBjVQ==
kind: Secret
metadata:
  labels:
    app: geo-operations
    release: qliksense
  name: qliksense-geo-operations-secrets-22k6cd9cmc
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  jwtPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREcFNOdmV4KzdUUEZkR1RnMnlNRnQrckFHUnkrM3R1TU40dWdqMExGWjhCZEtNUGtVRFNZUUUKbmVmdDdNanR0cVdnQndZRks0RUVBQ0toWkFOaUFBVGdyblpkaXRUUVlyNmxpNzVtMlFOVDdrL1g2T3k2aTlGcgp4b0tyQjM4bDBWdmdTbGtSNmtKTmRhRFZXejh6WkpXMENnUTAwVGYyNEpVbkgzL0JaazN4aWdPQVNpdkozeWx1Ckd3K1IvcTVKZ1N3eWVjQTRMd3B5MDJpd0dUb0p0OGc9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: groups
    release: qliksense
  name: qliksense-groups-secret
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREcFNOdmV4KzdUUEZkR1RnMnlNRnQrckFHUnkrM3R1TU40dWdqMExGWjhCZEtNUGtVRFNZUUUKbmVmdDdNanR0cVdnQndZRks0RUVBQ0toWkFOaUFBVGdyblpkaXRUUVlyNmxpNzVtMlFOVDdrL1g2T3k2aTlGcgp4b0tyQjM4bDBWdmdTbGtSNmtKTmRhRFZXejh6WkpXMENnUTAwVGYyNEpVbkgzL0JaazN4aWdPQVNpdkozeWx1Ckd3K1IvcTVKZ1N3eWVjQTRMd3B5MDJpd0dUb0p0OGc9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: LXpxMmoyRFVwNkZpc0RESVRSanl0RkNOajdpZUl5U3VUaEhJel9UdGhSMA==
kind: Secret
metadata:
  labels:
    app: groups
    release: qliksense
  name: qliksense-groups-secrets-ghcmmcc888
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: hub
    release: qliksense
  name: qliksense-hub-secrets-tc9b68kd8m
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  idpConfigs: WyB7CiAgICAiY2xhaW1zTWFwcGluZyI6IHsKICAgICAgIm5hbWUiOiAibmFtZSIsCiAgICAgICJzdWIiOiBbCiAgICAgICAgICAic3ViIiwKICAgICAgICAgICJjbGllbnRfaWQiCiAgICAgIF0KICAgIH0sCiAgICAiY2xpZW50SWQiOiAiZm9vIiwKICAgICJjbGllbnRTZWNyZXQiOiAiYmFyIiwKICAgICJob3N0bmFtZSI6ICJlbGFzdGljLmV4YW1wbGUiLAogICAgImlzc3VlckNvbmZpZyI6IHsKICAgICAgImF1dGhvcml6YXRpb25fZW5kcG9pbnQiOiAiaHR0cDovL2VsYXN0aWMuZXhhbXBsZTozMjEyMy9hdXRoIiwKICAgICAgImVuZF9zZXNzaW9uX2VuZHBvaW50IjogImh0dHA6Ly9lbGFzdGljLmV4YW1wbGU6MzIxMjMvc2Vzc2lvbi9lbmQiLAogICAgICAiaW50cm9zcGVjdGlvbl9lbmRwb2ludCI6ICJodHRwOi8vZWxhc3RpYy5leGFtcGxlOjMyMTIzL3Rva2VuL2ludHJvc3BlY3Rpb24iLAogICAgICAiaXNzdWVyIjogImh0dHA6Ly9zaW1wbGUtb2lkYy1wcm92aWRlciIsCiAgICAgICJqd2tzX3VyaSI6ICJodHRwOi8vZWxhc3RpYy5leGFtcGxlOjMyMTIzL2NlcnRzIiwKICAgICAgInRva2VuX2VuZHBvaW50IjogImh0dHA6Ly9lbGFzdGljLmV4YW1wbGU6MzIxMjMvdG9rZW4iLAogICAgICAidXNlcmluZm9fZW5kcG9pbnQiOiAiaHR0cDovL2VsYXN0aWMuZXhhbXBsZTozMjEyMy9tZSIKICAgIH0sCiAgICAicG9zdExvZ291dFJlZGlyZWN0VXJpIjogImh0dHA6Ly9lbGFzdGljLmV4YW1wbGUiLAogICAgInJlYWxtIjogInNpbXBsZSIKICB9Cl0=
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREd0JwbG1oamMxLzU0Nk8vcWxRVGlTNHBQM0lRTVdKSXF1QzVueUR0anVsa0tRN3FLYzJuZ0cKa2lDYXZLQTNmTkdnQndZRks0RUVBQ0toWkFOaUFBUngwNkIxR3lRdmpKQnh4NldTZGs4Z0xPeU9tTjZRR0pSOApITUViaHhFZERleWx3T24relRuSUdTS0lmaDdYTFowRjZzMnZGR3JGZ1NpMGNvMTNNTjJMNnB5Y0RXTWxRdDA5ClAyZFlYbkROYXhqQjRCaEw2VnU2cGJPTUx1NXB2dnc9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: SllKNFNvUFlQTjhKV1FSN1VCdUUyb3JyMXJaRUZTYzUzQVJDMGUxbGRWbw==
kind: Secret
metadata:
  labels:
    app: identity-providers
    release: qliksense
  name: qliksense-identity-providers-secrets-884m54tthg
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: insights
    release: qliksense
  name: qliksense-insights-secrets-4kmtct849t
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRENUJHRktRWDk4MXBVaitkd2FKcW4zVGxNZVNmUFF4SFZDS0psZkt3Qm5ocjZ4aldhRUgwZWoKcFMzblRRd05tVVNnQndZRks0RUVBQ0toWkFOaUFBUzJJV2hZNGNKamhLdi9yQ1ZxNjRPUlEwMVk1NlB2b0NPMwpWZzIzQWR1T0xlL04wSUtQZWRraTd1V1g3M29uWFp6NXlJUzJHaVRBV0trYXBvQTJRTG5IV09yQzN3Y2t6N0FXCkFqSnRnZ2VvQ3ZUVWhKbUc2TFk5U0NKQXdFTzh4dU09Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: X1dDaEpWNzZocVA2cnNuUEZWNDRUTllVUjFsNGp3ZVM2MTJYdVRNb3B6MA==
kind: Secret
metadata:
  labels:
    app: licenses
    release: qliksense
  name: qliksense-licenses-secrets-mcf69d8cb9
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data: null
kind: Secret
metadata:
  labels:
    app: messaging
    release: qliksense
  name: qliksense-messaging-message-delivery-monitor-secret
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  client-password: VDBwUzNjcjN0
  client-user: bmF0c19jbGllbnQ=
kind: Secret
metadata:
  labels:
    app: messaging
    release: qliksense
  name: qliksense-messaging-nats-secret
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: ""
  tokenAuthPrivateKeyId: ""
kind: Secret
metadata:
  labels:
    app: messaging
    release: qliksense
  name: qliksense-messaging-secrets-6gc44b57mh
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: mongodb
    release: qliksense
  name: qliksense-mongodb-secrets-h5b9k65c5h
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: nl-broker
    release: qliksense
  name: qliksense-nl-broker-secrets-g847gm2fdc
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: nl-parser
    release: qliksense
  name: qliksense-nl-parser-secrets-8c52742f99
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREdnNQT0RneFFnOGNseGRxbHZQc0lid3ZOdUJhQ0dia2FQamFmVTRJd1ZzVzNyNWZ5NExzRUkKZksxWXdwWGFoMEtnQndZRks0RUVBQ0toWkFOaUFBUzVvVEpqT09oRXBpcUVzN0NYQlk1ZEhnb09UckF3Q1dHVQo0RnZPTFFkbGw2N2JtTk9HL1ZYZTRSMWVFZ1VmenQ1MlNoVXJmN01VRGNFNWdNY0NuYmIvV2g2UEJSR05SSGtHCmtkc0M1ZWhUdkFhdW8rTnlIdyt4M3VDa1hsWWZ4YzQ9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: Si1RQzYyYUJESnJrYkpYeEVpWml4WTF3bFB3QWpKRGVaSElnRV9Eam5Ydw==
kind: Secret
metadata:
  labels:
    app: odag
    release: qliksense
  name: qliksense-odag-secrets-4c6t4gfggg
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: policy-decisions
    release: qliksense
  name: qliksense-policy-decisions-secrets-7b966f6ctc
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  privatekey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRBVmZLWkJNa3NLRW1sSDYzQkdqV0NGMktUOGM2c3ZqZWxPS0JLdGE4K2RIZlB5SEY4a1ZLbmIKWTdEeW9kdU5xYUtnQndZRks0RUVBQ0toWkFOaUFBUUpBVWVSVWdySFdtZExnR3dUa0NEQiszdFdKeGV0MFQwOQpKaDY4R2RHNjRYL2diZ0RYdERTVmx0VVo2Sjk4TDFqN1djNCtSQ3VObHkwOXNqcmNwN0wrcEZRNGxXRFdBNDloCmE5N0UwT01UOUxCYmRIdFlXVHhyN244NHpnNTd3T3M9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: precedents
    release: qliksense
  name: qliksense-precedents-secret
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRBVmZLWkJNa3NLRW1sSDYzQkdqV0NGMktUOGM2c3ZqZWxPS0JLdGE4K2RIZlB5SEY4a1ZLbmIKWTdEeW9kdU5xYUtnQndZRks0RUVBQ0toWkFOaUFBUUpBVWVSVWdySFdtZExnR3dUa0NEQiszdFdKeGV0MFQwOQpKaDY4R2RHNjRYL2diZ0RYdERTVmx0VVo2Sjk4TDFqN1djNCtSQ3VObHkwOXNqcmNwN0wrcEZRNGxXRFdBNDloCmE5N0UwT01UOUxCYmRIdFlXVHhyN244NHpnNTd3T3M9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: R3J2YkJsSElYRkJCN3ZycG9PbDRWeXJHSVlsXzFrVWdLU2ZOcUJvaDBkcw==
kind: Secret
metadata:
  labels:
    app: precedents
    release: qliksense
  name: qliksense-precedents-secrets-4d86tc8h55
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  jwksKeyID: SW1qdzY3a2RTY0xOZlBQcmFnR3dsVFNaZjRFX1h2b05DUjNJSzZCRVRHaw==
  jwtPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREamFrU0o0Umh1dkpRYkFqRkRnTjhBVlhWamQxRWR3S2oxY3puekFzVEtNK1pJZzVhUFMyclYKZVdzRHJuaW44NWlnQndZRks0RUVBQ0toWkFOaUFBUjhJS2xQL0t0TmYrdXJYdmtrbTlHVi9FWjNGS0xPQ0QxUQpyc0paeVpFN21NR2U2MHM1OHhXYnJ6S050YWt5bm16VVVyaGdESldIbVk0V240V0Rld29LRzhDaURmY1UyMGpRCkJwVXR0YWhKa1pGMzcwU0xuVE1oTmFlZk5NNFMvNEE9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: qix-data-connection
    release: qliksense
  name: qliksense-qix-data-connection-qdc-keysconfig
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREamFrU0o0Umh1dkpRYkFqRkRnTjhBVlhWamQxRWR3S2oxY3puekFzVEtNK1pJZzVhUFMyclYKZVdzRHJuaW44NWlnQndZRks0RUVBQ0toWkFOaUFBUjhJS2xQL0t0TmYrdXJYdmtrbTlHVi9FWjNGS0xPQ0QxUQpyc0paeVpFN21NR2U2MHM1OHhXYnJ6S050YWt5bm16VVVyaGdESldIbVk0V240V0Rld29LRzhDaURmY1UyMGpRCkJwVXR0YWhKa1pGMzcwU0xuVE1oTmFlZk5NNFMvNEE9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: SW1qdzY3a2RTY0xOZlBQcmFnR3dsVFNaZjRFX1h2b05DUjNJSzZCRVRHaw==
kind: Secret
metadata:
  labels:
    app: qix-data-connection
    release: qliksense
  name: qliksense-qix-data-connection-secrets-6fgkhhmddf
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  privatekey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRBY3VGcFRMRk82TWJ2aUdUSnVCam1GR1Vka3JOdkxTV3RTY3BvV1QwdnYvcG5tejUvQ2w3TGUKNEN3b3JDNWpTalNnQndZRks0RUVBQ0toWkFOaUFBUzF4NXdaaHVTMHJOalpRQUlVZkl6ZFh5SnEwK3pFeVR0TgpUNi9LK3lvRkNwYlhmSHhCZkV6bWhZZWhSUFo5OENlK3VzUnl3eHVHcFVhM01lQis3bFFBc3VTNnNtdUIyR2NSClVCdUozeWVLK0VMU1E0eU9Oc3djY0gwNnhxOUFtd0U9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: qix-data-reload
    release: qliksense
  name: qliksense-qix-data-reload-privatekey
  namespace: default
stringData:
  mongoDbUri: mongodb://qliksense-mongodb:27017/qix-data-reload
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRBY3VGcFRMRk82TWJ2aUdUSnVCam1GR1Vka3JOdkxTV3RTY3BvV1QwdnYvcG5tejUvQ2w3TGUKNEN3b3JDNWpTalNnQndZRks0RUVBQ0toWkFOaUFBUzF4NXdaaHVTMHJOalpRQUlVZkl6ZFh5SnEwK3pFeVR0TgpUNi9LK3lvRkNwYlhmSHhCZkV6bWhZZWhSUFo5OENlK3VzUnl3eHVHcFVhM01lQis3bFFBc3VTNnNtdUIyR2NSClVCdUozeWVLK0VMU1E0eU9Oc3djY0gwNnhxOUFtd0U9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: UXRpRnR4LTVNQ2NzbkhiLXhtV0dnandvSnVFWllZa1lIYmxOMklfQmlibw==
kind: Secret
metadata:
  labels:
    app: qix-data-reload
    release: qliksense
  name: qliksense-qix-data-reload-secrets-5g6f2db47d
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRBeU5BZHVYbVFZK2hrcmFGTDl6M01ZcVI4WUdqQlJiYnRsZGpNWEp3SlhnWlFDOTBjOHFHV3AKODZrakdZODVtZXVnQndZRks0RUVBQ0toWkFOaUFBUmJYWk5QQmpzTHkyNW1YWDA3U2l1ZFNyckk4anp1OGtEaQpaSVhWZ3FaWUwxZThYZmI1bEdoNnV5MWJXUG9DS3pBQ21HaDdMZjNMYXo3ODBPU3UxNituNWlqTDQ0d0x3NzcxCnY2c1VRbHNGMFVwUC9ISng2bHlKTTlRSWJrZGNPbXM9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: enBpWi1rbFM2NWxmY3ExSzAtbzI5U2EwQUFaWVlyNE9OXzFWQ3RBYk1FQQ==
kind: Secret
metadata:
  labels:
    app: qix-datafiles
    release: qliksense
  name: qliksense-qix-datafiles-secrets-6h2k87b8bf
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  token-kid: enBpWi1rbFM2NWxmY3ExSzAtbzI5U2EwQUFaWVlyNE9OXzFWQ3RBYk1FQQ==
  token-privateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRBeU5BZHVYbVFZK2hrcmFGTDl6M01ZcVI4WUdqQlJiYnRsZGpNWEp3SlhnWlFDOTBjOHFHV3AKODZrakdZODVtZXVnQndZRks0RUVBQ0toWkFOaUFBUmJYWk5QQmpzTHkyNW1YWDA3U2l1ZFNyckk4anp1OGtEaQpaSVhWZ3FaWUwxZThYZmI1bEdoNnV5MWJXUG9DS3pBQ21HaDdMZjNMYXo3ODBPU3UxNituNWlqTDQ0d0x3NzcxCnY2c1VRbHNGMFVwUC9ISng2bHlKTTlRSWJrZGNPbXM9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: qix-datafiles
    chart: qix-datafiles-1.10.21
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-datafiles-tokenconfig
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRBNUlVNmR5UWJDdGU0WTExUHpnU2xQZWNmT2Nmam16SmZkMkFmcUYreUNtMnhhQkg0eEhXc2oKOVpYVE5UU2tMRjJnQndZRks0RUVBQ0toWkFOaUFBU2dPdld5ZHB4U2RrSVJud3d2aENGeE90cjFnNlA0MHVvbApNbzRlaFM1bjJpOEgrSktzMGZKQ1BHeDVPMW92ZVUwSEhhZGRHNlh2bmVZOWJMTkJDbGNyNmY4cjEwL3VBek10ClV4YjI1T2F3RHgrMHUxUVVEYTV1blhmR1Nsdnp4dFE9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: V3liZDItWDNoY0JwcURJamQzTndaYWhUc2pwUDFCcWVnVFlWaHhfS04xbw==
kind: Secret
metadata:
  labels:
    app: qix-sessions
    release: qliksense
  name: qliksense-qix-sessions-secrets-dgbc4b449g
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: qlikview-client
    release: qliksense
  name: qliksense-qlikview-client-secrets-45k4mdt6kg
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRETkdLR1VVSUQwcXVSWndhM0QrWk0xSnVvemwrV0tUTEkvMkdsQ2phbHhEQnErWS92UVc5UngKQ0VxTkt3d2pOQ2VnQndZRks0RUVBQ0toWkFOaUFBUk91VWhObU1lVzF1WkIzWFZWdjJFb1N5aEtaaUplR0YrUQpFZzlyM2h5RTIxUnZJWGNJdU5nNnBuTlNqU1FJZ29UdlJHanoxRzJkRmJ5SUVvUlVtR3pjL3IxcFRzYUhRQnpxCmhGZEdQUi84eFZYTWNGa2ora2pWeG9TL3d4MFhVZkU9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: MUt5azdlWnVMX2NUY3dLLW4wSWdHY3VwRjl2ZFFudmdlb3Y1ZnB4dWdDWQ==
kind: Secret
metadata:
  labels:
    app: quotas
    release: qliksense
  name: qliksense-quotas-secrets-fb56dgm2mf
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  redisPassword: NGkUp0VDJtc3xiyC
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    release: qliksense
  name: qliksense-redis-secrets-96b2gt22fm
  namespace: default
stringData:
  mongoDbUri: null
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUhZd0VBWUhLb1pJemowQ0FRWUZLNEVFQUNJRFlnQUVhZWhtTW5vUG81S0lZZUJSVXhQREVueGhOTDlSQ01HaApBYng4aXp0U05TQXBqeVBVYXBYSndqMWJmUXRjMDJRazlQZmRVN1ZpUDVBZXo2c3dsWnlnUElHaHYxVXo4SUMyCjZQS2hMTjBMeHBZdXlCeGQ2NzVOdFZYcHRpd1pWWnA5Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo=
  tokenAuthPrivateKeyId: dEdxQ2piQmFiNFQ1TEN6d0RLa09zWVV0VERhbkxKckZydG9RbTlQUlN4RQ==
kind: Secret
metadata:
  labels:
    app: reload-tasks
    release: qliksense
  name: qliksense-reload-tasks-secrets-fdhmfchgmg
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRDbWN4VFM0OThsVmxSS0kreEdveU9hbE1jT0xlMlR0THhlT01yc05OeHhnUGdORENqdVJNM00KNmt5eG0yTkJRYjZnQndZRks0RUVBQ0toWkFOaUFBUTZXT01DeXFReFBFR0kydm9iSEJ1amJ1QUkvUTIxbzRUNQpuNEFSNTBoajN1YzUxeFpwVWpFRVE4a3IvcTV0OXhpbmpaQURVV3dBcTAzdnBOQVhlODVyU0dveTVwL1N4NEZpCml2S0Z2d0pBTnR1Z3ZFb0xVZmd6VHU5WjFpbkFwRUE9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: N25IWjZyZnJ6emp4dWhxQnl1SXJMVFdnNEhuTnpnTU1RZFVSZ1VRS092Zw==
kind: Secret
metadata:
  labels:
    app: reporting
    release: qliksense
  name: qliksense-reporting-secrets-44m2hb8gcg
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  jwtPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREU09JT3VHNno1RFdUSytDUVc2K05JYlBGTU8wd0N3Nk94Zi91M1lIdkFSekp6djlPLzMyTUkKRVJjMzQvQVlNL2lnQndZRks0RUVBQ0toWkFOaUFBUkdOVm1DaEJwUjhCWEVTSWp4VWExdXpQcW1IcmovOWQxMApDU1B5bHJxTTJZM0RrNk9mSDlOVUx1MGNneFQxaGdsR3ZuSm9KSVBCQ2k0WGlhVUFMeUdxSTZLdUZoWTEyaThtClVYTTZmWDBEMnhUV3VkWk9WVTR5VUhOVTJzdWFOMFU9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: resource-library
    release: qliksense
  name: qliksense-resource-library-secret
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREU09JT3VHNno1RFdUSytDUVc2K05JYlBGTU8wd0N3Nk94Zi91M1lIdkFSekp6djlPLzMyTUkKRVJjMzQvQVlNL2lnQndZRks0RUVBQ0toWkFOaUFBUkdOVm1DaEJwUjhCWEVTSWp4VWExdXpQcW1IcmovOWQxMApDU1B5bHJxTTJZM0RrNk9mSDlOVUx1MGNneFQxaGdsR3ZuSm9KSVBCQ2k0WGlhVUFMeUdxSTZLdUZoWTEyaThtClVYTTZmWDBEMnhUV3VkWk9WVTR5VUhOVTJzdWFOMFU9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: bV8xSEpRNENLazFDR2RqYWhwcEI5VEUtaWpYemZlWmJQeUVhUGRyWjdxMA==
kind: Secret
metadata:
  labels:
    app: resource-library
    release: qliksense
  name: qliksense-resource-library-secrets-592cgk8ttc
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  caCertificate: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU3akNDQXRZQ0NRQ3VNaXhuZlNTUjN6QU5CZ2txaGtpRzl3MEJBUXNGQURBNU1Rc3dDUVlEVlFRR0V3SkQKUVRFTE1Ba0dBMVVFQ0F3Q1QwNHhDekFKQmdOVkJBY01BazlVTVJBd0RnWURWUVFEREFkbGVHRnRjR3hsTUI0WApEVEU1TURNd05qRTBORGt6T0ZvWERUSXhNVEl5TkRFME5Ea3pPRm93T1RFTE1Ba0dBMVVFQmhNQ1EwRXhDekFKCkJnTlZCQWdNQWs5T01Rc3dDUVlEVlFRSERBSlBWREVRTUE0R0ExVUVBd3dIWlhoaGJYQnNaVENDQWlJd0RRWUoKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTVZhWDRnRE5rSmZsRTF4UDdaWEFmQUZaU0dWTGFqNgpVODA5TnFpd21yUXRqNDkxcU9uVDZXSks3bTM4OWt5STc4Y2QxWEYzNVRKY3VOQWVGRURGOGJUOXFuK3k0blEzCnFSZDcwd0F5WDRyRzNhRVdaaGRXWi85TmRXbU52aUxuZHB5Vm8zN0krK1pLY2ppNThFT0RXZERaWmVVSDBla1QKUlZ1QmVUeVJyZDUzZ0VhN3JXWVZsbjMyMFFGQWZGSlprKzJSL1BZM3laVFhSTkdjYVRablFORDNOTjJDT0ozbgp1Vk05dFVRZkE0akgzNytqQmxadjF3bHhNRms3bEJtWUVrYmlIZ2NBbkV4ekVuNUtUSjlZeHQ4MEo4M3c3eDhyClhCWTE0Rml5aU5INFN1dEU5VWl0QllvSUFJQVF5TVBlS2ljaHBZWGJaU0dyQSt0NDd4SWoxa25pQks5aS9SRmIKTVlCQndRay96VFgrcHAydkpVQWZkOWVVa3BEczIzQndFMTB1L1lCWVpvdDVBYVQ4L0Nhb3dtZFBYZ21OK3NvVQp2S3NoYkxmdUVwbVZvRmk1MFllZHhwOHJUS3VoTjhRRm9QNzlGbzZhS1FGZ2hxVCtmZUxpOE1ZYlM5UUdkOFdiCnB6RjlDQkZvZDhxaUtzTlcrRzBhL29KQTJ3UllTYno2VnUxZ1JmalY0Vk5YaXgxTXhFRnVHeEY4VW8xd3Y3U3EKZXZBM1cvU05VeEo5OFg0NkwrZkpzMTBvd0tZeHk1RXp0VjFLbjg0V2FlRU5lOWUreGlBVHVXTDFJYkhuaS9mVgpGZitRSm5jN2p6Z1Q0MVZVVXlQWXZNZ3VUR1pTVDhDbXZFZkpOOW9yWVR0ZnUvNmxPZ0RwSWtRUTNKMkFyNXpmCmlQY3RXU2h0TnJyWEFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0lCQUc2dXRJWVkzQzZTTjRTUFpCOTgKNVR6YTBTaG00WTQ4SUtzMGNaTlh3bTVnTDNXZ0psNWRZTjN4TzYrYWdhNENJV2ZYcHhPbTlHUGl5bERqQTNONgp3TEp6K0NBVEYxN1BodmFlcVFmQ2FDK3hVQ3VhZ3FxZ05DMytPTnNkTHMySjZneWc4L3VJYzVlUSt5ajdPOXJ2ClJoMy9NVWQwRnRqTDJHdWJVOHBqMVBweVFINGhUcEowKzFGQlhic2w0NGhzbzUzUDRwZjc4SWhrL0tFSVdLQmgKQVNINWtzb3JWRlROSjUrQU43V0VqTlRNYlFVVE1WT25BcE5MY3JTYmpnQWVSUDRVQmQxaGMxZ2ZUN2ZraWlGZQp3OExCTXR3a01BVXJDWHNQZ0lMSGtIT0JxMmI1THdsOWFWWVZsbmpoT3NrV09nRklpTDdybTBHZzdBTnlBcTM4CjYxWE9vcEdaT3BNdlI4NjNtNm4zd2EzN0M2NytLc2hSeFVHbm96anJCTVNxQUMwZSs2eUJRT1dLTjJ4cGp0TTMKTXgxbWg2bUhXcDltVklZVG5QUzRpUHZmNko2bkdlcjNtZWdiTUZnTTY4eHpBTWt2N3QxckpIWXZ2Vk5vWUlXeQpXWlN4R3Q2aHEwVjNZaVVJTUV2SCtFRVlsSnkyQWNnZzdlcXRPOHlrdnpTSjBRRWkwMGVVR1pkMVpWYjRIQUtwCjJZVTFDdXVSUFV1SkpCWmt0emllcHd3MVA1WEtlRy90bi90ekQyOGxKaGRxeFJqWVBCbnlBRi9Ra0dmRE53Y1IKQXdnMDU0UW5MaDNqUldHbnN3WmJOc1llQzdLMjlRRW5EbmVDVkV0SVQ0WW45TEhrV1g0NElNRzlwSzd1b1hKWgpaaGNjdEJmMXhWalNTNlRXMlVDYlA3K08KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  redisPassword: TkdrVXAwVkRKdGMzeGl5Qw==
  something: ZWxzZQ==
kind: Secret
metadata:
  labels:
    app: qliksense
    release: qliksense
  name: qliksense-secrets-d8d4b46kd4
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRCQW1kUG90VlU0cUxXMUNPTTNSVFpjMFVnNzlDUFNZZjRRMjZvbGF6aHduYUVaL2xLcnJCRVoKbWY2QWdadFNnYW1nQndZRks0RUVBQ0toWkFOaUFBUjZudWwyNWg2WnhGVldwWXA3NzVYdWI2UnB6QWdvTFh3RApiSzRGVnNGQVl0UW9KTUVBN2JkOUhwQVovOVRuTDdDWDJmMUNVWGwrQ3JKK1R3OXlTazhxci9OZThaTXcyRCs2CmczV3dINHBpQStPdlNOQ3dkMUU3OG1ERnNZUWo5dW89Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: ajNNYkJ0T2lFaWIzdExjVmJ2c2N3ZWhWM0swV0FaVkZCcDN5c2ZzZGtzZw==
kind: Secret
metadata:
  labels:
    app: spaces
    release: qliksense
  name: qliksense-spaces-secrets-7786gtcc5t
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  token-kid: ajNNYkJ0T2lFaWIzdExjVmJ2c2N3ZWhWM0swV0FaVkZCcDN5c2ZzZGtzZw==
  token-privateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRCQW1kUG90VlU0cUxXMUNPTTNSVFpjMFVnNzlDUFNZZjRRMjZvbGF6aHduYUVaL2xLcnJCRVoKbWY2QWdadFNnYW1nQndZRks0RUVBQ0toWkFOaUFBUjZudWwyNWg2WnhGVldwWXA3NzVYdWI2UnB6QWdvTFh3RApiSzRGVnNGQVl0UW9KTUVBN2JkOUhwQVovOVRuTDdDWDJmMUNVWGwrQ3JKK1R3OXlTazhxci9OZThaTXcyRCs2CmczV3dINHBpQStPdlNOQ3dkMUU3OG1ERnNZUWo5dW89Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: spaces
    chart: spaces-2.8.1
    heritage: Tiller
    release: qliksense
  name: qliksense-spaces-tokenconfig
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRBQ0M4bkF3bVdnTTdvelRVbzNLanNsNk81cWJFajNPdVh2RjdCTWJQaXJnZXZhaDFmdVVzMmwKOXh4T29RSU1vbHVnQndZRks0RUVBQ0toWkFOaUFBUU92VjVRRHdPaStvc2JxSFd2T1FUSzVTaFRhZWU1QS9xbQpoS0RnOHBqSHRLUUxiQ0JhbmV1N1lFNGFzSVVZdXI0N2IxN3BrcFRHOVhuOXM0Sk12ek82ODVjS1M5MEQ0TWlBCnRuZUlYNUZKejNWUm5HZFRpaDB5TVBDOWZBcWRzckk9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: Y2taSmJqT3pTMXpXSE1WOFhxWDVRX1lLV3gyQTRGSXVHTS1BYzhQRjRhQQ==
kind: Secret
metadata:
  labels:
    app: temporary-contents
    release: qliksense
  name: qliksense-temporary-contents-secrets-fdhc6hkg9t
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  jwtPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRDRzhtWEtObXRvMDhNWHY3dm85bExtNTkrYW00ankwRDBoZ3ZCS0JLWkZJSW5hK1QxVk5HTXoKcUNyZzlEKzhSZW1nQndZRks0RUVBQ0toWkFOaUFBU3daQmhmUEhxTVJUeWtETU1FNk5Mb2tremVPcTliVXdFNgpWYW1iY0NwcUE0U3M2UE1qK1hvTC9wblEzRzZDNHJFRXJ4KzVtd3RqdFJEMUNnZHkxU3JHTWlhMkF4T3FtU0FxCmpVTGpNRGxodWptV2RTMGdOOThXd29pNUl5RzhENFU9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: tenants
    release: qliksense
  name: qliksense-tenants-secret
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRDRzhtWEtObXRvMDhNWHY3dm85bExtNTkrYW00ankwRDBoZ3ZCS0JLWkZJSW5hK1QxVk5HTXoKcUNyZzlEKzhSZW1nQndZRks0RUVBQ0toWkFOaUFBU3daQmhmUEhxTVJUeWtETU1FNk5Mb2tremVPcTliVXdFNgpWYW1iY0NwcUE0U3M2UE1qK1hvTC9wblEzRzZDNHJFRXJ4KzVtd3RqdFJEMUNnZHkxU3JHTWlhMkF4T3FtU0FxCmpVTGpNRGxodWptV2RTMGdOOThXd29pNUl5RzhENFU9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: TWY5QWNNUlEtYkxIZHV4TG9FLVBPeW96bTZaZTZ5ZnZXMVB5cTNGdjFCbw==
kind: Secret
metadata:
  labels:
    app: tenants
    release: qliksense
  name: qliksense-tenants-secrets-4ht8k7dt62
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
data:
  jwtPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREaXBDZ0grNTZQcnNIZk43clpoZE15VW1xWUtPUTFBbnViM3Ryd01OdktiZHdUbXFtS0J1VU4KYVRRSUpaUkNsTjZnQndZRks0RUVBQ0toWkFOaUFBUW1FWVBSbEgrMEVwSWdLR1FCYVZnVFVMYVJXNElYaUFkUgpNUmx5L09IV0x2dFo1SWxzeWg4Nnd0bzlEcndTUUx3VzFRdVVnNGVkcDlyeDFrTmoxb3VlbWo1T0hlR1NVUkJpCmN3MEVlUWhUNmRTbTVIWkZEemlqUnVQd2F4OXZWMVk9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: users
    release: qliksense
  name: qliksense-users-secret
  namespace: default
type: Opaque
---
apiVersion: v1
data:
  something: ZWxzZQ==
  tokenAuthPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREaXBDZ0grNTZQcnNIZk43clpoZE15VW1xWUtPUTFBbnViM3Ryd01OdktiZHdUbXFtS0J1VU4KYVRRSUpaUkNsTjZnQndZRks0RUVBQ0toWkFOaUFBUW1FWVBSbEgrMEVwSWdLR1FCYVZnVFVMYVJXNElYaUFkUgpNUmx5L09IV0x2dFo1SWxzeWg4Nnd0bzlEcndTUUx3VzFRdVVnNGVkcDlyeDFrTmoxb3VlbWo1T0hlR1NVUkJpCmN3MEVlUWhUNmRTbTVIWkZEemlqUnVQd2F4OXZWMVk9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
  tokenAuthPrivateKeyId: amhuYk93M25ad0hsQWZ6NEZSakVQZ281Q0dfVHcwdWV6UjJWc3lhZ0J6WQ==
kind: Secret
metadata:
  labels:
    app: users
    release: qliksense
  name: qliksense-users-secrets-26htc4k5c8
  namespace: default
stringData: {}
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "6080"
    prometheus.io/scrape: "true"
  labels:
    app: audit
    chart: audit-2.11.9
    heritage: Tiller
    release: qliksense
  name: qliksense-audit
  namespace: default
spec:
  ports:
  - name: audit
    port: 6080
    protocol: TCP
    targetPort: 6080
  selector:
    app: audit
    release: audit
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8585"
    prometheus.io/scrape: "true"
  labels:
    app: chronos
    chart: chronos-1.5.7
    heritage: Tiller
    release: qliksense
  name: qliksense-chronos
  namespace: default
spec:
  ports:
  - name: chronos
    port: 8585
    targetPort: 8585
  selector:
    app: chronos
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: chronos-worker
    chart: chronos-worker-1.4.7
    heritage: Tiller
    release: qliksense
  name: qliksense-chronos-worker
  namespace: default
spec:
  ports:
  - name: chronos-worker
    port: 8080
    targetPort: 8080
  selector:
    app: chronos-worker
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: collections
    chart: collections-2.8.15
    heritage: Tiller
    release: qliksense
  name: qliksense-collections
  namespace: default
spec:
  ports:
  - name: collections
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: collections
    release: collections
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "3005"
    prometheus.io/scrape: "true"
  labels:
    action: command
    app: data-connector-odbc
    chart: data-connector-odbc-1.3.4
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-odbc-cmd
  namespace: default
spec:
  ports:
  - name: grpc
    port: 50060
    protocol: TCP
    targetPort: 50060
  - name: http
    port: 3005
    protocol: TCP
    targetPort: 3005
  selector:
    action: command
    app: data-connector-odbc
    release: data-connector-odbc
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "3005"
    prometheus.io/scrape: "true"
  labels:
    action: reload
    app: data-connector-odbc
    chart: data-connector-odbc-1.3.4
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-odbc-rld
  namespace: default
spec:
  ports:
  - name: grpc
    port: 50060
    protocol: TCP
    targetPort: 50060
  - name: http
    port: 3005
    protocol: TCP
    targetPort: 3005
  selector:
    action: reload
    app: data-connector-odbc
    release: data-connector-odbc
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "3005"
    prometheus.io/scrape: "true"
  labels:
    action: command
    app: data-connector-qwc
    chart: data-connector-qwc-2.1.17
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-qwc-cmd
  namespace: default
spec:
  ports:
  - name: grpc
    port: 50060
    protocol: TCP
    targetPort: 50060
  - name: http
    port: 3005
    protocol: TCP
    targetPort: 3005
  selector:
    action: command
    app: data-connector-qwc
    release: data-connector-qwc
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "3005"
    prometheus.io/scrape: "true"
  labels:
    action: reload
    app: data-connector-qwc
    chart: data-connector-qwc-2.1.17
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-qwc-rld
  namespace: default
spec:
  ports:
  - name: grpc
    port: 50060
    protocol: TCP
    targetPort: 50060
  - name: http
    port: 3005
    protocol: TCP
    targetPort: 3005
  selector:
    action: reload
    app: data-connector-qwc
    release: data-connector-qwc
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "3005"
    prometheus.io/scrape: "true"
  labels:
    action: command
    app: data-connector-rest
    chart: data-connector-rest-1.1.19
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-rest-cmd
  namespace: default
spec:
  ports:
  - name: grpc
    port: 50060
    protocol: TCP
    targetPort: 50060
  - name: http
    port: 3005
    protocol: TCP
    targetPort: 3005
  selector:
    action: command
    app: data-connector-rest
    release: data-connector-rest
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "3005"
    prometheus.io/scrape: "true"
  labels:
    action: reload
    app: data-connector-rest
    chart: data-connector-rest-1.1.19
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-rest-rld
  namespace: default
spec:
  ports:
  - name: grpc
    port: 50060
    protocol: TCP
    targetPort: 50060
  - name: http
    port: 3005
    protocol: TCP
    targetPort: 3005
  selector:
    action: reload
    app: data-connector-rest
    release: data-connector-rest
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9072"
    prometheus.io/scrape: "true"
  labels:
    app: data-prep
    chart: data-prep-1.12.9
    heritage: Tiller
    release: qliksense
  name: qliksense-data-prep
  namespace: default
spec:
  ports:
  - name: data-prep
    port: 9072
    protocol: TCP
    targetPort: 9072
  selector:
    app: data-prep
    release: data-prep
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: data-rest-source
    chart: data-rest-source-1.1.4
    heritage: Tiller
    release: qliksense
  name: qliksense-data-rest-source
  namespace: default
spec:
  ports:
  - name: data-rest-source
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: data-rest-source
    release: data-rest-source
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9026"
    prometheus.io/scrape: "true"
  labels:
    app: dcaas
    chart: dcaas-1.3.8
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas
  namespace: default
spec:
  ports:
  - name: http
    port: 9026
    protocol: TCP
    targetPort: http
  selector:
    app: dcaas
    release: dcaas
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas-redis-master
  namespace: default
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: dcaas
    role: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas-redis-slave
  namespace: default
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: dcaas
    role: slave
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9180"
    prometheus.io/scrape: "true"
  labels:
    app: dcaas-web
    chart: dcaas-web-1.1.64
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas-web
  namespace: default
spec:
  ports:
  - name: dcaas-web
    port: 6384
    protocol: TCP
    targetPort: 6384
  selector:
    app: dcaas-web
    release: dcaas-web
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: edge-auth
    chart: edge-auth-4.22.11
    heritage: Tiller
    release: qliksense
  name: qliksense-edge-auth
  namespace: default
spec:
  ports:
  - name: edge-auth
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: oidc
    nodePort: 32123
    port: 32123
    protocol: TCP
    targetPort: 32123
  selector:
    app: edge-auth
    release: edge-auth
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elastic-infra
    chart: nginx-ingress-1.24.1
    component: controller
    heritage: Tiller
    release: qliksense
  name: qliksense-elastic-infra-nginx-ingress-controller
  namespace: default
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app: elastic-infra
    component: controller
    release: elastic-infra
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "10254"
    prometheus.io/scrape: "true"
  labels:
    app: elastic-infra
    chart: nginx-ingress-1.24.1
    component: controller
    heritage: Tiller
    release: qliksense
  name: qliksense-elastic-infra-nginx-ingress-controller-metrics
  namespace: default
spec:
  ports:
  - name: metrics
    port: 9913
    targetPort: metrics
  selector:
    app: elastic-infra
    component: controller
    release: elastic-infra
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: encryption
    chart: encryption-2.5.2
    heritage: Tiller
    release: qliksense
  name: qliksense-encryption
  namespace: default
spec:
  ports:
  - name: encryption
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: encryption
    release: encryption
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: engine
    chart: engine-1.54.9
    heritage: Tiller
    release: qliksense
  name: qliksense-engine
  namespace: default
spec:
  ports:
  - name: engine
    port: 9076
    protocol: TCP
  selector:
    app: engine
    release: engine
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: eventing
    chart: eventing-1.2.0
    heritage: Tiller
    release: qliksense
  name: qliksense-eventing
  namespace: default
spec:
  ports:
  - name: eventing
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: eventing
    release: eventing
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: feature-flags
    chart: feature-flags-1.9.7
    heritage: Tiller
    release: qliksense
  name: qliksense-feature-flags
  namespace: default
spec:
  ports:
  - name: feature-flags
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: feature-flags
    release: feature-flags
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "6080"
    prometheus.io/scrape: "true"
  labels:
    app: generic-links
    chart: generic-links-1.1.10
    heritage: Tiller
    release: qliksense
  name: qliksense-generic-links
  namespace: default
spec:
  ports:
  - name: generic-links
    port: 6080
    protocol: TCP
    targetPort: 6080
  selector:
    app: generic-links
    release: generic-links
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "40072"
    prometheus.io/scrape: "true"
  labels:
    app: geo-operations
    chart: geo-operations-1.1.2
    heritage: Tiller
    release: qliksense
  name: qliksense-geo-operations
  namespace: default
spec:
  ports:
  - name: grpc
    port: 50072
    protocol: TCP
    targetPort: 50072
  - name: http
    port: 40072
    protocol: TCP
    targetPort: 40072
  selector:
    app: geo-operations
    release: geo-operations
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: groups
    chart: groups-1.4.19
    heritage: Tiller
    release: qliksense
  name: qliksense-groups
  namespace: default
spec:
  ports:
  - name: groups
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: groups
    release: groups
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9180"
    prometheus.io/scrape: "true"
  labels:
    app: hub
    chart: hub-1.3.49
    heritage: Tiller
    release: qliksense
  name: qliksense-hub
  namespace: default
spec:
  ports:
  - name: hub
    port: 3023
    protocol: TCP
    targetPort: 3023
  selector:
    app: hub
    release: hub
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: identity-providers
    chart: identity-providers-1.8.1
    heritage: Tiller
    release: qliksense
  name: qliksense-identity-providers
  namespace: default
spec:
  ports:
  - name: identity-providers
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: identity-providers
    release: identity-providers
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9292"
    prometheus.io/scrape: "true"
  labels:
    app: insights
    chart: insights-1.7.4
    heritage: Tiller
    release: qliksense
  name: qliksense-insights
  namespace: default
spec:
  ports:
  - name: insights
    port: 9292
    targetPort: 9292
  selector:
    app: insights
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: keys
    chart: keys-1.4.2
    heritage: Tiller
    release: qliksense
  name: qliksense-keys
  namespace: default
spec:
  ports:
  - name: keys
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: keys
    release: keys
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9200"
    prometheus.io/scrape: "true"
  labels:
    app: licenses
    chart: licenses-1.15.10
    heritage: Tiller
    release: qliksense
  name: qliksense-licenses
  namespace: default
spec:
  ports:
  - name: licenses
    port: 9200
    protocol: TCP
    targetPort: 9200
  selector:
    app: licenses
    release: licenses
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: locale
    chart: locale-1.3.2
    heritage: Tiller
    release: qliksense
  name: qliksense-locale
  namespace: default
spec:
  ports:
  - name: locale
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: locale
    release: locale
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9180"
    prometheus.io/scrape: "true"
  labels:
    app: management-console
    chart: management-console-1.6.127
    heritage: Tiller
    release: qliksense
  name: qliksense-management-console
  namespace: default
spec:
  ports:
  - name: management-console
    port: 3024
    protocol: TCP
    targetPort: 3024
  selector:
    app: management-console
    release: management-console
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: messaging
    chart: nats-2.4.1
    heritage: Tiller
    release: qliksense
  name: qliksense-messaging-nats-client
  namespace: default
spec:
  ports:
  - name: client
    port: 4222
    targetPort: client
  selector:
    app: messaging
    release: messaging
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: messaging
    chart: nats-2.4.1
    heritage: Tiller
    release: qliksense
  name: qliksense-messaging-nats-cluster
  namespace: default
spec:
  ports:
  - name: cluster
    port: 6222
    targetPort: cluster
  selector:
    app: messaging
    release: messaging
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: messaging
    chart: nats-2.4.1
    heritage: Tiller
    release: qliksense
  name: qliksense-messaging-nats-headless
  namespace: default
spec:
  clusterIP: None
  ports:
  - name: client
    port: 4222
    targetPort: client
  - name: cluster
    port: 6222
    targetPort: cluster
  selector:
    app: messaging
    release: messaging
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "7777"
    prometheus.io/scrape: "true"
  labels:
    app: messaging
    chart: nats-2.4.1
    heritage: Tiller
    release: qliksense
  name: qliksense-messaging-nats-monitoring
  namespace: default
spec:
  ports:
  - name: monitoring
    port: 8222
    targetPort: monitoring
  selector:
    app: messaging
    release: messaging
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "7777"
    prometheus.io/scrape: "true"
  labels:
    app: messaging
    chart: nats-streaming-0.4.0
    heritage: Tiller
    release: qliksense
  name: qliksense-messaging-nats-streaming-monitoring
  namespace: default
spec:
  ports:
  - name: monitoring
    port: 8222
    targetPort: monitoring
  selector:
    app: messaging
    release: messaging
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mongodb
    chart: mongodb-4.5.0
    heritage: Tiller
    release: qliksense
  name: qliksense-mongodb
  namespace: default
spec:
  ports:
  - name: mongodb
    port: 27017
    targetPort: mongodb
  selector:
    app: mongodb
    release: mongodb
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "30301"
    prometheus.io/scrape: "true"
  labels:
    app: nl-broker
    chart: nl-broker-1.1.3
    heritage: Tiller
    release: qliksense
  name: qliksense-nl-broker
  namespace: default
spec:
  ports:
  - name: nl-broker
    port: 30301
    protocol: TCP
    targetPort: 30301
  selector:
    app: nl-broker
    release: nl-broker
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "30302"
    prometheus.io/scrape: "true"
  labels:
    app: nl-parser
    chart: nl-parser-1.0.5
    heritage: Tiller
    release: qliksense
  name: qliksense-nl-parser
  namespace: default
spec:
  ports:
  - name: nl-parser
    port: 30302
    protocol: TCP
    targetPort: 30302
  selector:
    app: nl-parser
    release: nl-parser
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9098"
    prometheus.io/scrape: "true"
  labels:
    app: odag
    chart: odag-1.8.8
    heritage: Tiller
    release: qliksense
  name: qliksense-odag
  namespace: default
spec:
  ports:
  - name: odag
    port: 9098
    protocol: TCP
  selector:
    app: odag
    release: odag
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "5080"
    prometheus.io/scrape: "true"
  labels:
    app: policy-decisions
    chart: policy-decisions-1.8.17
    heritage: Tiller
    release: qliksense
  name: qliksense-policy-decisions
  namespace: default
spec:
  ports:
  - name: policy-decisions
    port: 5080
    protocol: TCP
    targetPort: 5080
  selector:
    app: policy-decisions
    release: policy-decisions
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9054"
    prometheus.io/scrape: "true"
  labels:
    app: precedents
    chart: precedents-1.1.18
    heritage: Tiller
    release: qliksense
  name: qliksense-precedents
  namespace: default
spec:
  ports:
  - name: precedents
    port: 9054
    protocol: TCP
    targetPort: 9054
  selector:
    app: precedents
    release: precedents
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "50052"
    prometheus.io/scrape: "true"
  labels:
    app: precedents
    chart: precedents-1.1.18
    heritage: Tiller
    release: qliksense
  name: qliksense-precedents-cayley
  namespace: default
spec:
  ports:
  - name: precedents
    port: 50052
    protocol: TCP
    targetPort: 50052
  selector:
    app: precedents
    release: precedents
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9011"
    prometheus.io/scrape: "true"
  labels:
    app: qix-data-connection
    chart: qix-data-connection-1.7.14
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-data-connection
  namespace: default
spec:
  ports:
  - name: qix-data-connection
    port: 9011
    protocol: TCP
    targetPort: 9011
  selector:
    app: qix-data-connection
    release: qix-data-connection
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: qix-data-reload
    chart: reloads-1.6.3
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-data-reload
  namespace: default
spec:
  ports:
  - name: qix-data-reload
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: qix-data-reload
    release: qix-data-reload
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: qix-datafiles
    chart: qix-datafiles-1.10.21
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-datafiles
  namespace: default
spec:
  ports:
  - name: qix-datafiles
    port: 8080
    protocol: TCP
    targetPort: 8080
  - name: grpc
    port: 50051
    protocol: TCP
    targetPort: 50051
  selector:
    app: qix-datafiles
    release: qix-datafiles
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: qix-sessions
    chart: qix-sessions-4.0.10
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-sessions
  namespace: default
spec:
  ports:
  - name: qix-sessions
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: qix-sessions
    release: qix-sessions
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9180"
    prometheus.io/scrape: "true"
  labels:
    app: qlikview-client
    chart: qlikview-client-1.0.12
    heritage: Tiller
    release: qliksense
  name: qliksense-qlikview-client
  namespace: default
spec:
  ports:
  - name: qlikview-client
    port: 9003
    protocol: TCP
    targetPort: 9003
  selector:
    app: qlikview-client
    release: qlikview-client
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "6080"
    prometheus.io/scrape: "true"
  labels:
    app: quotas
    chart: quotas-1.0.2
    heritage: Tiller
    release: qliksense
  name: qliksense-quotas
  namespace: default
spec:
  ports:
  - name: quotas
    port: 6080
    protocol: TCP
    targetPort: 6080
  selector:
    app: quotas
    release: quotas
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-redis-master
  namespace: default
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: redis
    role: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-redis-slave
  namespace: default
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: redis
    role: slave
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: reload-tasks
    chart: reload-tasks-1.5.0
    heritage: Tiller
    release: qliksense
  name: qliksense-reload-tasks
  namespace: default
spec:
  ports:
  - name: reload-tasks
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: reload-tasks
    release: reload-tasks
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8282"
    prometheus.io/scrape: "true"
  labels:
    app: reporting
    chart: reporting-1.17.22
    heritage: Tiller
    release: qliksense
  name: qliksense-reporting
  namespace: default
spec:
  ports:
  - name: reporting
    port: 8282
    targetPort: 8282
  selector:
    app: reporting
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8383"
    prometheus.io/scrape: "true"
  labels:
    app: reporting
    release: qliksense
  name: qliksense-reporting-cmp
  namespace: default
spec:
  ports:
  - name: reporting-cmp
    port: 8383
    targetPort: 8383
  selector:
    app: reporting
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8484"
    prometheus.io/scrape: "true"
  labels:
    app: reporting
    release: qliksense
  name: qliksense-reporting-rpr
  namespace: default
spec:
  ports:
  - name: reporting-rpr
    port: 8484
    targetPort: 8484
  selector:
    app: reporting
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: reporting
    release: qliksense
  name: qliksense-reporting-rwr
  namespace: default
spec:
  ports:
  - name: reporting-rwr
    port: 9288
    targetPort: 9288
  selector:
    app: reporting
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "21068"
    prometheus.io/scrape: "true"
  labels:
    app: resource-library
    chart: resource-library-1.10.3
    heritage: Tiller
    release: qliksense
  name: qliksense-resource-library
  namespace: default
spec:
  ports:
  - name: resource-library
    port: 21068
    protocol: TCP
    targetPort: 21068
  selector:
    app: resource-library
    release: resource-library
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9180"
    prometheus.io/scrape: "true"
  labels:
    app: sense-client
    chart: sense-client-1.5.33
    heritage: Tiller
    release: qliksense
  name: qliksense-sense-client
  namespace: default
spec:
  ports:
  - name: http
    port: 9050
    protocol: TCP
    targetPort: http
  selector:
    app: sense-client
    release: sense-client
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "6080"
    prometheus.io/scrape: "true"
  labels:
    app: spaces
    chart: spaces-2.8.1
    heritage: Tiller
    release: qliksense
  name: qliksense-spaces
  namespace: default
spec:
  ports:
  - name: spaces
    port: 6080
    protocol: TCP
    targetPort: 6080
  selector:
    app: spaces
    release: spaces
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "6080"
    prometheus.io/scrape: "true"
  labels:
    app: temporary-contents
    chart: temporary-contents-1.3.0
    heritage: Tiller
    release: qliksense
  name: qliksense-temporary-contents
  namespace: default
spec:
  ports:
  - name: temporary-contents
    port: 6080
    protocol: TCP
    targetPort: 6080
  selector:
    app: temporary-contents
    release: temporary-contents
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: tenants
    chart: tenants-2.5.0
    heritage: Tiller
    release: qliksense
  name: qliksense-tenants
  namespace: default
spec:
  ports:
  - name: tenants
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: tenants
    release: tenants
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: users
    chart: users-1.8.9
    heritage: Tiller
    release: qliksense
  name: qliksense-users
  namespace: default
spec:
  ports:
  - name: users
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: users
    release: users
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: audit
    chart: audit-2.11.9
    heritage: Tiller
    release: qliksense
  name: qliksense-audit
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: audit
      release: audit
  template:
    metadata:
      labels:
        app: audit
        qliksense-messaging-nats-client: "true"
        release: audit
    spec:
      containers:
      - env:
        - name: PDS_URI
          valueFrom:
            configMapKeyRef:
              key: pdsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-audit-secrets-bh877m4dmf
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-audit-secrets-bh877m4dmf
        - name: TERMINATION_GRACE_PERIOD_SECONDS
          value: "30"
        - name: ACCESS_CONTROL_ENABLED
          value: "true"
        - name: LOG_LEVEL
          value: info
        - name: EVENT_TTL
          value: "-1"
        - name: AUTH_ENABLED
          value: "true"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: TOKEN_AUTH_ENABLED
          value: "true"
        - name: TOKEN_AUTH_KID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: TOKEN_AUTH_URL
          value: $(TOKEN_AUTH_URI)/v1/internal-tokens
        - name: NATS_ENABLED
          value: "true"
        - name: NATS_SERVERS
          value: $(NATS_URI)
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: NATS_CHANNELS
          value: system-events.engine.app,system-events.user-session,system-events.spaces,system-events.licenses,system-events.generic-links,system-events.api-keys
        - name: ARCHIVE_ENABLED
          value: "false"
        - name: ARCHIVE_INTERVAL
          value: 1h
        - name: ARCHIVE_RETRY_AFTER
          value: 30m
        image: qlik-docker-qsefe.bintray.io/audit:1.15.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6080
        name: main
        ports:
        - containerPort: 6080
        readinessProbe:
          httpGet:
            path: /ready
            port: 6080
      imagePullSecrets:
      - name: artifactory-docker-secret
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: chronos
    chart: chronos-1.5.7
    heritage: Tiller
    release: qliksense
  name: qliksense-chronos
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chronos
      release: chronos
  template:
    metadata:
      labels:
        app: chronos
        chart: chronos-1.5.7
        heritage: Tiller
        qliksense-messaging-nats-client: "true"
        release: chronos
    spec:
      containers:
      - args:
        - --election=qliksense-chronos
        - --election-namespace=default
        - --http=0.0.0.0:4040
        image: qlik-docker-qsefe.bintray.io/leader-elector:1.3
        imagePullPolicy: IfNotPresent
        name: election
        ports:
        - containerPort: 4040
      - args:
        - server
        - --environment=k8s
        - --disableapi=false
        - --listenport=8585
        - --svc=qliksense-chronos
        - --nojwtvalidation=false
        - --jwksuri=$(KEYS_URI)/keys/qlik.api.internal
        - --jwtaud=qlik.api.internal
        - --jwtiss=qlik.api.internal
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-secrets-d8d4b46kd4
        - name: REDIS_URI_WITH_PORT
          valueFrom:
            configMapKeyRef:
              key: redisUriWithPort
              name: qliksense-configs-k5hgd4cf2c
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: REDIS_URI
          value: $(REDIS_URI_WITH_PORT)
        image: qlik-docker-qsefe.bintray.io/chronos:0.9.15
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /health
            port: 8585
          initialDelaySeconds: 30
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 8585
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: /ready
            port: 8585
          initialDelaySeconds: 30
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "0"
            memory: "0"
          requests:
            cpu: "0"
            memory: "0"
      imagePullSecrets:
      - name: artifactory-docker-secret
      serviceAccountName: qliksense-chronos
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: chronos-worker
    chart: chronos-worker-1.4.7
    heritage: Tiller
    release: qliksense
  name: qliksense-chronos-worker
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chronos-worker
      release: chronos-worker
  template:
    metadata:
      labels:
        app: chronos-worker
        chart: chronos-worker-1.4.7
        heritage: Tiller
        qliksense-messaging-nats-client: "true"
        release: chronos-worker
    spec:
      containers:
      - args:
        - -natsURI=$(NATS_URI)
        - -stanClusterID=$(NATS_STREAMING_CLUSTER_ID)
        - -jwtTokenAuthEnabled=true
        - -jwtTokenAuthURL=$(TOKEN_AUTH_URI)/v1/internal-tokens
        - -headerManagerEnabled=true
        - -jwtKid=$(TOKEN_AUTH_PRIVATE_KEY_ID)
        env:
        - name: REDIS_URI_WITH_PORT
          valueFrom:
            configMapKeyRef:
              key: redisUriWithPort
              name: qliksense-configs-k5hgd4cf2c
        - name: REDIS_URI
          value: $(REDIS_URI_WITH_PORT)
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-secrets-d8d4b46kd4
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-chronos-worker-secrets-tbkbm8b6d9
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-chronos-worker-secrets-tbkbm8b6d9
        - name: JWT_PRIVATE_KEY
          value: $(TOKEN_AUTH_PRIVATE_KEY)
        - name: REDIS_PWD
          value: $(REDIS_PASSWORD)
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        image: qlik-docker-qsefe.bintray.io/chronos-worker:0.5.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 8080
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 5
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: collections
    chart: collections-2.8.15
    heritage: Tiller
    release: qliksense
  name: qliksense-collections
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: collections
      release: collections
  template:
    metadata:
      labels:
        app: collections
        chart: collections-2.8.15
        heritage: Tiller
        qliksense-messaging-nats-client: "true"
        release: collections
    spec:
      containers:
      - env:
        - name: TERMINATION_GRACE_PERIOD_SECONDS
          value: "30"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: PDS_URI
          valueFrom:
            configMapKeyRef:
              key: pdsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: ACCESS_CONTROL_ENABLED
          value: "true"
        - name: AUTH_ENABLED
          value: "true"
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: LEGACY_ROUTER_ENABLED
          value: "false"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: ROLLBAR_ENABLED
          value: "false"
        - name: MESSAGING_ENABLED
          value: "true"
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_ADDR
          value: $(NATS_URI)
        - name: NATS_CONNECT_WAIT_SECONDS
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_STREAMING_CHANNEL
          value: system-events.engine.app
        - name: NATS_TOKEN_AUTH_ENABLED
          value: "true"
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-collections-secrets-2487k5cfhh
        - name: NATS_TOKEN_AUTH_PRIVATE_KEY
          value: $(TOKEN_AUTH_PRIVATE_KEY)
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-collections-secrets-2487k5cfhh
        - name: NATS_TOKEN_AUTH_KID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_TOKEN_AUTH_URL
          value: $(TOKEN_AUTH_URI)/v1/internal-tokens
        - name: ACCESS_CONTROL_QUERY_TIMEOUT
          value: "30"
        - name: ACCESS_CONTROL_EVALUATE_TIMEOUT
          value: "30"
        image: qlik-docker-qsefe.bintray.io/collections:1.0.94
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
        name: main
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
      imagePullSecrets:
      - name: artifactory-docker-secret
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    action: command
    app: data-connector-odbc
    chart: data-connector-odbc-1.3.4
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-odbc-cmd
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      action: command
      app: data-connector-odbc
      release: data-connector-odbc
  template:
    metadata:
      labels:
        action: command
        app: data-connector-odbc
        qliksense-messaging-nats-client: "true"
        release: data-connector-odbc
    spec:
      containers:
      - env:
        - name: STANDALONE
          value: "false"
        - name: DATA_HOST
          value: 0.0.0.0
        - name: DATA_PORT_RANGE_START
          value: "50060"
        - name: DATA_PORT_RANGE_END
          value: "50060"
        - name: CONFIG
          value: /opt/runner/Odbc_dotnetcore.json
        - name: LOG_LEVEL
          value: INFO
        - name: SERVICE_MODE
          value: "true"
        - name: QS_ENVIRONMENT
          value: QSEOK
        image: qlik-docker-qsefe.bintray.io/data-connector-odbc:6.35.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 3005
        name: main
        ports:
        - containerPort: 50060
          name: grpc
          protocol: TCP
        - containerPort: 3005
          name: http
          protocol: TCP
      imagePullSecrets:
      - name: artifactory-docker-secret
      securityContext:
        supplementalGroups:
        - 13000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    action: reload
    app: data-connector-odbc
    chart: data-connector-odbc-1.3.4
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-odbc-rld
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      action: reload
      app: data-connector-odbc
      release: data-connector-odbc
  template:
    metadata:
      labels:
        action: reload
        app: data-connector-odbc
        qliksense-messaging-nats-client: "true"
        release: data-connector-odbc
    spec:
      containers:
      - env:
        - name: STANDALONE
          value: "false"
        - name: DATA_HOST
          value: 0.0.0.0
        - name: DATA_PORT_RANGE_START
          value: "50060"
        - name: DATA_PORT_RANGE_END
          value: "50060"
        - name: CONFIG
          value: /opt/runner/Odbc_dotnetcore.json
        - name: LOG_LEVEL
          value: INFO
        - name: SERVICE_MODE
          value: "true"
        - name: QS_ENVIRONMENT
          value: QSEOK
        image: qlik-docker-qsefe.bintray.io/data-connector-odbc:6.35.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 3005
        name: main
        ports:
        - containerPort: 50060
          name: grpc
          protocol: TCP
        - containerPort: 3005
          name: http
          protocol: TCP
      imagePullSecrets:
      - name: artifactory-docker-secret
      securityContext:
        supplementalGroups:
        - 13000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    action: command
    app: data-connector-qwc
    chart: data-connector-qwc-2.1.17
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-qwc-cmd
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      action: command
      app: data-connector-qwc
      release: data-connector-qwc
  template:
    metadata:
      labels:
        action: command
        app: data-connector-qwc
        qliksense-messaging-nats-client: "true"
        release: data-connector-qwc
    spec:
      containers:
      - env:
        - name: REDIS_URI
          valueFrom:
            configMapKeyRef:
              key: redisUri
              name: qliksense-dcaas-configs-tk5t9gmtd2
        - name: QWC_REDIS_CONFIG_STRING
          value: $(REDIS_URI)
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-dcaas-secrets-kh87dtggd5
        - name: QWC_REDIS_PASSWORD
          value: $(REDIS_PASSWORD)
        - name: STANDALONE
          value: "false"
        - name: DATA_HOST
          value: 0.0.0.0
        - name: DATA_PORT_RANGE_START
          value: "50060"
        - name: DATA_PORT_RANGE_END
          value: "50060"
        - name: CONFIG
          value: /opt/runner/QWC_dotnetcore.json
        - name: SERVICE_MODE
          value: "true"
        - name: QWC_LOG_LEVEL
          value: INFO
        - name: QWC_ALLOW_REFERENCE_CONNECTOR
          value: "true"
        image: qlik-docker-qsefe.bintray.io/data-connector-qwc:0.69.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 3005
        name: main
        ports:
        - containerPort: 50060
          name: grpc
          protocol: TCP
        - containerPort: 3005
          name: http
          protocol: TCP
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    action: reload
    app: data-connector-qwc
    chart: data-connector-qwc-2.1.17
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-qwc-rld
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      action: reload
      app: data-connector-qwc
      release: data-connector-qwc
  template:
    metadata:
      labels:
        action: reload
        app: data-connector-qwc
        qliksense-messaging-nats-client: "true"
        release: data-connector-qwc
    spec:
      containers:
      - env:
        - name: REDIS_URI
          valueFrom:
            configMapKeyRef:
              key: redisUri
              name: qliksense-dcaas-configs-tk5t9gmtd2
        - name: QWC_REDIS_CONFIG_STRING
          value: $(REDIS_URI)
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-dcaas-secrets-kh87dtggd5
        - name: QWC_REDIS_PASSWORD
          value: $(REDIS_PASSWORD)
        - name: STANDALONE
          value: "false"
        - name: DATA_HOST
          value: 0.0.0.0
        - name: DATA_PORT_RANGE_START
          value: "50060"
        - name: DATA_PORT_RANGE_END
          value: "50060"
        - name: CONFIG
          value: /opt/runner/QWC_dotnetcore.json
        - name: SERVICE_MODE
          value: "true"
        - name: MAX_ACTIVE_RELOADS
          value: "3"
        - name: FILE_TRANSFER_ABOVE_MAX_ALLOWANCE
          value: "2"
        - name: QWC_LOG_LEVEL
          value: INFO
        - name: QWC_ALLOW_REFERENCE_CONNECTOR
          value: "true"
        image: qlik-docker-qsefe.bintray.io/data-connector-qwc:0.69.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 3005
        name: main
        ports:
        - containerPort: 50060
          name: grpc
          protocol: TCP
        - containerPort: 3005
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readiness
            port: 3005
          initialDelaySeconds: 2
          periodSeconds: 10
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    action: command
    app: data-connector-rest
    chart: data-connector-rest-1.1.19
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-rest-cmd
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      action: command
      app: data-connector-rest
      release: data-connector-rest
  template:
    metadata:
      labels:
        action: command
        app: data-connector-rest
        qliksense-messaging-nats-client: "true"
        release: data-connector-rest
    spec:
      containers:
      - env:
        - name: STANDALONE
          value: "false"
        - name: DATA_HOST
          value: 0.0.0.0
        - name: DATA_PORT_RANGE_START
          value: "50060"
        - name: DATA_PORT_RANGE_END
          value: "50060"
        - name: CONFIG
          value: /opt/runner/Rest_dotnetcore.json
        - name: LOG_LEVEL
          value: INFO
        - name: SERVICE_MODE
          value: "true"
        - name: QS_ENVIRONMENT
          value: QSEOK
        image: qlik-docker-qsefe.bintray.io/data-connector-rest:2.21.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 3005
        name: main
        ports:
        - containerPort: 50060
          name: grpc
          protocol: TCP
        - containerPort: 3005
          name: http
          protocol: TCP
      imagePullSecrets:
      - name: artifactory-docker-secret
      securityContext:
        supplementalGroups:
        - 13100
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    action: reload
    app: data-connector-rest
    chart: data-connector-rest-1.1.19
    heritage: Tiller
    release: qliksense
  name: qliksense-data-connector-rest-rld
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      action: reload
      app: data-connector-rest
      release: data-connector-rest
  template:
    metadata:
      labels:
        action: reload
        app: data-connector-rest
        qliksense-messaging-nats-client: "true"
        release: data-connector-rest
    spec:
      containers:
      - env:
        - name: STANDALONE
          value: "false"
        - name: DATA_HOST
          value: 0.0.0.0
        - name: DATA_PORT_RANGE_START
          value: "50060"
        - name: DATA_PORT_RANGE_END
          value: "50060"
        - name: CONFIG
          value: /opt/runner/Rest_dotnetcore.json
        - name: LOG_LEVEL
          value: INFO
        - name: SERVICE_MODE
          value: "true"
        - name: MAX_ACTIVE_RELOADS
          value: "3"
        - name: QS_ENVIRONMENT
          value: QSEOK
        image: qlik-docker-qsefe.bintray.io/data-connector-rest:2.21.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 3005
        name: main
        ports:
        - containerPort: 50060
          name: grpc
          protocol: TCP
        - containerPort: 3005
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readiness
            port: 3005
          initialDelaySeconds: 2
          periodSeconds: 10
      imagePullSecrets:
      - name: artifactory-docker-secret
      securityContext:
        supplementalGroups:
        - 13100
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: data-prep
    chart: data-prep-1.12.9
    heritage: Tiller
    release: qliksense
  name: qliksense-data-prep
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: data-prep
  template:
    metadata:
      labels:
        app: data-prep
        qliksense-messaging-nats-client: "true"
        release: data-prep
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - |
          export ENGINEADDRESS=`echo $(QIX_SESSIONS_URI)| cut -d'/' -f3 | cut -d':' -f1`
          export ENGINEPORT=`echo $(QIX_SESSIONS_URI)| cut -d':' -f3 | cut -d'/' -f1`
          export DATAFILESHOST=`echo $(DATA_FILES_URI)| cut -d'/' -f3 | cut -d':' -f1`
          export DATAFILESPORT=`echo $(DATA_FILES_URI)| cut -d':' -f3 | cut -d'/' -f1`
          export QIXDATAFILESHOST=`echo $(QIX_DATA_FILES_URI)| cut -d'/' -f3 | cut -d':' -f1`
          export QIXDATAFILESPORT=`echo $(QIX_DATA_FILES_URI)| cut -d':' -f3 | cut -d'/' -f1`
          export PRECEDENTSHOST=`echo $(PRECEDENTS_URI)| cut -d'/' -f3 | cut -d':' -f1`
          export PRECEDENTSPORT=`echo $(PRECEDENTS_URI)| cut -d':' -f3 | cut -d'/' -f1`
          ./start.sh
        env:
        - name: REDIS_URI
          valueFrom:
            configMapKeyRef:
              key: redisUri
              name: qliksense-configs-k5hgd4cf2c
        - name: DPS_REDIS_URL
          value: $(REDIS_URI)
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-secrets-d8d4b46kd4
        - name: DPS_REDIS_PASSWORD
          value: $(REDIS_PASSWORD)
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAG_URL
          value: $(FEATURE_FLAGS_URI)/v0/features
        - name: SPACES_URI
          valueFrom:
            configMapKeyRef:
              key: spacesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: QIX_SESSIONS_URI
          valueFrom:
            configMapKeyRef:
              key: qixSessionsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: DATA_FILES_URI
          valueFrom:
            configMapKeyRef:
              key: dataFilesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: QIX_DATA_FILES_URI
          valueFrom:
            configMapKeyRef:
              key: qixDataFilesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: PRECEDENTS_URI
          valueFrom:
            configMapKeyRef:
              key: precedentsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: PORT
          value: "9072"
        - name: BINDADDRESS
          value: '::'
        - name: TTL
          value: "10000"
        - name: KEEPALIVE
          value: "30000"
        - name: LOGICALAPPSFOLDER
          value: /qlik/apps
        - name: LOGICALGEOFOLDER
          value: /geo
        - name: LOGPATH
          value: /logs
        - name: DATAPATH
          value: /
        - name: LOGLEVEL
          value: verbose
        - name: MODE
          value: elastic
        image: qlik-docker-qsefe.bintray.io/data-prep-service:2.160.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: null
          httpGet:
            path: /health
            port: 9072
          periodSeconds: null
        name: main
        ports:
        - containerPort: 9072
        volumeMounts:
        - mountPath: /qlik/apps
          name: apps-storage
        - mountPath: /Apps
          name: apps-storage
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - emptyDir: {}
        name: apps-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: data-rest-source
    chart: data-rest-source-1.1.4
    heritage: Tiller
    release: qliksense
  name: qliksense-data-rest-source
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: data-rest-source
      release: data-rest-source
  template:
    metadata:
      labels:
        app: data-rest-source
        qliksense-messaging-nats-client: "true"
        release: data-rest-source
    spec:
      containers:
      - env:
        - name: HOST_PORT
          value: "8080"
        image: qlik-docker-qsefe.bintray.io/data-rest-source:1.0.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
        name: main
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dcaas
    chart: dcaas-1.3.8
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dcaas
      release: dcaas
  template:
    metadata:
      labels:
        app: dcaas
        qliksense-messaging-nats-client: "true"
        release: dcaas
    spec:
      containers:
      - env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-dcaas-secrets-kh87dtggd5
        - name: REDIS_URI
          valueFrom:
            configMapKeyRef:
              key: redisUri
              name: qliksense-dcaas-configs-tk5t9gmtd2
        - name: SPACES_URI
          valueFrom:
            configMapKeyRef:
              key: spacesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: SPACE_SERVICE
          value: $(SPACES_URI)
        - name: DCAAS_DATA_CONNECTION_URI
          valueFrom:
            configMapKeyRef:
              key: dcaasDataConnectionUri
              name: qliksense-dcaas-configs-tk5t9gmtd2
        - name: NEW_DATA_CONNECTION_SERVICE
          value: $(DCAAS_DATA_CONNECTION_URI)
        - name: CONNECTOR_SERVICES
          valueFrom:
            configMapKeyRef:
              key: connectorServices
              name: qliksense-dcaas-configs-tk5t9gmtd2
        - name: CONNECTOR_SERVICE
          value: $(CONNECTOR_SERVICES)
        - name: QIX_DATA_CONNECTION_URI
          valueFrom:
            configMapKeyRef:
              key: qixDataConnectionUri
              name: qliksense-configs-k5hgd4cf2c
        - name: DATA_CONNECTION_SERVICE
          value: $(QIX_DATA_CONNECTION_URI)
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATUREFLAG_URL
          value: $(FEATURE_FLAGS_URI)
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: JWKS_ENDPOINT
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: NODE_ENV
          value: enterprise
        - name: LOG_LEVEL
          value: info
        - name: EMULATE_STORAGE_PROVIDER
          value: "true"
        - name: ENABLE_JWT_AUTH
          value: "true"
        - name: ENABLE_POD_LOADBALANCING
          value: "false"
        - name: ENABLE_FEATUREFLAG_FILTERING
          value: "true"
        image: qlik-docker-qsefe.bintray.io/dcaas:1.6.27
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 9026
        name: main
        ports:
        - containerPort: 9026
          name: http
          protocol: TCP
      dnsConfig:
        options:
        - name: timeout
          value: "1"
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas-redis-slave
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      release: dcaas
      role: slave
  template:
    metadata:
      annotations:
        checksum/configmap: 3774bf6f6c465e6b0553f05615bb11f248809b8337c28b34b923da5dbffd0152
        checksum/health: ad3cd6d291cdb6751df3d064f54badde5cebae2f4af664c7e286ad1ac32aa787
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      labels:
        app: redis
        chart: redis-6.0.1
        qliksense-messaging-nats-client: "true"
        release: dcaas
        role: slave
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
            export REDIS_MASTER_PASSWORD=$password_aux
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--protected-mode" "no")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
          /run.sh "${ARGS[@]}"
        env:
        - name: REDIS_MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-dcaas-secrets-kh87dtggd5
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-dcaas-secrets-kh87dtggd5
        - name: REDIS_REPLICATION_MODE
          value: slave
        - name: REDIS_MASTER_HOST
          value: qliksense-dcaas-redis-master
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_MASTER_PORT_NUMBER
          value: "6379"
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        image: docker.io/bitnami/redis:4.0.12
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local_and_master.sh
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local_and_master.sh
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources: null
        volumeMounts:
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
        - mountPath: /opt/bitnami/redis/etc
          name: config
      serviceAccountName: default
      volumes:
      - configMap:
          defaultMode: 493
          name: qliksense-dcaas-redis-health
        name: health
      - configMap:
          name: qliksense-dcaas-redis
        name: config
      - emptyDir: {}
        name: redis-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dcaas-web
    chart: dcaas-web-1.1.64
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas-web
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dcaas-web
      release: dcaas-web
  template:
    metadata:
      labels:
        app: dcaas-web
        qliksense-messaging-nats-client: "true"
        release: dcaas-web
    spec:
      containers:
      - image: qlik-docker-qsefe.bintray.io/dcaas-web:1.1.57
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6384
        name: main
        ports:
        - containerPort: 6384
          name: http
          protocol: TCP
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: edge-auth
    chart: edge-auth-4.22.11
    heritage: Tiller
    release: qliksense
  name: qliksense-edge-auth
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: edge-auth
      release: edge-auth
  template:
    metadata:
      annotations:
        checksum/secrets: 2a994685df401f7e65458257c7b48dd59644260a79a969b1f9702de171f2e9b0
      labels:
        app: edge-auth
        qliksense-messaging-nats-client: "true"
        release: edge-auth
    spec:
      containers:
      - env:
        - name: USERS_URI
          valueFrom:
            configMapKeyRef:
              key: usersUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TENANTS_URI
          valueFrom:
            configMapKeyRef:
              key: tenantsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: IDENTITY_PROVIDERS_V1_URI
          valueFrom:
            configMapKeyRef:
              key: identityProvidersV1Uri
              name: qliksense-configs-k5hgd4cf2c
        - name: IDENTITY_PROVIDERS_URI
          valueFrom:
            configMapKeyRef:
              key: identityProvidersUri
              name: qliksense-configs-k5hgd4cf2c
        - name: GROUPS_URI
          valueFrom:
            configMapKeyRef:
              key: groupsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: CORS_URI
          valueFrom:
            configMapKeyRef:
              key: corsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: MONGO_SSL
          value: "false"
        - name: MONGO_SSL_VALIDATE
          value: "false"
        - name: MONGO_CHECK_SERVER_IDENTITY
          value: "false"
        - name: COOKIES_KEYS_FILE
          value: /run/secret/edge-auth/cookieKeys
        - name: JWT_PRIVATE_KEY_FILE
          value: /run/secret/edge-auth/jwtPrivateKey
        - name: JWT_PUBLIC_KEYS_FILE
          value: /run/secret/edge-auth/jwtPublicKeys
        - name: STATE_KEY_FILE
          value: /run/secret/edge-auth/loginStateKey
        - name: ENFORCE_TLS
          value: "true"
        - name: SECURE_COOKIES
          value: "true"
        - name: SESSION_TTL
          value: "1800"
        - name: SESSION_MAX_LIFETIME
          value: "86400"
        - name: CACHE_REDIS_ENABLED
          value: "false"
        - name: CACHE_MAX_AGE
          value: "7.2e+06"
        - name: CACHE_MAX_SIZE
          value: "250"
        - name: STATE_LIFETIME
          value: 7d
        - name: FEATURES_RESOURCE
          value: $(FEATURE_FLAGS_URI)/v1
        - name: IDENTITY_PROVIDERS_RESOURCE
          value: $(IDENTITY_PROVIDERS_URI)
        - name: IDENTITY_PROVIDERS_EXT_RESOURCE
          value: $(IDENTITY_PROVIDERS_V1_URI)
        - name: USERS_RESOURCE
          value: $(USERS_URI)
        - name: TENANTS_RESOURCE
          value: $(TENANTS_URI)
        - name: GROUPS_RESOURCE
          value: $(GROUPS_URI)/v1
        - name: KEYS_RESOURCE
          value: $(KEYS_URI)
        - name: CORS_RESOURCE
          value: $(CORS_URI)
        - name: NATS_URL
          value: $(NATS_URI)
        - name: NATS_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: API_KEYS_RESOURCE
          value: http://edge-auth-api-keys.default.svc.cluster.local:8080/v1
        - name: ENVIRONMENT
          value: example
        - name: REGION
          value: example
        - name: ROLLBAR_ENABLED
          value: "false"
        - name: NATS_ENABLED
          value: "true"
        - name: NATS_CLIENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG_LEVEL
          value: verbose
        image: qlik-docker-qsefe.bintray.io/edge-auth:2.59.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: http
        name: main
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: http
        volumeMounts:
        - mountPath: /run/secret/edge-auth
          name: edge-auth
          readOnly: true
      - env:
        - name: OIDC_REDIRECT_URI
          valueFrom:
            configMapKeyRef:
              key: oidcRedirectUri
              name: qliksense-edge-auth-configs-bfk4hk58k2
        - name: REDIRECTS
          value: $(OIDC_REDIRECT_URI)
        - name: PORT
          value: "32123"
        image: qlik-docker-qsefe.bintray.io/simple-oidc-provider:0.2.0
        imagePullPolicy: IfNotPresent
        name: oidc
        ports:
        - containerPort: 32123
          name: http
          protocol: TCP
      dnsConfig:
        options:
        - name: timeout
          value: "1"
      hostAliases:
      - hostnames:
        - elastic.example
        ip: 127.0.0.1
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - name: edge-auth
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          - key: tokenAuthPrivateKeyId
            path: jwtPublicKeys
          - key: cookiesKeys
            path: cookieKeys
          - key: loginStateKey
            path: loginStateKey
          secretName: qliksense-edge-auth-secrets-g54h4dhft5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: elastic-infra
    chart: nginx-ingress-1.24.1
    component: controller
    heritage: Tiller
    release: qliksense
  name: qliksense-elastic-infra-nginx-ingress-controller
  namespace: default
spec:
  minReadySeconds: 0
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: elastic-infra
      release: elastic-infra
  strategy: {}
  template:
    metadata:
      labels:
        app: elastic-infra
        component: controller
        qliksense-messaging-nats-client: "true"
        release: elastic-infra
    spec:
      containers:
      - args:
        - /nginx-ingress-controller
        - --default-backend-service=
        - --election-id=ingress-controller-leader
        - --ingress-class=qlik-nginx
        - --watch-namespace=default
        - --configmap=default/qliksense-elastic-infra-nginx-ingress-controller
        - --default-ssl-certificate=default/qliksense-elastic-infra-elastic-infra-tls-secret
        - --metrics-per-host=false
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: qlik-docker-qsefe.bintray.io/nginx-ingress-controller:1.4.9
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /wait-shutdown
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: main
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 10254
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
      dnsPolicy: ClusterFirst
      hostNetwork: false
      imagePullSecrets:
      - name: artifactory-docker-secret
      serviceAccountName: qliksense-elastic-infra-nginx-ingress
      terminationGracePeriodSeconds: 300
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: encryption
    chart: encryption-2.5.2
    heritage: Tiller
    release: qliksense
  name: qliksense-encryption
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: encryption
      release: encryption
  template:
    metadata:
      labels:
        app: encryption
        qliksense-messaging-nats-client: "true"
        release: encryption
    spec:
      containers:
      - env:
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: AUTH_JWT_AUD
          value: qlik.api.internal/encryption
        - name: ENABLE_ADMIN_ENDPOINT
          value: "false"
        - name: AUTH_ENABLED
          value: "true"
        - name: LOG_LEVEL
          value: info
        - name: BACKEND_TYPE
          value: loopback
        image: qlik-docker-qsefe.bintray.io/encryption:3.1.11
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
        name: main
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
        resources: null
      imagePullSecrets:
      - name: artifactory-docker-secret
      serviceAccountName: qliksense-encryption
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: engine
    chart: engine-1.54.9
    heritage: Tiller
    qlik.com/default: "true"
    release: qliksense
  name: qliksense-engine-default
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      app: engine
      qix-engine: qix-engine
      qlik.com/default: "true"
      release: engine
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        prometheus.io/job: engine
        prometheus.io/port: "9090"
        prometheus.io/scrape: "true"
      labels:
        app: engine
        metricsPort: "9090"
        qix-engine: qix-engine
        qix-engine-version: 12.521.0
        qlik.com/default: "true"
        qlik.com/engine-deployment-name: qliksense-engine-default
        qlik.com/engine-type: qliksense
        qliksense-messaging-nats-client: "true"
        release: engine
        servicePort: "9076"
    spec:
      containers:
      - args:
        - -S
        - AcceptEULA=$(ACCEPT_EULA)
        - -S
        - DocumentDirectory=/qlik/apps
        - -S
        - EnableRestartOnSessionStall=1
        - -S
        - PrometheusServicePort=9090
        - -S
        - DesktopPort=9076
        - -S
        - EnableNumericalAbbreviation=0
        - -S
        - HttpTrafficLogVerbosity=4
        - -S
        - TrafficLogVerbosity=0
        - -S
        - SystemLogVerbosity=4
        - -S
        - AuditLogVerbosity=0
        - -S
        - PerformanceLogVerbosity=0
        - -S
        - QixPerformanceLogVerbosity=0
        - -S
        - SessionLogVerbosity=4
        - -S
        - ScriptLogVerbosity=4
        - -S
        - SmartSearchQueryLogVerbosity=3
        - -S
        - SmartSearchIndexLogVerbosity=3
        - -S
        - SSEVerbosity=4
        - -S
        - EventBusLogVerbosity=4
        - -S
        - EnableExtServiceLogs=1
        - -S
        - ExternalServicesLogVerbosity=4
        - -S
        - BasePathPrefix=/api
        - -S
        - FolderConnectionInterface=0
        - -S
        - Autosave=1
        - -S
        - AutosaveInterval=5
        - -S
        - ValidateJsonWebTokens=2
        - -S
        - JWKSServiceUrl=$(KEYS_URI)/keys/qlik.api.internal
        - -S
        - JWTSignPrivateKeyPath=/etc/secrets/jwtPrivateKey
        - -S
        - JWTSignPrivateKeyId=$(TOKEN_AUTH_PRIVATE_KEY_ID)
        - -S
        - InternalTokenServiceUrl=$(TOKEN_AUTH_URI)/v1
        - -S
        - EnableRenewUserToken=1
        - -S
        - EnableABAC=1
        - -S
        - Gen3=1
        - -S
        - EnableFilePolling=1
        - -S
        - PersistenceMode=2
        - -S
        - EnableAccessControlTrace=1
        - -S
        - SystemRules=/etc/config/rules.yaml
        - -S
        - EnableDataConnectivityService=1
        - -S
        - EnableGrpcFileStreamConnector=1
        - -S
        - DataConnectorServiceUrl=$(DCAAS_URI)
        - -S
        - ConnectivityServiceUrl=$(QIX_DATA_CONNECTION_URI)
        - -S
        - ConnectorGetDataRetryCount=3
        - -S
        - ConnectorGetDataRetryIntervalInSeconds=10
        - -S
        - HostedFileRetryCount=3
        - -S
        - HostedFileRetryIntervalInSeconds=10
        - -S
        - SSEPlugin=GeoOperations,$(GEO_OPERATIONS_URI)
        - -S
        - LicenseServiceUrl=$(LICENSES_URI)
        - -S
        - LicenseCacheTimeoutSeconds=3600
        - -S
        - EnableSpaces=1
        - -S
        - SpacesServiceUrl=$(SPACES_URI)
        - -S
        - EnableEncryptData=1
        - -S
        - UseEncryptionService=1
        - -S
        - EncryptionServiceUrl=$(ENCRYPTION_URI)
        - -S
        - EnableFeatureFlagService=1
        - -S
        - FeatureFlagServiceUrl=$(FEATURE_FLAGS_URI)
        - -S
        - EnableGroupsService=1
        - -S
        - GroupsServiceUrl=$(GROUPS_URI)
        - -S
        - EnableAppExport=1
        - -S
        - EnableTempContentService=1
        - -S
        - TempContentServiceUrl=$(TEMPORARY_CONTENTS_URI)
        - -S
        - UseSTAN=1
        - -S
        - STANUrl=$(NATS_URI)
        - -S
        - STANCluster=$(NATS_STREAMING_CLUSTER_ID)
        - -S
        - STANUseToken=1
        - -S
        - STANMaxReconnect=60
        - -S
        - STANReconnectWait=2
        - -S
        - STANTimeout=10
        - -S
        - UseEventBus=1
        - -S
        - STANTrace=1
        - -S
        - EnvironmentName="example"
        - -S
        - RegionName="example"
        - -S
        - ShutdownWait=1
        - -S
        - EnableQvwRestImport=1
        - -S
        - SeedWithRandomDevice=1
        env:
        - name: ACCEPT_EULA
          valueFrom:
            configMapKeyRef:
              key: acceptEULA
              name: qliksense-configs-k5hgd4cf2c
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-engine-secrets-2cc229m58m
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: LICENSES_URI
          valueFrom:
            configMapKeyRef:
              key: licensesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: SPACES_URI
          valueFrom:
            configMapKeyRef:
              key: spacesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: GROUPS_URI
          valueFrom:
            configMapKeyRef:
              key: groupsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TEMPORARY_CONTENTS_URI
          valueFrom:
            configMapKeyRef:
              key: temporaryContentsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: ENCRYPTION_URI
          valueFrom:
            configMapKeyRef:
              key: encryptionUri
              name: qliksense-configs-k5hgd4cf2c
        - name: DCAAS_URI
          valueFrom:
            configMapKeyRef:
              key: dcaasUri
              name: qliksense-configs-k5hgd4cf2c
        - name: QIX_DATA_CONNECTION_URI
          valueFrom:
            configMapKeyRef:
              key: qixDataConnectionUri
              name: qliksense-configs-k5hgd4cf2c
        - name: GEO_OPERATIONS_URI
          valueFrom:
            configMapKeyRef:
              key: geoOperationsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: PROMETHEUS_PORT
          value: "9090"
        - name: GRPC_DNS_RESOLVER
          value: native
        image: qlik-docker-qsefe.bintray.io/engine:12.521.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 9076
          timeoutSeconds: 10
        name: main
        ports:
        - containerPort: 9076
        - containerPort: 9090
          name: metrics
        readinessProbe:
          httpGet:
            path: /health
            port: 9076
        resources: {}
        volumeMounts:
        - mountPath: /qlik/apps
          name: apps-storage
        - mountPath: /etc/secrets
          name: secrets-service2service
          readOnly: true
        - mountPath: /etc/config
          name: rules-volume
        - mountPath: /home/engine/Qlik/Sense
          name: storagepath
        - mountPath: /tmp
          name: tmpdir
      imagePullSecrets:
      - name: artifactory-docker-secret
      terminationGracePeriodSeconds: 30
      volumes:
      - name: apps-storage
        persistentVolumeClaim:
          claimName: qliksense-engine
      - name: secrets-service2service
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          secretName: qliksense-engine-secrets-2cc229m58m
      - configMap:
          defaultMode: 493
          name: engine-prestop-hook
          optional: true
        name: engine-prestop-hook
      - configMap:
          name: qliksense-engine-engine-rules-cm
        name: rules-volume
      - emptyDir: {}
        name: storagepath
      - emptyDir: {}
        name: tmpdir
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: engine
    chart: engine-1.54.9
    heritage: Tiller
    qlik.com/default: "true"
    release: qliksense
  name: qliksense-engine-qlikview-default
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      app: engine
      qix-engine: qix-engine
      qlik.com/default: "true"
      release: engine
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        prometheus.io/job: engine-qlikview
        prometheus.io/port: "9090"
        prometheus.io/scrape: "true"
      labels:
        app: engine
        metricsPort: "9090"
        qix-engine: qix-engine
        qix-engine-version: 12.521.0
        qlik.com/default: "true"
        qlik.com/engine-deployment-name: qliksense-engine-default
        qlik.com/engine-type: qlikview
        qliksense-messaging-nats-client: "true"
        release: engine
        servicePort: "9076"
    spec:
      containers:
      - args:
        - -S
        - AcceptEULA=$(ACCEPT_EULA)
        - -S
        - DocumentDirectory=/qlik/apps
        - -S
        - EnableRestartOnSessionStall=1
        - -S
        - PrometheusServicePort=9090
        - -S
        - DesktopPort=9076
        - -S
        - EnableNumericalAbbreviation=0
        - -S
        - HttpTrafficLogVerbosity=4
        - -S
        - TrafficLogVerbosity=0
        - -S
        - SystemLogVerbosity=4
        - -S
        - AuditLogVerbosity=0
        - -S
        - PerformanceLogVerbosity=0
        - -S
        - QixPerformanceLogVerbosity=0
        - -S
        - SessionLogVerbosity=4
        - -S
        - ScriptLogVerbosity=4
        - -S
        - SmartSearchQueryLogVerbosity=3
        - -S
        - SmartSearchIndexLogVerbosity=3
        - -S
        - SSEVerbosity=4
        - -S
        - EventBusLogVerbosity=4
        - -S
        - EnableExtServiceLogs=1
        - -S
        - ExternalServicesLogVerbosity=4
        - -S
        - BasePathPrefix=/api
        - -S
        - FolderConnectionInterface=0
        - -S
        - Autosave=1
        - -S
        - AutosaveInterval=5
        - -S
        - ValidateJsonWebTokens=2
        - -S
        - JWKSServiceUrl=$(KEYS_URI)/keys/qlik.api.internal
        - -S
        - JWTSignPrivateKeyPath=/etc/secrets/jwtPrivateKey
        - -S
        - JWTSignPrivateKeyId=$(TOKEN_AUTH_PRIVATE_KEY_ID)
        - -S
        - InternalTokenServiceUrl=$(TOKEN_AUTH_URI)/v1
        - -S
        - EnableRenewUserToken=1
        - -S
        - EnableABAC=1
        - -S
        - Gen3=1
        - -S
        - EnableFilePolling=1
        - -S
        - PersistenceMode=2
        - -S
        - EnableAccessControlTrace=1
        - -S
        - SystemRules=/etc/config/rules.yaml
        - -S
        - EnableDataConnectivityService=1
        - -S
        - EnableGrpcFileStreamConnector=1
        - -S
        - DataConnectorServiceUrl=$(DCAAS_URI)
        - -S
        - ConnectivityServiceUrl=$(QIX_DATA_CONNECTION_URI)
        - -S
        - ConnectorGetDataRetryCount=3
        - -S
        - ConnectorGetDataRetryIntervalInSeconds=10
        - -S
        - HostedFileRetryCount=3
        - -S
        - HostedFileRetryIntervalInSeconds=10
        - -S
        - SSEPlugin=GeoOperations,$(GEO_OPERATIONS_URI)
        - -S
        - LicenseServiceUrl=$(LICENSES_URI)
        - -S
        - LicenseCacheTimeoutSeconds=3600
        - -S
        - EnableSpaces=1
        - -S
        - SpacesServiceUrl=$(SPACES_URI)
        - -S
        - EnableEncryptData=1
        - -S
        - UseEncryptionService=1
        - -S
        - EncryptionServiceUrl=$(ENCRYPTION_URI)
        - -S
        - EnableFeatureFlagService=1
        - -S
        - FeatureFlagServiceUrl=$(FEATURE_FLAGS_URI)
        - -S
        - EnableGroupsService=1
        - -S
        - GroupsServiceUrl=$(GROUPS_URI)
        - -S
        - EnableAppExport=1
        - -S
        - EnableTempContentService=1
        - -S
        - TempContentServiceUrl=$(TEMPORARY_CONTENTS_URI)
        - -S
        - UseSTAN=1
        - -S
        - STANUrl=$(NATS_URI)
        - -S
        - STANCluster=$(NATS_STREAMING_CLUSTER_ID)
        - -S
        - STANUseToken=1
        - -S
        - STANMaxReconnect=60
        - -S
        - STANReconnectWait=2
        - -S
        - STANTimeout=10
        - -S
        - UseEventBus=1
        - -S
        - STANTrace=1
        - -S
        - EnvironmentName="example"
        - -S
        - RegionName="example"
        - -S
        - ShutdownWait=1
        - -S
        - EnableQvwRestImport=1
        - -S
        - SessionTimeoutSec=1200
        - -S
        - EnableWebSocketIdleManagement=1
        - -S
        - BasicQlikviewEnabled=1
        - -S
        - BundledContentsRootFolder=/usr/local/share/Bundled
        - -S
        - SkiaFontPaths=/usr/share/fonts
        env:
        - name: ACCEPT_EULA
          valueFrom:
            configMapKeyRef:
              key: acceptEULA
              name: qliksense-configs-k5hgd4cf2c
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-engine-secrets-2cc229m58m
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: LICENSES_URI
          valueFrom:
            configMapKeyRef:
              key: licensesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: SPACES_URI
          valueFrom:
            configMapKeyRef:
              key: spacesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: GROUPS_URI
          valueFrom:
            configMapKeyRef:
              key: groupsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TEMPORARY_CONTENTS_URI
          valueFrom:
            configMapKeyRef:
              key: temporaryContentsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: ENCRYPTION_URI
          valueFrom:
            configMapKeyRef:
              key: encryptionUri
              name: qliksense-configs-k5hgd4cf2c
        - name: DCAAS_URI
          valueFrom:
            configMapKeyRef:
              key: dcaasUri
              name: qliksense-configs-k5hgd4cf2c
        - name: QIX_DATA_CONNECTION_URI
          valueFrom:
            configMapKeyRef:
              key: qixDataConnectionUri
              name: qliksense-configs-k5hgd4cf2c
        - name: GEO_OPERATIONS_URI
          valueFrom:
            configMapKeyRef:
              key: geoOperationsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: PROMETHEUS_PORT
          value: "9090"
        - name: GRPC_DNS_RESOLVER
          value: native
        image: qlik-docker-qsefe.bintray.io/engine-qv:12.521.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 9076
          timeoutSeconds: 10
        name: main
        ports:
        - containerPort: 9076
        - containerPort: 9090
          name: metrics
        readinessProbe:
          httpGet:
            path: /health
            port: 9076
        resources: {}
        volumeMounts:
        - mountPath: /qlik/apps
          name: apps-storage
        - mountPath: /etc/secrets
          name: secrets-service2service
          readOnly: true
        - mountPath: /etc/config
          name: rules-volume
        - mountPath: /home/engine/Qlik/Sense
          name: storagepath
        - mountPath: /tmp
          name: tmpdir
      dnsConfig:
        options:
        - name: timeout
          value: "1"
        - name: single-request-reopen
      imagePullSecrets:
      - name: artifactory-docker-secret
      terminationGracePeriodSeconds: 30
      volumes:
      - name: apps-storage
        persistentVolumeClaim:
          claimName: qliksense-engine
      - name: secrets-service2service
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          secretName: qliksense-engine-secrets-2cc229m58m
      - configMap:
          defaultMode: 493
          name: engine-prestop-hook
          optional: true
        name: engine-prestop-hook
      - configMap:
          name: qliksense-engine-engine-rules-cm
        name: rules-volume
      - emptyDir: {}
        name: storagepath
      - emptyDir: {}
        name: tmpdir
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: eventing
    chart: eventing-1.2.0
    heritage: Tiller
    release: qliksense
  name: qliksense-eventing
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eventing
      release: eventing
  template:
    metadata:
      labels:
        app: eventing
        qliksense-messaging-nats-client: "true"
        release: eventing
    spec:
      containers:
      - env:
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: JWKS_ENDPOINT
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-eventing-secrets-bk4d6hb9d9
        - name: KEY_ID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: INTERNAL_TOKENS_RESOURCE
          value: $(TOKEN_AUTH_URI)/v1
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URL
          value: $(NATS_URI)
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: LOG_LEVEL
          value: debug
        - name: PRIVATE_KEY_FILE
          value: /run/secret/eventing/jwtPrivateKey
        - name: FEATURE_FLAGS_RESOURCE
          value: http://eventing-feature-flags:8080/v1
        - name: SUBSCRIPTIONS_RESOURCE
          value: http://eventing-subscriptions:8080/v1
        - name: USERS_RESOURCE
          value: http://eventing-users:8080/v1
        - name: SPACES_RESOURCE
          value: http://eventing-spaces:6080/v1
        - name: ROLLBAR_ENABLED
          value: "false"
        - name: NATS_ENABLED
          value: "true"
        - name: NATS_CLIENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: qlik-docker-qsefe.bintray.io/eventing:0.0.11
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: http
        name: main
        ports:
        - containerPort: 8080
        volumeMounts:
        - mountPath: /run/secret/eventing
          name: eventing-secret
          readOnly: true
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - name: eventing-secret
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          secretName: qliksense-eventing-secrets-bk4d6hb9d9
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: feature-flags
    chart: feature-flags-1.9.7
    heritage: Tiller
    release: qliksense
  name: qliksense-feature-flags
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: feature-flags
      release: feature-flags
  template:
    metadata:
      labels:
        app: feature-flags
        qliksense-messaging-nats-client: "true"
        release: feature-flags
    spec:
      containers:
      - env:
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: JWKS_ENDPOINT
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: FEATURES_FILE_PATH
          value: /etc/config/feature-flags/featuresConfig
        - name: FEATURES_POLL_INTERVAL
          value: "120000"
        - name: ENVIRONMENT
          value: example
        - name: REGION
          value: example
        - name: ROLLBAR_ENABLED
          value: "false"
        - name: LOG_LEVEL
          value: verbose
        image: qlik-docker-qsefe.bintray.io/feature-flags:1.2.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: http
        name: main
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /health
            port: http
        volumeMounts:
        - mountPath: /etc/config/feature-flags
          name: feature-flags
          readOnly: true
      dnsConfig:
        options:
        - name: timeout
          value: "1"
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - configMap:
          name: qliksense-feature-flags-configmap
        name: feature-flags
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: generic-links
    chart: generic-links-1.1.10
    heritage: Tiller
    release: qliksense
  name: qliksense-generic-links
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: generic-links
      release: generic-links
  template:
    metadata:
      labels:
        app: generic-links
        qliksense-messaging-nats-client: "true"
        release: generic-links
    spec:
      containers:
      - env:
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: MESSAGING_NATS_ADDR
          value: $(NATS_URI)
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: MESSAGING_STAN_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-generic-links-secrets-47558btchd
        - name: TOKEN_PRIVATE_KEY
          value: $(TOKEN_AUTH_PRIVATE_KEY)
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-generic-links-secrets-47558btchd
        - name: TOKEN_KID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_URI
          value: $(TOKEN_AUTH_URI)/v1/internal-tokens
        - name: COLLECTIONS_URI
          valueFrom:
            configMapKeyRef:
              key: collectionsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: ITEMS_URI
          value: $(COLLECTIONS_URI)
        - name: PDS_URI
          valueFrom:
            configMapKeyRef:
              key: pdsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: PDS_URL
          value: $(PDS_URI)
        - name: TERMINATION_GRACE_PERIOD
          value: "30"
        - name: LOG_LEVEL
          value: info
        - name: AUTH_ENABLED
          value: "true"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: MESSAGING_ENABLED
          value: "true"
        - name: MESSAGING_AUTH_ENABLED
          value: "true"
        - name: WEB_RISK_ENABLED
          value: "false"
        - name: ITEMS_ENABLED
          value: "true"
        - name: ACCESS_CONTROL_ENABLED
          value: "true"
        image: qlik-docker-qsefe.bintray.io/generic-links:0.15.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6080
        name: main
        ports:
        - containerPort: 6080
        readinessProbe:
          httpGet:
            path: /ready
            port: 6080
      imagePullSecrets:
      - name: artifactory-docker-secret
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: geo-operations
    chart: geo-operations-1.1.2
    heritage: Tiller
    release: qliksense
  name: qliksense-geo-operations
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: geo-operations
      release: geo-operations
  template:
    metadata:
      labels:
        app: geo-operations
        qliksense-messaging-nats-client: "true"
        release: geo-operations
    spec:
      containers:
      - env:
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATUREFLAG_URL
          value: $(FEATURE_FLAGS_URI)
        - name: LICENSES_URI
          valueFrom:
            configMapKeyRef:
              key: licensesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: LICENSES_URL
          value: $(LICENSES_URI)
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: EDGEAUTH_URL
          value: $(TOKEN_AUTH_URI)
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-geo-operations-secrets-22k6cd9cmc
        - name: JWT_PRIVATE_KEY
          value: $(TOKEN_AUTH_PRIVATE_KEY)
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-geo-operations-secrets-22k6cd9cmc
        - name: JWT_KEY_ID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: LOG_LEVEL
          value: debug
        - name: SERVER_URL
          value: https://ga.qlikcloud.com
        - name: SERVER_KEY
          value: ""
        - name: MAX_DATASET_ROWS
          value: ""
        - name: MAX_DATASET_BYTES
          value: ""
        - name: THROTTLING_MAX_CONCURRENT
          value: "3"
        - name: THROTTLING_MAX_QUEUE
          value: "5"
        - name: THROTTLING_TIMEOUT
          value: "180000"
        image: qlik-docker-qsefe.bintray.io/geo-operations-service:1.1.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 40072
        name: main
        ports:
        - containerPort: 50072
          name: grpc
          protocol: TCP
        - containerPort: 40072
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readiness
            port: 40072
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: groups
    chart: groups-1.4.19
    heritage: Tiller
    release: qliksense
  name: qliksense-groups
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: groups
      release: groups
  template:
    metadata:
      annotations:
        checksum/config: 38e0b9de817f645c4bec37c0d4a3e58baecccb040f5718dc069a72c7385a0bed
      labels:
        app: groups
        qliksense-messaging-nats-client: "true"
        release: groups
    spec:
      containers:
      - env:
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAGS_RESOURCE
          value: $(FEATURE_FLAGS_URI)
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: JWKS_ENDPOINT
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: INTERNAL_TOKENS_RESOURCE
          value: $(TOKEN_AUTH_URI)/v1
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-groups-secrets-ghcmmcc888
        - name: KEY_ID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID )
        - name: USERS_URI
          valueFrom:
            configMapKeyRef:
              key: usersUri
              name: qliksense-configs-k5hgd4cf2c
        - name: ENVIRONMENT
          value: example
        - name: REGION
          value: example
        - name: DATACENTER
          value: example
        - name: LOG_LEVEL
          value: verbose
        - name: ROLLBAR_ENABLED
          value: "false"
        - name: PRIVATE_KEY_FILE
          value: /run/secret/groups/jwtPrivateKey
        - name: USERS_RESOURCE
          value: $(USERS_URI)
        image: qlik-docker-qsefe.bintray.io/groups:1.2.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: http
        name: main
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: http
        volumeMounts:
        - mountPath: /run/secret/groups
          name: groups-secret
          readOnly: true
      dnsConfig:
        options:
        - name: timeout
          value: "1"
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - name: groups-secret
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          secretName: qliksense-groups-secrets-ghcmmcc888
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: hub
    chart: hub-1.3.49
    heritage: Tiller
    release: qliksense
  name: qliksense-hub
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hub
      release: hub
  template:
    metadata:
      labels:
        app: hub
        qliksense-messaging-nats-client: "true"
        release: hub
    spec:
      containers:
      - image: qlik-docker-qsefe.bintray.io/hub:1.0.123
        imagePullPolicy: IfNotPresent
        name: main
        ports:
        - containerPort: 3023
        resources:
          limits:
            cpu: "0"
            memory: "0"
          requests:
            cpu: "0"
            memory: "0"
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: identity-providers
    chart: identity-providers-1.8.1
    heritage: Tiller
    release: qliksense
  name: qliksense-identity-providers
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: identity-providers
      release: identity-providers
  template:
    metadata:
      labels:
        app: identity-providers
        qliksense-messaging-nats-client: "true"
        release: identity-providers
    spec:
      containers:
      - env:
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: JWKS_ENDPOINT
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-identity-providers-secrets-884m54tthg
        - name: KEY_ID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URL
          value: $(NATS_URI)
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: INTERNAL_TOKENS_RESOURCE
          value: $(TOKEN_AUTH_URI)/v1
        - name: LOG_LEVEL
          value: verbose
        - name: IDP_CONFIGS_FILE
          value: /run/secret/identity-providers/idpConfigs
        - name: ENVIRONMENT
          value: example
        - name: REGION
          value: example
        - name: ROLLBAR_ENABLED
          value: "false"
        - name: PRIVATE_KEY_FILE
          value: /run/secret/identity-providers/jwtPrivateKey
        - name: NATS_ENABLED
          value: "true"
        - name: NATS_CLIENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: qlik-docker-qsefe.bintray.io/identity-providers:0.2.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: http
        name: main
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: http
        volumeMounts:
        - mountPath: /run/secret/identity-providers
          name: identity-providers
          readOnly: true
      dnsConfig:
        options:
        - name: timeout
          value: "1"
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - name: identity-providers
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          - key: idpConfigs
            path: idpConfigs
          secretName: qliksense-identity-providers-secrets-884m54tthg
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: insights
    chart: insights-1.7.4
    heritage: Tiller
    release: qliksense
  name: qliksense-insights
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: insights
  template:
    metadata:
      labels:
        app: insights
        chart: insights-1.7.4
        heritage: Tiller
        qliksense-messaging-nats-client: "true"
        release: insights
    spec:
      containers:
      - env:
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: ENVIRONMENT
          value: k8s
        - name: NO_JWT_VALIDATION
          value: "false"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: JWT_AUTH_URL
          value: $(TOKEN_AUTH_URI)
        - name: COLLECTIONS_URI
          valueFrom:
            configMapKeyRef:
              key: collectionsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: COLLECTIONS_URL
          value: $(COLLECTIONS_URI)
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAG_URL
          value: $(FEATURE_FLAGS_URI)
        - name: ENCRYPTION_URI
          valueFrom:
            configMapKeyRef:
              key: encryptionUri
              name: qliksense-configs-k5hgd4cf2c
        - name: ENCRYPTION_URL
          value: $(ENCRYPTION_URI)
        - name: REPORTING_URI
          valueFrom:
            configMapKeyRef:
              key: reportingUri
              name: qliksense-configs-k5hgd4cf2c
        - name: REPORTING_URL
          value: $(REPORTING_URI)
        - name: PDS_URI
          valueFrom:
            configMapKeyRef:
              key: pdsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: PDS_URL
          value: $(PDS_URI)
        - name: FEATURE_FLAGS_URL
          value: http://insights-feature-flags:8080
        image: qlik-docker-qsefe.bintray.io/insights:2.0.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /health
            port: 9292
          initialDelaySeconds: 30
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 9292
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: /health
            port: 9292
          initialDelaySeconds: 30
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 400m
            memory: 600Mi
          requests:
            cpu: 250m
            memory: 300Mi
      imagePullPolicy: null
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: keys
    chart: keys-1.4.2
    heritage: Tiller
    release: qliksense
  name: qliksense-keys
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keys
      release: keys
  template:
    metadata:
      annotations:
        checksum/config: 9f71476f4dcda9c6f5d10568a77c58921ffbc6958702006dee5ad7a0709593bc
      labels:
        app: keys
        qliksense-messaging-nats-client: "true"
        release: keys
    spec:
      containers:
      - env:
        - name: KEY_FILES_PATH
          value: /etc/config/keys
        - name: ENVIRONMENT
          value: example
        - name: REGION
          value: example
        - name: ROLLBAR_ENABLED
          value: "false"
        image: qlik-docker-qsefe.bintray.io/keys:1.0.4
        imagePullPolicy: null
        livenessProbe:
          httpGet:
            path: /health
            port: http
        name: main
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /health
            port: http
        volumeMounts:
        - mountPath: /etc/config/keys
          name: keys
          readOnly: true
      dnsConfig:
        options:
        - name: timeout
          value: "1"
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - configMap:
          items:
          - key: qlik.api.internal-api-keys
            path: qlik.api.internal/api-keys
          - key: qlik.api.internal-audit
            path: qlik.api.internal/audit
          - key: qlik.api.internal-chronos-worker
            path: qlik.api.internal/chronos-worker
          - key: qlik.api.internal-collections
            path: qlik.api.internal/collections
          - key: qlik.api.internal-data-connections
            path: qlik.api.internal/data-connections
          - key: qlik.api.internal-data-engineering-exporter
            path: qlik.api.internal/data-engineering-exporter
          - key: qlik.api.internal-edge-auth
            path: qlik.api.internal/edge-auth
          - key: qlik.api.internal-engine
            path: qlik.api.internal/engine
          - key: qlik.api.internal-eventing
            path: qlik.api.internal/eventing
          - key: qlik.api.internal-generic-links
            path: qlik.api.internal/generic-links
          - key: qlik.api.internal-geo-operations
            path: qlik.api.internal/geo-operations
          - key: qlik.api.internal-groups
            path: qlik.api.internal/groups
          - key: qlik.api.internal-identity-providers
            path: qlik.api.internal/identity-providers
          - key: qlik.api.internal-insights
            path: qlik.api.internal/insights
          - key: qlik.api.internal-invite
            path: qlik.api.internal/invite
          - key: qlik.api.internal-licenses
            path: qlik.api.internal/licenses
          - key: qlik.api.internal-nl-parser
            path: qlik.api.internal/nl-parser
          - key: qlik.api.internal-notification-prep
            path: qlik.api.internal/notification-prep
          - key: qlik.api.internal-odag
            path: qlik.api.internal/odag
          - key: qlik.api.internal-onboarding
            path: qlik.api.internal/onboarding
          - key: qlik.api.internal-precedents
            path: qlik.api.internal/precedents
          - key: qlik.api.internal-qix-data-connection
            path: qlik.api.internal/qix-data-connection
          - key: qlik.api.internal-qix-data-reload
            path: qlik.api.internal/qix-data-reload
          - key: qlik.api.internal-qix-datafiles
            path: qlik.api.internal/qix-datafiles
          - key: qlik.api.internal-qix-sessions
            path: qlik.api.internal/qix-sessions
          - key: qlik.api.internal-quotas
            path: qlik.api.internal/quotas
          - key: qlik.api.internal-reporting
            path: qlik.api.internal/reporting
          - key: qlik.api.internal-resource-library
            path: qlik.api.internal/resource-library
          - key: qlik.api.internal-sharing
            path: qlik.api.internal/sharing
          - key: qlik.api.internal-spaces
            path: qlik.api.internal/spaces
          - key: qlik.api.internal-subscriptions
            path: qlik.api.internal/subscriptions
          - key: qlik.api.internal-temporary-contents
            path: qlik.api.internal/temporary-contents
          - key: qlik.api.internal-tenants
            path: qlik.api.internal/tenants
          - key: qlik.api.internal-users
            path: qlik.api.internal/users
          - key: qlik.api.internal-web-notifications
            path: qlik.api.internal/web-notifications
          name: qliksense-keys-configs-b6tgf6d5f8
        name: keys
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations: null
  labels:
    app: licenses
    chart: licenses-1.15.10
    heritage: Tiller
    release: qliksense
  name: qliksense-licenses
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: licenses
      release: licenses
  template:
    metadata:
      labels:
        app: licenses
        qliksense-messaging-nats-client: "true"
        release: licenses
    spec:
      containers:
      - args:
        - --election=licenses
        - --election-namespace=default
        - --http=0.0.0.0:4040
        image: qlik-docker-qsefe.bintray.io/leader-elector:1.3
        name: election
        ports:
        - containerPort: 4040
        resources: {}
      - env:
        - name: PDS_URI
          valueFrom:
            configMapKeyRef:
              key: pdsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-licenses-secrets-mcf69d8cb9
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-licenses-secrets-mcf69d8cb9
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_KID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: TOKEN_AUTH_URL
          value: $(TOKEN_AUTH_URI)/v1/internal-tokens
        - name: NATS_CLUSTER
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: NATS_SERVERS
          value: $(NATS_URI)
        - name: LICENSES_MONGODB_URI
          value: $(MONGODB_URI)
        - name: LICENSES_FEATURES_URI
          value: $(FEATURE_FLAGS_URI)/v1/features
        - name: JWKS_ENDPOINT
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: LICENSES_LOG_LEVEL
          value: info
        - name: LICENSES_SERIAL_NBR
          value: ""
        - name: LICENSES_CONTROL_NBR
          value: ""
        - name: LICENSE_KEY
          value: ""
        - name: LICENSES_TRACING_ENABLED
          value: "false"
        - name: LICENSES_TEST_MODE
          value: ""
        - name: IS_QCS
          value: ""
        - name: LICENSES_FEATURES_CACHE
          value: "false"
        - name: ASS_SYNC_ENABLED
          value: "true"
        - name: EXCESS_ENABLED
          value: "true"
        - name: NATS_ENABLED
          value: "true"
        - name: NATS_CONNECT_ATTEMPTS
          value: "3"
        - name: TOKEN_AUTH_ENABLED
          value: "true"
        - name: SQS_ENABLED
          value: "false"
        image: qlik-docker-qsefe.bintray.io/licenses:2.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 9200
        name: main
        ports:
        - containerPort: 9200
        readinessProbe:
          httpGet:
            path: /ready
            port: 9200
      dnsConfig:
        options:
        - name: timeout
          value: "1"
      imagePullSecrets:
      - name: artifactory-docker-secret
      serviceAccountName: qliksense-licenses
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: locale
    chart: locale-1.3.2
    heritage: Tiller
    release: qliksense
  name: qliksense-locale
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: locale
      release: locale
  template:
    metadata:
      labels:
        app: locale
        qliksense-messaging-nats-client: "true"
        release: locale
    spec:
      containers:
      - image: qlik-docker-qsefe.bintray.io/locale:1.0.5
        imagePullPolicy: null
        name: main
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: "0.2"
            memory: 150M
          requests:
            cpu: "0.05"
            memory: 50M
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: management-console
    chart: management-console-1.6.127
    heritage: Tiller
    release: qliksense
  name: qliksense-management-console
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: management-console
      release: management-console
  template:
    metadata:
      labels:
        app: management-console
        qliksense-messaging-nats-client: "true"
        release: management-console
    spec:
      containers:
      - env:
        - name: PRODUCT_INFO
          value: '{ "composition": { "deploymentEnvironment": "qsefe" } }'
        image: qlik-docker-qsefe.bintray.io/management-console:2.211.0
        imagePullPolicy: null
        livenessProbe:
          httpGet:
            path: /health
            port: 3024
          initialDelaySeconds: 15
          periodSeconds: 15
        name: main
        ports:
        - containerPort: 3024
        readinessProbe:
          httpGet:
            path: /health
            port: 3024
          initialDelaySeconds: 15
          periodSeconds: 15
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongodb
    chart: mongodb-4.5.0
    heritage: Tiller
    release: qliksense
  name: qliksense-mongodb
  namespace: default
spec:
  selector:
    matchLabels:
      app: mongodb
      release: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        chart: mongodb-4.5.0
        qliksense-messaging-nats-client: "true"
        release: mongodb
    spec:
      containers:
      - env:
        - name: MONGODB_USERNAME
          value: ""
        - name: MONGODB_DATABASE
          value: ""
        - name: MONGODB_ENABLE_IPV6
          value: "yes"
        image: docker.io/bitnami/mongodb:3.6.12
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - db.adminCommand('ping')
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 27017
          name: mongodb
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - db.adminCommand('ping')
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
        volumeMounts:
        - mountPath: /bitnami/mongodb
          name: data
      volumes:
      - emptyDir: {}
        name: data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nl-broker
    chart: nl-broker-1.1.3
    heritage: Tiller
    release: qliksense
  name: qliksense-nl-broker
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nl-broker
      release: nl-broker
  template:
    metadata:
      labels:
        app: nl-broker
        qliksense-messaging-nats-client: "true"
        release: nl-broker
    spec:
      containers:
      - env:
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: DPS_URI
          valueFrom:
            configMapKeyRef:
              key: dpsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: PARSER_URI
          valueFrom:
            configMapKeyRef:
              key: parserUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: DPS_ROUTING
          value: "true"
        image: qlik-docker-qsefe.bintray.io/nl-broker:1.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 30301
        name: main
        ports:
        - containerPort: 30301
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nl-parser
    chart: nl-parser-1.0.5
    heritage: Tiller
    release: qliksense
  name: qliksense-nl-parser
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nl-parser
      release: nl-parser
  template:
    metadata:
      labels:
        app: nl-parser
        qliksense-messaging-nats-client: "true"
        release: nl-parser
    spec:
      containers:
      - env:
        - name: LOG_LEVEL
          value: INFO
        - name: DPS_URI
          valueFrom:
            configMapKeyRef:
              key: dpsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: DPS_ROUTING_ENABLED
          value: "true"
        image: qlik-docker-qsefe.bintray.io/nl-parser:0.36.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 30302
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 30302
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: odag
    chart: odag-1.8.8
    heritage: Tiller
    release: qliksense
  name: qliksense-odag
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: odag
      release: odag
  template:
    metadata:
      labels:
        app: odag
        qliksense-messaging-nats-client: "true"
        release: odag
    spec:
      containers:
      - args:
        - --election=odag
        - --election-namespace=default
        - --http=0.0.0.0:4040
        image: qlik-docker-qsefe.bintray.io/leader-elector:1.3
        name: election
        ports:
        - containerPort: 4040
      - env:
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-odag-secrets-4c6t4gfggg
        - name: KEY_IDENTIFIER
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-odag-secrets-4c6t4gfggg
        - name: SELF_SIGNING_PRIVATE_KEY
          value: $(TOKEN_AUTH_PRIVATE_KEY)
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_ENABLED
          value: "true"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: EDGE_AUTH_URL
          value: $(TOKEN_AUTH_URI)
        - name: ENGINE_URI
          valueFrom:
            configMapKeyRef:
              key: engineUri
              name: qliksense-configs-k5hgd4cf2c
        - name: ENGINE_URL
          value: $(ENGINE_URI)
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URL
          value: $(NATS_URI)
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: QIX_SESSIONS_URI
          valueFrom:
            configMapKeyRef:
              key: qixSessionsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: QIX_SESSION_URL
          value: $(QIX_SESSIONS_URI)
        - name: QIX_DATA_RELOAD_URI
          valueFrom:
            configMapKeyRef:
              key: qixDataReloadUri
              name: qliksense-configs-k5hgd4cf2c
        - name: RELOAD_SERVICE_URL
          value: $(QIX_DATA_RELOAD_URI)
        - name: USERS_URI
          valueFrom:
            configMapKeyRef:
              key: usersUri
              name: qliksense-configs-k5hgd4cf2c
        - name: USER_SERVICE_URL
          value: $(USERS_URI)
        - name: COLLECTIONS_URI
          valueFrom:
            configMapKeyRef:
              key: collectionsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: COLLECTIONS_URL
          value: $(COLLECTIONS_URI)
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAG_URL
          value: $(FEATURE_FLAGS_URI)
        - name: ENCRYPTION_URI
          valueFrom:
            configMapKeyRef:
              key: encryptionUri
              name: qliksense-configs-k5hgd4cf2c
        - name: ENCRYPTION_URL
          value: $(ENCRYPTION_URI)
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: NATS_ENABLED
          value: "true"
        - name: NATS_CLIENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NATS_AUTH_ENABLED
          value: "true"
        - name: USE_INTERNAL_RELOAD
          value: "true"
        - name: RELOAD_WORKLOAD_TYPE
          value: odag
        image: qlik-docker-qsefe.bintray.io/odag:1.27.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: http
        name: main
        ports:
        - containerPort: 9098
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: http
        resources: {}
      imagePullSecrets:
      - name: artifactory-docker-secret
      serviceAccountName: qliksense-odag
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: policy-decisions
    chart: policy-decisions-1.8.17
    heritage: Tiller
    release: qliksense
  name: qliksense-policy-decisions
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: policy-decisions
      release: policy-decisions
  template:
    metadata:
      labels:
        app: policy-decisions
        qliksense-messaging-nats-client: "true"
        release: policy-decisions
    spec:
      containers:
      - env:
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: JWKS_ENDPOINT
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: SPACES_URI
          valueFrom:
            configMapKeyRef:
              key: spacesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: LICENSES_URI
          valueFrom:
            configMapKeyRef:
              key: licensesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: GROUPS_URI
          valueFrom:
            configMapKeyRef:
              key: groupsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: SPACES__URL
          value: $(SPACES_URI)
        - name: LICENSES__URL
          value: $(LICENSES_URI)
        - name: GROUPS__URL
          value: $(GROUPS_URI)/v1
        - name: RULESENGINE__ENABLE
          value: "true"
        - name: AUTHORIZATION__ENABLE
          value: "true"
        - name: SWAGGER__ENABLE
          value: "false"
        - name: JWTAUTHENTICATION__ENABLE
          value: "true"
        - name: SPACES__ENABLED
          value: "true"
        - name: REDIS__ENABLED
          value: "false"
        - name: RULESFROMFILE__ENABLED
          value: "false"
        - name: GROUPS__ENABLED
          value: "true"
        image: qlik-docker-qsefe.bintray.io/policy-decision-service:1.53.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 5080
        name: main
        ports:
        - containerPort: 5080
        readinessProbe:
          httpGet:
            path: /ready
            port: 5080
        volumeMounts: null
      dnsConfig:
        options:
        - name: timeout
          value: "1"
        - name: single-request-reopen
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: precedents
    chart: precedents-1.1.18
    heritage: Tiller
    release: qliksense
  name: qliksense-precedents
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: precedents
  template:
    metadata:
      labels:
        app: precedents
        qliksense-messaging-nats-client: "true"
        release: precedents
    spec:
      containers:
      - env:
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-precedents-secrets-4d86tc8h55
        - name: KEY_IDENTIFIER
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-precedents-secrets-4d86tc8h55
        - name: SELF_SIGNING_PRIVATE_KEY
          value: $(TOKEN_AUTH_PRIVATE_KEY)
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: EDGE_AUTH_URI
          value: $(TOKEN_AUTH_URI)
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URL
          value: $(NATS_URI)
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: ENGINEADDRESS
          value: http://qliksense-qix-sessions
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAG_URL
          value: $(FEATURE_FLAGS_URI)
        - name: SPACES_URI
          valueFrom:
            configMapKeyRef:
              key: spacesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: PORT
          value: "9054"
        - name: MODE
          value: elastic
        - name: ENGINEPORT
          value: "8080"
        - name: PROTOCOL
          value: http
        - name: SINGLE_PROCESS
          value: "true"
        - name: LOGLEVEL
          value: ""
        - name: GRPC
          value: "true"
        - name: CAYLEYSTART
          value: "true"
        - name: CAYLEYPORT
          value: "50051"
        - name: CAYLEYHTTPPORT
          value: "50052"
        - name: CAYLEYSTORE
          value: mongo
        - name: NATS_CLIENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: qlik-docker-qsefe.bintray.io/precedents:0.70.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: null
          httpGet:
            path: /health
            port: 9054
          periodSeconds: null
        name: main
        ports:
        - containerPort: 9054
        readinessProbe:
          failureThreshold: null
          httpGet:
            path: /ready
            port: 9054
          periodSeconds: null
        volumeMounts: null
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: qix-data-connection
    chart: qix-data-connection-1.7.14
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-data-connection
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qix-data-connection
      release: qix-data-connection
  template:
    metadata:
      labels:
        app: qix-data-connection
        qliksense-messaging-nats-client: "true"
        release: qix-data-connection
    spec:
      containers:
      - env:
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: JWKS_ENDPOINT
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: ENCRYPTION_URI
          valueFrom:
            configMapKeyRef:
              key: encryptionUri
              name: qliksense-configs-k5hgd4cf2c
        - name: E2S_ADDR
          value: $(ENCRYPTION_URI)
        - name: SPACES_URI
          valueFrom:
            configMapKeyRef:
              key: spacesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_URI
          value: $(TOKEN_AUTH_URI)
        - name: QIX_DATA_FILES_URI
          valueFrom:
            configMapKeyRef:
              key: qixDataFilesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: QIX_DATAFILES_URI
          value: $(QIX_DATA_FILES_URI)
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-qix-data-connection-secrets-6fgkhhmddf
        - name: KEY_ID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: MONGO_ENABLE_SSL_VALIDATE
          value: "true"
        - name: GET_USER_CONNECTIONS
          value: "true"
        - name: USER_ACCESS_CONTROL
          value: "true"
        - name: LOG_LEVEL
          value: info
        - name: ENABLE_JWT_AUTH
          value: "true"
        - name: ENABLE_CRYPTO
          value: "true"
        - name: ENABLE_DATAFILES
          value: "true"
        - name: ENABLE_GLOBAL_CONNECTIONS
          value: "false"
        - name: ENABLED_SPACE_CHECK
          value: "true"
        - name: ENABLE_SERVICEJWT
          value: "true"
        - name: PRIVATE_KEY
          value: /mnt/key/jwtPrivateKey
        - name: ENABLE_PROXY
          value: "false"
        - name: DATA_CONNECTIONS_URI
          value: http://qix-data-connection-data-connections:9011
        - name: FEATURE_FLAGS_URI
          value: http://qix-data-connection-feature-flags:8080
        image: qlik-docker-qsefe.bintray.io/qix-data-connection:1.12.19
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 9011
        name: main
        ports:
        - containerPort: 9011
          name: http
          protocol: TCP
        volumeMounts:
        - mountPath: /mnt/key
          name: qdc-storage
          readOnly: true
      dnsConfig:
        options:
        - name: timeout
          value: "1"
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - name: qdc-storage
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          secretName: qliksense-qix-data-connection-secrets-6fgkhhmddf
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: qix-data-reload
    chart: reloads-1.6.3
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-data-reload
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qix-data-reload
      release: qix-data-reload
  template:
    metadata:
      labels:
        app: qix-data-reload
        qliksense-messaging-nats-client: "true"
        release: qix-data-reload
    spec:
      containers:
      - env:
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: QIX_SESSIONS_URI
          valueFrom:
            configMapKeyRef:
              key: qixSessionsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: QIX_SESSION_URL
          value: $(QIX_SESSIONS_URI)
        - name: RELOAD_TASKS_URI
          valueFrom:
            configMapKeyRef:
              key: reloadTasksUri
              name: qliksense-configs-k5hgd4cf2c
        - name: RELOAD_TASKS_URL
          value: $(RELOAD_TASKS_URI)
        - name: NATS_SERVICE_NAME
          value: qliksense-messaging-nats-client
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-qix-data-reload-secrets-5g6f2db47d
        - name: SELF_SIGNING_PRIVATE_KEY
          value: $(TOKEN_AUTH_PRIVATE_KEY)
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-qix-data-reload-secrets-5g6f2db47d
        - name: KEY_IDENTIFIER
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: ENGINE_URI
          valueFrom:
            configMapKeyRef:
              key: engineUri
              name: qliksense-configs-k5hgd4cf2c
        - name: ENGINE_URL
          value: $(ENGINE_URI)
        - name: USERS_URI
          valueFrom:
            configMapKeyRef:
              key: usersUri
              name: qliksense-configs-k5hgd4cf2c
        - name: USERS_URL
          value: $(USERS_URI)
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: EDGE_AUTH_URL
          value: $(TOKEN_AUTH_URI)
        - name: LOG_LEVEL
          value: debug
        - name: MAX_SIMULTANEOUS_RELOADS
          value: "100"
        - name: AUTH_ENABLED
          value: "true"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: NATS_CLIENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NATS_AUTH_ENABLED
          value: "true"
        image: qlik-docker-qsefe.bintray.io/qix-data-reload:1.3.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
        name: main
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
        volumeMounts: null
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: qix-datafiles
    chart: qix-datafiles-1.10.21
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-datafiles
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qix-datafiles
      release: qix-datafiles
  template:
    metadata:
      labels:
        app: qix-datafiles
        qliksense-messaging-nats-client: "true"
        release: qix-datafiles
    spec:
      containers:
      - env:
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: PDS_URI
          valueFrom:
            configMapKeyRef:
              key: pdsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: USERS_URI
          valueFrom:
            configMapKeyRef:
              key: usersUri
              name: qliksense-configs-k5hgd4cf2c
        - name: SPACES_URI
          valueFrom:
            configMapKeyRef:
              key: spacesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATUREFLAGS_URI
          value: $(FEATURE_FLAGS_URI)
        - name: ENCRYPTION_URI
          valueFrom:
            configMapKeyRef:
              key: encryptionUri
              name: qliksense-configs-k5hgd4cf2c
        - name: JWKS_TOKEN_URI
          value: $(TOKEN_AUTH_URI)
        - name: POLICYDECISIONS_URI
          value: $(PDS_URI)
        - name: JWTAUTHENTICATION_JWKSURI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: NATS_CLUSTERID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-qix-datafiles-secrets-6h2k87b8bf
        - name: JWKS_TOKEN_KID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-qix-datafiles-secrets-6h2k87b8bf
        - name: JWKS_TOKEN_PRIVATE_KEY
          value: $(TOKEN_AUTH_PRIVATE_KEY)
        - name: TOKEN_AUTH_URL
          value: $(TOKEN_AUTH_URI)/v1/internal-tokens
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: JWTAUTHENTICATION_ENABLE
          value: "true"
        - name: DATA_DIRECTORY
          value: /qlik/qix-datafiles
        - name: NATS_ENABLED
          value: "true"
        - name: NATS_SPACEEVENTSENABLED
          value: "true"
        - name: NATS_CLIENTID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NATS_AUTHENABLED
          value: "true"
        image: qlik-docker-qsefe.bintray.io/qix-datafiles:1.0.11
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: http
        name: main
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 50051
          name: grpc
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /qlik/qix-datafiles
          name: qix-datafiles-storage
        - mountPath: /tmp
          name: tmpdir
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - name: qix-datafiles-storage
        persistentVolumeClaim:
          claimName: qliksense-qix-datafiles
      - emptyDir: {}
        name: tmpdir
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: qix-sessions
    chart: qix-sessions-4.0.10
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-sessions
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qix-sessions
      release: qix-sessions
  template:
    metadata:
      labels:
        app: qix-sessions
        qliksense-messaging-nats-client: "true"
        release: qix-sessions
    spec:
      containers:
      - command:
        - /qix-sessions
        - --logtostderr
        env:
        - name: TERMINATION_GRACE_PERIOD_SECONDS
          value: "30"
        - name: AUTH_ENABLED
          value: "true"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: MAX_SESSIONS
          value: "1000"
        - name: MAX_USERS
          value: "1000"
        - name: MAX_DOCUMENTS
          value: "50"
        - name: MAX_LOADED_DOCS
          value: "1000"
        - name: ENGINE_PORT
          value: "9076"
        - name: DYNAMIC_RELOAD_ENABLED
          value: "true"
        - name: RELOAD_ENGINE_GLOBAL_QUOTA
          value: "10"
        - name: RELOAD_ENGINE_TENANT_QUOTA
          value: "2"
        - name: ENABLE_PER_TENANT_DYNAMIC_POD_METRICS
          value: "false"
        - name: CLEAN_UP_INTERVAL_SECONDS
          value: "60"
        - name: CLEAN_UP_GRACE_PERIOD_SECONDS
          value: "120"
        - name: CLEAN_UP_SCHEDULING_GRACE_PERIOD_SECONDS
          value: "300"
        - name: CLEAN_UP_TIMEOUT_SECONDS
          value: "3600"
        - name: CLEAN_UP_ORPHAN_REPLICA_SETS
          value: "true"
        - name: KUBERNETES_CONTROLLER_ENABLED
          value: "true"
        - name: PROXY_ENABLED
          value: "true"
        - name: SELECTOR_TYPE
          value: deterministic
        - name: APP_SERVICE_READINESS_CHECK_ENABLED
          value: "true"
        - name: DEBUG_ENDPOINT_ENABLED
          value: "false"
        - name: DEPENDENCIES_HEALTHCHECK_TIMEOUT
          value: "5000"
        - name: MONITOR_UPDATE_FREQUENCY
          value: "30"
        - name: MONITOR_RETRIEVE_TIMEOUT
          value: "20"
        - name: MONITOR_ENGINE_ENTRY_EXPIRATION
          value: "60"
        - name: GET_ENGINE_HEALTH_TIMEOUT
          value: "10"
        - name: GET_ENGINE_HEALTH_RETRY_TIMEOUT
          value: "30"
        - name: GET_ENGINE_SESSIONS_TIMEOUT_SECONDS
          value: "20"
        - name: LOCK_MAX_RETRIES
          value: "25"
        - name: LOCK_RETRY_INTERVAL
          value: "50"
        - name: MESSAGING_ENABLED
          value: "false"
        - name: NATS_TOKEN_AUTH_ENABLED
          value: "true"
        - name: NATS_CONNECT_WAIT_SECONDS
          value: "30"
        - name: STAN_ENGINE_EVENT_CHANNEL
          value: system-events.engine.app
        - name: ENGINE_SELECTOR_QUERY_RESULT_EXPIRATION
          value: "30"
        - name: SELECTORS_CONFIGMAP_NAME
          value: qliksense-qix-sessions-configs-ht46k686dg
        - name: RELOAD_ENGINE_RESOURCE
          value: qliksense-engine-reload
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: REDIS_URI
          valueFrom:
            configMapKeyRef:
              key: redisUri
              name: qliksense-configs-k5hgd4cf2c
        - name: REDIS_ADDR
          value: $(REDIS_URI):6379
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: PDS_URI
          valueFrom:
            configMapKeyRef:
              key: pdsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_SERVER_ADDRESS
          value: $(NATS_URI)
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: STAN_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: ENGINE_URI
          valueFrom:
            configMapKeyRef:
              key: engineUri
              name: qliksense-configs-k5hgd4cf2c
        - name: APP_SERVICE_URI
          value: $(ENGINE_URI)
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-qix-sessions-secrets-dgbc4b449g
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-qix-sessions-secrets-dgbc4b449g
        image: qlik-docker-qsefe.bintray.io/qix-sessions:5.0.10
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 8080
        name: main
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
        volumeMounts:
        - mountPath: /secrets
          name: secrets
          readOnly: true
      imagePullSecrets:
      - name: artifactory-docker-secret
      initContainers:
      - command:
        - sh
        - -c
        - |-
          cat << 'EOF' > /secrets/service-key.yaml
          privateKey: "$(TOKEN_AUTH_PRIVATE_KEY)"
          kid: "$(TOKEN_AUTH_PRIVATE_KEY_ID)"
          authURL: "$(TOKEN_AUTH_URI)/v1/internal-tokens"
          algorithm: "ES384"
          issuer: "qlik.api.internal/qix-sessions"
          subject: "qix-sessions"
          EOF
        env:
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-qix-sessions-secrets-dgbc4b449g
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-qix-sessions-secrets-dgbc4b449g
        image: alpine
        name: secret
        volumeMounts:
        - mountPath: /secrets
          name: secrets
      serviceAccountName: qliksense-qix-sessions
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: qliksense-qix-sessions-configs-ht46k686dg
        name: qix-sessions-configs
      - emptyDir: {}
        name: secrets
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: qlikview-client
    chart: qlikview-client-1.0.12
    heritage: Tiller
    release: qliksense
  name: qliksense-qlikview-client
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qlikview-client
      release: qlikview-client
  template:
    metadata:
      labels:
        app: qlikview-client
        qliksense-messaging-nats-client: "true"
        release: qlikview-client
    spec:
      containers:
      - image: qlik-docker-qsefe.bintray.io/qlikview-client:12.50.2055
        imagePullPolicy: null
        livenessProbe:
          httpGet:
            path: /health
            port: 9003
        name: main
        ports:
        - containerPort: 9003
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: quotas
    chart: quotas-1.0.2
    heritage: Tiller
    release: qliksense
  name: qliksense-quotas
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: quotas
      release: quotas
  template:
    metadata:
      labels:
        app: quotas
        qliksense-messaging-nats-client: "true"
        release: quotas
    spec:
      containers:
      - env:
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-quotas-secrets-fb56dgm2mf
        - name: SERVICE_JWT_PRIVATE_KEY
          value: $(TOKEN_AUTH_PRIVATE_KEY)
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-quotas-secrets-fb56dgm2mf
        - name: SERVICE_JWT_KEY_ID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: INTERNAL_TOKENS_URI
          value: $(TOKEN_AUTH_URI)/v1/internal-tokens
        - name: LICENSES_URI
          valueFrom:
            configMapKeyRef:
              key: licensesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: SPACES_URI
          valueFrom:
            configMapKeyRef:
              key: spacesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TERMINATION_GRACE_PERIOD_SECONDS
          value: "30"
        - name: LOG_LEVEL
          value: debug
        - name: AUTH_ENABLED
          value: "true"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: LICENSES_ENABLED
          value: "false"
        - name: SPACES_ENABLED
          value: "false"
        image: qlik-docker-qsefe.bintray.io/quotas:0.7.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6080
        name: main
        ports:
        - containerPort: 6080
        readinessProbe:
          httpGet:
            path: /ready
            port: 6080
      imagePullSecrets:
      - name: artifactory-docker-secret
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-redis-slave
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      release: redis
      role: slave
  template:
    metadata:
      annotations:
        checksum/configmap: 88016243783c439a415638a4d70a65a54ad57ac84edf36193da1a7dbe92eb653
        checksum/health: 06e6752a24ef1c02de22f59c979b41a6f99b5e0bf613f8b6be0e4ed0a6405607
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      labels:
        app: redis
        chart: redis-6.0.1
        qliksense-messaging-nats-client: "true"
        release: redis
        role: slave
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
            export REDIS_MASTER_PASSWORD=$password_aux
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--requirepass" "${REDIS_PASSWORD}")
          ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
          ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
          /run.sh "${ARGS[@]}"
        env:
        - name: REDIS_REPLICATION_MODE
          value: slave
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_MASTER_PORT_NUMBER
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-secrets-d8d4b46kd4
        - name: REDIS_MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-secrets-d8d4b46kd4
        - name: REDIS_URI
          valueFrom:
            configMapKeyRef:
              key: redisUri
              name: qliksense-configs-k5hgd4cf2c
        - name: REDIS_MASTER_HOST
          value: $(REDIS_URI)
        image: docker.io/bitnami/redis:4.0.12
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local_and_master.sh
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local_and_master.sh
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources: null
        volumeMounts:
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
        - mountPath: /opt/bitnami/redis/etc
          name: config
      serviceAccountName: default
      volumes:
      - configMap:
          defaultMode: 493
          name: qliksense-redis-health
        name: health
      - configMap:
          name: qliksense-redis
        name: config
      - emptyDir: {}
        name: redis-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: reload-tasks
    chart: reload-tasks-1.5.0
    heritage: Tiller
    release: qliksense
  name: qliksense-reload-tasks
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reload-tasks
      release: reload-tasks
  template:
    metadata:
      labels:
        app: reload-tasks
        qliksense-messaging-nats-client: "true"
        release: reload-tasks
    spec:
      containers:
      - env:
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: CHRONOS_URI
          valueFrom:
            configMapKeyRef:
              key: chronosUri
              name: qliksense-configs-k5hgd4cf2c
        - name: QIX_DATA_RELOAD_URI
          valueFrom:
            configMapKeyRef:
              key: qixDataReloadUri
              name: qliksense-configs-k5hgd4cf2c
        - name: CHRONOS_ACTION_URI
          value: $(QIX_DATA_RELOAD_URI)/v1/scheduledreloads
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: AUTH_ENABLED
          value: "true"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: CHRONOS_AUTH_JWT_AUD
          value: qlik.api.internal/qix-data-reload
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: MAX_CONSECUTIVE_FAILURES
          value: "5"
        image: qlik-docker-qsefe.bintray.io/reload-tasks:0.1.14
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
        name: main
        ports:
        - containerPort: 8080
        volumeMounts: null
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: reporting
    release: qliksense
  name: qliksense-reporting
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reporting
  template:
    metadata:
      labels:
        app: reporting
        qliksense-messaging-nats-client: "true"
    spec:
      containers:
      - env:
        - name: PROXY_HOST
          value: 127.0.0.1
        - name: PROXY_PORT
          value: "8001"
        - name: PROXY_METRICS_PORT
          value: "8484"
        - name: ENGINE_HOST
          value: reporting-engine
        - name: ENGINE_PORT
          value: "9076"
        - name: CLIENT_HOST
          value: reporting-sense-client
        - name: CLIENT_PORT
          value: "9050"
        - name: FEATUREFLAGS_HOST
          value: reporting-feature-flags
        - name: FEATUREFLAGS_PORT
          value: "8080"
        - name: RESOURCELIBRARY_HOST
          value: reporting-resource-library
        - name: RESOURCELIBRARY_PORT
          value: "21068"
        - name: TEMPCONTENTS_HOST
          value: reporting-temporary-contents
        - name: TEMPCONTENTS_PORT
          value: "6080"
        - name: LOCALE_HOST
          value: reporting-locale
        - name: LOCALE_PORT
          value: "8080"
        image: qlik-docker-qsefe.bintray.io/reporting-proxy:2.1.0
        livenessProbe:
          httpGet:
            path: /health
            port: 8484
        name: rpr
        ports:
        - containerPort: 8001
      - args:
        - -l=DEBUG
        - -http-server-enable=true
        - -http-server-host=0.0.0.0
        - -http-server-port=9288
        image: qlik-docker-qsefe.bintray.io/reporting-web-renderer:2.15.0
        livenessProbe:
          httpGet:
            path: /health
            port: 9288
        name: rwr
      - args:
        - -l debug
        - -r 100000000
        - -s 100000000
        image: qlik-docker-qsefe.bintray.io/reporting-composer:3.0.1
        livenessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:52052
            - -service=cmp
          initialDelaySeconds: 10
        name: cmp
        readinessProbe:
          exec:
            command:
            - /bin/grpc_health_probe
            - -addr=:52052
            - -service=cmp
          initialDelaySeconds: 5
      - env:
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TEMPORARY_CONTENTS_URI
          valueFrom:
            configMapKeyRef:
              key: temporaryContentsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TEMP_CONTENTS_URL
          value: $(TEMPORARY_CONTENTS_URI)
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAGS_URL
          value: $(FEATURE_FLAGS_URI)
        - name: REDIS_URI_WITH_PORT
          valueFrom:
            configMapKeyRef:
              key: redisUriWithPort
              name: qliksense-configs-k5hgd4cf2c
        - name: REDIS_URL
          value: $(REDIS_URI_WITH_PORT)
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: QIX_SESSIONS_URI
          valueFrom:
            configMapKeyRef:
              key: qixSessionsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: SESSION_SERVICE_URL
          value: $(QIX_SESSIONS_URI)
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-reporting-secrets-44m2hb8gcg
        - name: KEY_ID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: NO_JWT_VALIDATION
          value: "false"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: ENGINE_PROXY_URL
          value: http://127.0.0.1:8001
        - name: CLIENT_URL
          value: http://127.0.0.1:8001
        - name: REDIS_ENCRYPTION
          value: "false"
        - name: RENDERER_QUERY_STRING
          value: ""
        - name: TOKEN_AUTH_ENABLED
          value: "true"
        - name: TOKEN_AUTH_PRIVATE_KEY
          value: |
            -----BEGIN EC PRIVATE KEY-----
            MIGkAgEBBDCmcxTS498lVlRKI+xGoyOalMcOLe2TtLxeOMrsNNxxgPgNDCjuRM3M
            6kyxm2NBQb6gBwYFK4EEACKhZANiAAQ6WOMCyqQxPEGI2vobHBujbuAI/Q21o4T5
            n4AR50hj3uc51xZpUjEEQ8kr/q5t9xinjZADUWwAq03vpNAXe85rSGoy5p/Sx4Fi
            ivKFvwJANtugvEoLUfgzTu9Z1inApEA=
            -----END EC PRIVATE KEY-----
        - name: TOKEN_AUTH_KID
          value: 7nHZ6rfrzzjxuhqByuIrLTWg4HnNzgMMQdURgUQKOvg
        - name: TOKEN_AUTH_URL
          value: $(TOKEN_AUTH_URI)/v1/internal-tokens
        - name: REDIS_AUTH_TOKEN
          value: $(REDIS_PASSWORD)
        image: qlik-docker-qsefe.bintray.io/reporting-service:5.3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /health
            port: 8282
          initialDelaySeconds: 15
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 8282
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: /health
            port: 8282
          initialDelaySeconds: 15
          timeoutSeconds: 5
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - name: reporting-secret
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          secretName: qliksense-reporting-secrets-44m2hb8gcg
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: resource-library
    chart: resource-library-1.10.3
    heritage: Tiller
    release: qliksense
  name: qliksense-resource-library
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: resource-library
      release: resource-library
  template:
    metadata:
      labels:
        app: resource-library
        qliksense-messaging-nats-client: "true"
        release: resource-library
    spec:
      containers:
      - env:
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: PDS_URI
          valueFrom:
            configMapKeyRef:
              key: pdsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-resource-library-secrets-592cgk8ttc
        - name: KEY_ID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: LOG_LEVEL
          value: verbose
        - name: MONGO_SSL
          value: "false"
        - name: MONGO_SSL_VALIDATE
          value: "false"
        - name: MONGO_CHECK_SERVER_IDENTITY
          value: "false"
        - name: RESOURCE_VOLUME
          value: /qlik-docker-qsefe.bintray.ioresources
        - name: QCS
          value: "false"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: PRIVATE_KEY_FILE
          value: /run/secret/resource-library/jwtPrivateKey
        - name: INTERNAL_TOKENS_RESOURCE
          value: $(TOKEN_AUTH_URI)/v1
        - name: NATS_SERVERS
          value: $(NATS_URI)
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: NATS_URL
          value: $(NATS_URI)
        - name: NATS_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: NATS_ENABLED
          value: "false"
        - name: NATS_CLIENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DISABLE_OCTET_STREAM_CHECK
          value: "false"
        image: qlik-docker-qsefe.bintray.io/resource-library:2.8.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: http
        name: main
        ports:
        - containerPort: 21068
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: http
        resources:
          limits:
            cpu: 0.25
            memory: 512Mi
          requests:
            cpu: 0.1
            memory: 128Mi
        volumeMounts:
        - mountPath: /qlik-docker-qsefe.bintray.ioresources
          name: resource-storage
        - mountPath: /run/secret/resource-library
          name: resource-library-secret
          readOnly: true
        - mountPath: /usr/src/app/webroot
          name: webroot-path
        - mountPath: /usr/src/app/resources
          name: resources-path
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - name: resource-library-secret
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          secretName: qliksense-resource-library-secrets-592cgk8ttc
      - name: resource-storage
        persistentVolumeClaim:
          claimName: qliksense-resource-library
      - emptyDir: {}
        name: webroot-path
      - emptyDir: {}
        name: resources-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sense-client
    chart: sense-client-1.5.33
    heritage: Tiller
    release: qliksense
  name: qliksense-sense-client
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sense-client
      release: sense-client
  template:
    metadata:
      labels:
        app: sense-client
        qliksense-messaging-nats-client: "true"
        release: sense-client
    spec:
      containers:
      - env:
        - name: PRODUCT_INFO
          value: '{ "composition": { "productName": "Qlik Cloud Services", "senseId":
            "QlikCloudServices", "releaseLabel": "-", "deploymentEnvironment": "qsefe"
            }, "components": [{ "component": "Client", "version": "6.264.0" }], "externalUrls":
            { "serverHelpBaseUrl": "http://help.qlik.com/en-US/cloud-services/csh/",
            "personalHelpBaseUrl": "http://help.qlik.com/en-US/cloud-services/csh/",
            "cloudBaseUrl": "https://qlikcloud.com/", "cloudUploadUrl": "https://qlikcloud.com/upload?",
            "personalUpgradeBase": "qlik.com/QlikSenseDesktopUpgrade", "personalUpgradeUrl":
            "http://qlik.com/QlikSenseDesktopUpgrade", "qlikWebPageUrl": "https://www.qlik.com/"
            } }'
        - name: ASSETS_URL
          value: ../resources/
        image: qlik-docker-qsefe.bintray.io/sense-client:6.264.0
        imagePullPolicy: IfNotPresent
        name: main
        ports:
        - containerPort: 9050
          name: http
          protocol: TCP
      imagePullSecrets:
      - name: artifactory-docker-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: spaces
    chart: spaces-2.8.1
    heritage: Tiller
    release: qliksense
  name: qliksense-spaces
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spaces
      release: spaces
  template:
    metadata:
      labels:
        app: spaces
        qliksense-messaging-nats-client: "true"
        release: spaces
    spec:
      containers:
      - env:
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: QUOTAS_URI
          valueFrom:
            configMapKeyRef:
              key: quotasUri
              name: qliksense-configs-k5hgd4cf2c
        - name: PDS_URI
          valueFrom:
            configMapKeyRef:
              key: pdsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_URI
          value: $(TOKEN_AUTH_URI)/v1/internal-tokens
        - name: ACCESS_CONTROL_PDS_URI
          value: $(PDS_URI)
        - name: GROUPS_URI
          valueFrom:
            configMapKeyRef:
              key: groupsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: GROUPS_CLIENT_URI
          value: $(GROUPS_URI)
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: MESSAGING_NATS_ADDR
          value: $(NATS_URI)
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: MESSAGING_STAN_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: TOKEN_AUTH_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKey
              name: qliksense-spaces-secrets-7786gtcc5t
        - name: TOKEN_PRIVATE_KEY
          value: $(TOKEN_AUTH_PRIVATE_KEY)
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-spaces-secrets-7786gtcc5t
        - name: TOKEN_KID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: FEATURES_RESOURCE
          value: $(FEATURE_FLAGS_URI)
        - name: TERMINATION_GRACE_PERIOD_SECONDS
          value: "30"
        - name: LOG_LEVEL
          value: info
        - name: ROLLBAR_ENABLED
          value: "false"
        - name: MESSAGING_ENABLED
          value: "true"
        - name: AUTH_ENABLED
          value: "true"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: ACCESS_CONTROL_ENABLED
          value: "true"
        - name: GROUPS_ENABLED
          value: "true"
        - name: QUOTAS_ENABLED
          value: "false"
        - name: FEATURE_FLAGS_ENABLED
          value: "true"
        image: qlik-docker-qsefe.bintray.io/spaces:1.10.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6080
        name: main
        ports:
        - containerPort: 6080
        readinessProbe:
          httpGet:
            path: /ready
            port: 6080
      imagePullSecrets:
      - name: artifactory-docker-secret
      terminationGracePeriodSeconds: 30
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: temporary-contents
    chart: temporary-contents-1.3.0
    heritage: Tiller
    release: qliksense
  name: qliksense-temporary-contents
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: temporary-contents
      release: temporary-contents
  template:
    metadata:
      labels:
        app: temporary-contents
        qliksense-messaging-nats-client: "true"
        release: temporary-contents
    spec:
      containers:
      - env:
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-temporary-contents-configs-hh228g6b5t
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-temporary-contents-secrets-fdhc6hkg9t
        - name: PDS_URI
          valueFrom:
            configMapKeyRef:
              key: pdsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: ENCRYPTION_URI
          valueFrom:
            configMapKeyRef:
              key: encryptionUri
              name: qliksense-configs-k5hgd4cf2c
        - name: AUTH_JWKS_URI
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: TOKEN_URI
          value: $(TOKEN_AUTH_URI)
        - name: KEY_ID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: TERMINATION_GRACE_PERIOD_SECONDS
          value: "30"
        - name: LOG_LEVEL
          value: info
        - name: AUTH_ENABLED
          value: "true"
        - name: AUTH_JWT_AUD
          value: qlik.api.internal
        - name: AUTH_JWT_ISS
          value: qlik.api.internal
        - name: TOKEN_AUTH_ENABLED
          value: "true"
        - name: TOKEN_AUTH_PRIVATE_KEY
          value: |
            -----BEGIN EC PRIVATE KEY-----
            MIGkAgEBBDACC8nAwmWgM7ozTUo3Kjsl6O5qbEj3OuXvF7BMbPirgevah1fuUs2l
            9xxOoQIMolugBwYFK4EEACKhZANiAAQOvV5QDwOi+osbqHWvOQTK5ShTaee5A/qm
            hKDg8pjHtKQLbCBaneu7YE4asIUYur47b17pkpTG9Xn9s4JMvzO685cKS90D4MiA
            tneIX5FJz3VRnGdTih0yMPC9fAqdsrI=
            -----END EC PRIVATE KEY-----
        - name: TOKEN_AUTH_KID
          value: ckZJbjOzS1zWHMV8XqX5Q_YKWx2A4FIuGM-Ac8PF4aA
        - name: TOKEN_AUTH_URL
          value: $(TOKEN_AUTH_URI)/v1/internal-tokens
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: FEATURES_RESOURCE
          value: $(FEATURE_FLAGS_URI)
        - name: ENCRYPTION_CLIENT
          value: encryption
        - name: ACCESS_CONTROL_ENABLED
          value: "true"
        - name: STORAGE_PATH
          value: /qlik/temp-contents
        image: qlik-docker-qsefe.bintray.io/temporary-contents:1.3.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6080
        name: main
        ports:
        - containerPort: 6080
        readinessProbe:
          httpGet:
            path: /ready
            port: 6080
        volumeMounts:
        - mountPath: /qlik/temp-contents
          name: temp-files
          readOnly: false
      imagePullSecrets:
      - name: artifactory-docker-secret
      terminationGracePeriodSeconds: 30
      volumes:
      - name: temporary-contents-secret
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          secretName: qliksense-temporary-contents-secrets-fdhc6hkg9t
      - name: temp-files
        persistentVolumeClaim:
          claimName: qliksense-temporary-contents
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: tenants
    chart: tenants-2.5.0
    heritage: Tiller
    release: qliksense
  name: qliksense-tenants
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tenants
      release: tenants
  template:
    metadata:
      annotations:
        checksum/config: 0a51d36b5411bc07e6f6226f35d9aa652106623c2688f2883afae0ac94a3153e
      labels:
        app: tenants
        qliksense-messaging-nats-client: "true"
        release: tenants
    spec:
      containers:
      - env:
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URL
          value: $(NATS_URI)
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: JWKS_ENDPOINT
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: USERS_URI
          valueFrom:
            configMapKeyRef:
              key: usersUri
              name: qliksense-configs-k5hgd4cf2c
        - name: USERS_RESOURCE
          value: $(USERS_URI)
        - name: LICENSES_URI
          valueFrom:
            configMapKeyRef:
              key: licensesUri
              name: qliksense-configs-k5hgd4cf2c
        - name: LICENSES_RESOURCE
          value: $(LICENSES_URI)/v1
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAGS_RESOURCE
          value: $(FEATURE_FLAGS_URI)
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: INTERNAL_TOKENS_RESOURCE
          value: $(TOKEN_AUTH_URI)/v1
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-tenants-secrets-4ht8k7dt62
        - name: KEY_ID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: BLACKLISTED_HOSTNAMES_FILE
          value: /etc/config/tenants/blacklistedHostnames
        - name: ENVIRONMENT
          value: example
        - name: DATACENTER
          value: example
        - name: LOG_LEVEL
          value: verbose
        - name: PRIVATE_KEY_FILE
          value: /run/secret/tenants/jwtPrivateKey
        - name: ROLLBAR_ENABLED
          value: "false"
        - name: NATS_ENABLED
          value: "true"
        - name: NATS_CLIENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NATS_TOKEN_AUTH_ENABLED
          value: "true"
        image: qlik-docker-qsefe.bintray.io/tenants:1.4.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: http
        name: main
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: http
        resources:
          limits:
            memory: 150M
          requests:
            cpu: 9m
            memory: 100M
        volumeMounts:
        - mountPath: /etc/config/tenants
          name: tenants
          readOnly: true
        - mountPath: /run/secret/tenants
          name: tenants-secret
          readOnly: true
      dnsConfig:
        options:
        - name: timeout
          value: "1"
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - configMap:
          name: qliksense-tenants-configmap
        name: tenants
      - name: tenants-secret
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          secretName: qliksense-tenants-secrets-4ht8k7dt62
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: users
    chart: users-1.8.9
    heritage: Tiller
    release: qliksense
  name: qliksense-users
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: users
      release: users
  template:
    metadata:
      labels:
        app: users
        qliksense-messaging-nats-client: "true"
        release: users
    spec:
      containers:
      - env:
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAGS_URI
          valueFrom:
            configMapKeyRef:
              key: featureFlagsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: FEATURE_FLAGS_RESOURCE
          value: $(FEATURE_FLAGS_URI)/v1
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              key: mongoDbUri
              name: qliksense-secrets-d8d4b46kd4
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: JWKS_ENDPOINT
          value: $(KEYS_URI)/keys/qlik.api.internal
        - name: TOKEN_AUTH_URI
          valueFrom:
            configMapKeyRef:
              key: tokenAuthUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: TOKEN_AUTH_PRIVATE_KEY_ID
          valueFrom:
            secretKeyRef:
              key: tokenAuthPrivateKeyId
              name: qliksense-users-secrets-26htc4k5c8
        - name: KEY_ID
          value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
        - name: MONGO_URI
          value: $(MONGODB_URI)
        - name: NATS_URL
          value: $(NATS_URI)
        - name: NATS_CLUSTER_ID
          value: $(NATS_STREAMING_CLUSTER_ID)
        - name: MONGO_SSL
          value: "false"
        - name: MONGO_SSL_VALIDATE
          value: "false"
        - name: MONGO_CHECK_SERVER_IDENTITY
          value: "false"
        - name: LOG_LEVEL
          value: verbose
        - name: ENVIRONMENT
          value: example
        - name: REGION
          value: example
        - name: PRIVATE_KEY_FILE
          value: /run/secret/users/jwtPrivateKey
        - name: NATS_ENABLED
          value: "true"
        - name: NATS_CLIENT_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ROLLBAR_ENABLED
          value: "false"
        - name: INTERNAL_TOKENS_RESOURCE
          value: $(TOKEN_AUTH_URI)/v1
        image: qlik-docker-qsefe.bintray.io/users:1.14.6
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: http
        name: main
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: http
        volumeMounts:
        - mountPath: /run/secret/users
          name: users-secret
          readOnly: true
      dnsConfig:
        options:
        - name: timeout
          value: "1"
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - name: users-secret
        secret:
          items:
          - key: tokenAuthPrivateKey
            path: jwtPrivateKey
          secretName: qliksense-users-secrets-26htc4k5c8
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas-redis-master
  namespace: default
spec:
  selector:
    matchLabels:
      app: redis
      release: dcaas
      role: master
  serviceName: qliksense-dcaas-redis-master
  template:
    metadata:
      annotations:
        checksum/configmap: 3774bf6f6c465e6b0553f05615bb11f248809b8337c28b34b923da5dbffd0152
        checksum/health: ad3cd6d291cdb6751df3d064f54badde5cebae2f4af664c7e286ad1ac32aa787
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      labels:
        app: redis
        chart: redis-6.0.1
        release: dcaas
        role: master
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--protected-mode" "no")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
          /run.sh ${ARGS[@]}
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-dcaas-secrets-kh87dtggd5
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: REDIS_PORT
          value: "6379"
        image: docker.io/bitnami/redis:4.0.12
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources: null
        volumeMounts:
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
          subPath: null
        - mountPath: /opt/bitnami/redis/etc
          name: config
      serviceAccountName: default
      volumes:
      - configMap:
          defaultMode: 493
          name: qliksense-dcaas-redis-health
        name: health
      - configMap:
          name: qliksense-dcaas-redis
        name: config
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: redis
        component: master
        heritage: Tiller
        release: dcaas
      name: redis-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: messaging
    chart: nats-2.4.1
    heritage: Tiller
    release: qliksense
  name: qliksense-messaging-nats
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: messaging
      release: messaging
  serviceName: qliksense-messaging-nats-headless
  template:
    metadata:
      annotations:
        checksum/secrets: c342e11631a51aefb3c64ef2d382ba0c7e0e8d2bf1cc1f3c01fe083bd5825ab1
        prometheus.io/port: "7777"
        prometheus.io/scrape: "false"
      labels:
        app: messaging
        chart: nats-2.4.1
        release: messaging
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: messaging
                  release: messaging
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - -c
        - /opt/bitnami/nats/gnatsd.conf
        - --jwt_users_file=/opt/bitnami/nats/users.json
        - --jwt_auth_url=$(KEYS_URI)/keys/qlik.api.internal
        command:
        - qnatsd
        env:
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        image: qlik-docker-qsefe.bintray.io/qnatsd:0.3.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: monitoring
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 4222
          name: client
        - containerPort: 6222
          name: cluster
        - containerPort: 8222
          name: monitoring
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: monitoring
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
        volumeMounts:
        - mountPath: /opt/bitnami/nats
          name: config
      - args:
        - -connz
        - -routez
        - -subz
        - -varz
        - http://localhost:8222
        image: qlik-docker-qsefe.bintray.io/prometheus-nats-exporter:0.3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 15
          timeoutSeconds: 5
        name: metrics
        ports:
        - containerPort: 7777
          name: metrics
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources: null
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - configMap:
          name: qliksense-messaging-nats
        name: config
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: messaging
    chart: nats-streaming-0.4.0
    heritage: Tiller
    release: qliksense
  name: qliksense-messaging-nats-streaming
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: messaging
      release: messaging
  serviceName: ""
  template:
    metadata:
      annotations:
        prometheus.io/port: "7777"
        prometheus.io/scrape: "false"
      labels:
        app: messaging
        chart: nats-streaming-0.4.0
        release: messaging
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: messaging
                  release: messaging
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - -cid
        - $(NATS_STREAMING_CLUSTER_ID)
        - -m
        - "8222"
        - -ns
        - $(NATS_URI)
        - -mc
        - "100"
        - -msu
        - "1000"
        - -mm
        - "1000000"
        - -mb
        - 900mb
        - -ma
        - 2h
        - -hbi
        - 10s
        - -hbt
        - 10s
        - -hbf
        - "5"
        - -clustered
        - --cluster_node_id
        - $(POD_NAME)
        - --cluster_peers
        - qliksense-messaging-nats-streaming-0,qliksense-messaging-nats-streaming-1,qliksense-messaging-nats-streaming-2
        - --cluster_log_path
        - /nats/qliksense-messaging-nats-streaming-cluster/$(POD_NAME)/raft
        - --store
        - file
        - --dir
        - /nats/qliksense-messaging-nats-streaming-cluster/$(POD_NAME)/data
        - --file_compact_enabled
        - --file_compact_frag
        - "50"
        - --file_compact_interval
        - "300"
        - --file_compact_min_size
        - "1048576"
        - --file_buffer_size
        - "2097152"
        - --file_crc
        - --file_crc_poly
        - "3988292384"
        - --file_sync
        - --file_slice_max_msgs
        - "0"
        - --file_slice_max_bytes
        - "67108931"
        - --file_slice_max_age
        - "0"
        - --file_fds_limit
        - "0"
        - --file_parallel_recovery
        - "1"
        - --user
        - $(USER)
        - --pass
        - $(PASSWORD)
        - -SD
        env:
        - name: KEYS_URI
          valueFrom:
            configMapKeyRef:
              key: keysUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_URI
          valueFrom:
            configMapKeyRef:
              key: natsUri
              name: qliksense-configs-k5hgd4cf2c
        - name: NATS_STREAMING_CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              key: natsStreamingClusterId
              name: qliksense-configs-k5hgd4cf2c
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: USER
          valueFrom:
            secretKeyRef:
              key: client-user
              name: qliksense-messaging-nats-secret
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              key: client-password
              name: qliksense-messaging-nats-secret
        image: qlik-docker-qsefe.bintray.io/nats-streaming:0.14.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: monitoring
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 8222
          name: monitoring
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: monitoring
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
        volumeMounts:
        - mountPath: /nats
          name: datadir
      - args:
        - -channelz
        - -serverz
        - http://localhost:8222
        image: qlik-docker-qsefe.bintray.io/prometheus-nats-exporter:0.3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 15
          timeoutSeconds: 5
        name: metrics
        ports:
        - containerPort: 7777
          name: metrics
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources: null
      imagePullSecrets:
      - name: artifactory-docker-secret
      volumes:
      - emptyDir: {}
        name: datadir
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: redis
    chart: redis-6.0.1
    heritage: Tiller
    release: qliksense
  name: qliksense-redis-master
  namespace: default
spec:
  selector:
    matchLabels:
      app: redis
      release: redis
      role: master
  serviceName: qliksense-redis-master
  template:
    metadata:
      annotations:
        checksum/configmap: 88016243783c439a415638a4d70a65a54ad57ac84edf36193da1a7dbe92eb653
        checksum/health: 06e6752a24ef1c02de22f59c979b41a6f99b5e0bf613f8b6be0e4ed0a6405607
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      labels:
        app: redis
        chart: redis-6.0.1
        release: redis
        role: master
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--requirepass" "${REDIS_PASSWORD}")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
          /run.sh ${ARGS[@]}
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redisPassword
              name: qliksense-secrets-d8d4b46kd4
        - name: REDIS_PORT
          value: "6379"
        image: docker.io/bitnami/redis:4.0.12
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: main
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_local.sh
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources: null
        volumeMounts:
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
          subPath: null
        - mountPath: /opt/bitnami/redis/etc
          name: config
      serviceAccountName: default
      volumes:
      - configMap:
          defaultMode: 493
          name: qliksense-redis-health
        name: health
      - configMap:
          name: qliksense-redis
        name: config
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: redis
        component: master
        heritage: Tiller
        release: redis
      name: redis-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    app: insights
    release: qliksense
  name: qliksense-insights-pruning
  namespace: default
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      labels:
        app: insights
    spec:
      template:
        metadata:
          labels:
            app: insights
        spec:
          containers:
          - env:
            - name: TOKEN_AUTH_URI
              valueFrom:
                secretKeyRef:
                  key: tokenAuthUri
                  name: qliksense-secrets-d8d4b46kd4
            - name: MONGODB_URI
              valueFrom:
                secretKeyRef:
                  key: mongoDbUri
                  name: qliksense-secrets-d8d4b46kd4
            - name: MONGO_URI
              value: $(MONGODB_URI)
            - name: PRUNE_ONLY
              value: "true"
            - name: ENVIRONMENT
              value: k8s
            image: qlik-docker-qsefe.bintray.io/insights:2.0.1
            imagePullPolicy: IfNotPresent
            name: main
          imagePullSecrets:
          - name: artifactory-docker-secret
          restartPolicy: Never
  schedule: 0 0 * * *
  successfulJobsHistoryLimit: 1
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    app: precedents
    release: qliksense
  name: qliksense-precedents-pruning
  namespace: default
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      labels:
        app: precedents
    spec:
      template:
        metadata:
          labels:
            app: precedents
        spec:
          containers:
          - env:
            - name: TOKEN_AUTH_URI
              valueFrom:
                secretKeyRef:
                  key: tokenAuthUri
                  name: qliksense-secrets-d8d4b46kd4
            - name: MONGODB_URI
              valueFrom:
                secretKeyRef:
                  key: mongoDbUri
                  name: qliksense-secrets-d8d4b46kd4
            - name: PRECEDENTS_URI
              valueFrom:
                configMapKeyRef:
                  key: precedentsUri
                  name: qliksense-precedents-configs-8hg85mf574
            - name: PRUNE_URL
              value: $(PRECEDENTS_URI)/v1/graph/prune
            - name: EDGE_AUTH_URI
              valueFrom:
                configMapKeyRef:
                  key: tokenAuthUri
                  name: qliksense-precedents-configs-8hg85mf574
            - name: TOKEN_AUTH_PRIVATE_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: tokenAuthPrivateKeyId
                  name: qliksense-precedents-secrets-4d86tc8h55
            - name: KEY_IDENTIFIER
              value: $(TOKEN_AUTH_PRIVATE_KEY_ID)
            - name: TOKEN_AUTH_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  key: tokenAuthPrivateKey
                  name: qliksense-precedents-secrets-4d86tc8h55
            - name: SELF_SIGNING_PRIVATE_KEY
              value: $(TOKEN_AUTH_PRIVATE_KEY)
            - name: PRUNE_ONLY
              value: "true"
            - name: MODE
              value: elastic
            - name: LOGLEVEL
              value: ""
            image: qlik-docker-qsefe.bintray.io/precedents:0.70.0
            imagePullPolicy: IfNotPresent
            name: main
          imagePullSecrets:
          - name: artifactory-docker-secret
          restartPolicy: Never
  schedule: 0 0 * * *
  successfulJobsHistoryLimit: 1
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: audit
    chart: audit-2.11.9
    heritage: Tiller
    release: qliksense
  name: qliksense-audit
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-audit
          servicePort: 6080
        path: /api/v1/audits
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/v1/(.*) /v1/$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: collections
    chart: collections-2.8.15
    heritage: Tiller
    release: qliksense
  name: qliksense-collections
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-collections
          servicePort: 8080
        path: /api/v1/collections
      - backend:
          serviceName: qliksense-collections
          servicePort: 8080
        path: /api/v1/items
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/dataprepservice/(.*) /$1 break;
      rewrite (?i)/dataprepservice/(.*) /$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: data-prep
    chart: data-prep-1.12.9
    heritage: Tiller
    release: qliksense
  name: qliksense-data-prep
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-data-prep
          servicePort: 9072
        path: /api/dataprepservice/v1/openapi
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-signin: https://$host/login?returnto=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/dcaas/(.*) /$1 break;
      rewrite (?i)/dcaas/(.*) /$1 break;
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
  labels:
    app: dcaas
    chart: dcaas-1.3.8
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-dcaas
          servicePort: 9026
        path: /dcaas
      - backend:
          serviceName: qliksense-dcaas
          servicePort: 9026
        path: /api/dcaas
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-signin: https://$host/login?returnto=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/customdata/64/?(.*) /$1 break;
    nginx.ingress.kubernetes.io/rewrite-target: /
  labels:
    app: dcaas-web
    chart: dcaas-web-1.1.64
    heritage: Tiller
    release: qliksense
  name: qliksense-dcaas-web
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-dcaas-web
          servicePort: 6384
        path: /customdata/64
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
  labels:
    app: edge-auth
    chart: edge-auth-4.22.11
    heritage: Tiller
    release: qliksense
  name: qliksense-edge-auth
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-edge-auth
          servicePort: 8080
        path: /login
      - backend:
          serviceName: qliksense-edge-auth
          servicePort: 8080
        path: /logout
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      set $host_and_uri $http_host$request_uri;
      if ( $host_and_uri ~* "^.{2049,}$" ) { return 414; }
      rewrite (?i)/api/(.*) /$1 break;
      more_clear_input_headers "X-Forwarded-Host" "X-Forwarded-For" "X-Forwarded-Proto" "X-Original-URI" "X-Original-URL";
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: edge-auth
    chart: edge-auth-4.22.11
    heritage: Tiller
    release: qliksense
  name: qliksense-edge-auth-api
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-edge-auth
          servicePort: 8080
        path: /api/v1/diagnose-claims
      - backend:
          serviceName: qliksense-edge-auth
          servicePort: 8080
        path: /api/v1/csrf-token
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers 'Access-Control-Allow-Origin: $http_origin';
      more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
      if ($request_method = 'OPTIONS') {
        more_set_headers 'Access-Control-Max-Age: 1728000';
        more_set_headers 'Content-Type: text/plain charset=UTF-8';
        more_set_headers 'Content-Length: 0';
        return 204;
      }
      return 404;
    nginx.ingress.kubernetes.io/proxy-body-size: 500m
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/server-snippet: |
      gzip on;
      gzip_min_length 10240;
      gzip_proxied expired no-cache no-store private auth;
      gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml;
      gzip_disable msie6;
      server_tokens off;

      # Do not store anything in cache unless specific location overrides
      more_set_headers "Cache-Control: no-store" "Pragma: no-cache";

      # Enforce HSTS
      more_set_headers "Strict-Transport-Security: max-age=15724800; includeSubDomains";

      # The following custom auth block is required so we can have a reliable auth path for engine load balancing (below)
      location = /_external-auth-engine {
        internal;

        proxy_pass_request_body     off;
        proxy_set_header            Content-Length "";
        proxy_set_header            X-Forwarded-Proto "";

        proxy_set_header            Host                    edge-auth.default.svc.cluster.local;
        proxy_set_header            X-Original-URL          $scheme://$http_host$request_uri;
        proxy_set_header            X-Original-Method       $request_method;
        proxy_set_header            X-Sent-From             "nginx-ingress-controller";
        proxy_set_header            X-Real-IP               $remote_addr;

        proxy_set_header            X-Forwarded-For        $remote_addr;

        proxy_set_header            X-Auth-Request-Redirect $request_uri;

        proxy_buffering                         off;
        proxy_buffer_size                       4k;
        proxy_buffers                           4 4k;
        proxy_request_buffering                 on;

        proxy_http_version          1.1;
        proxy_ssl_server_name       on;
        proxy_pass_request_headers  on;

        client_max_body_size        "1m";

        # Pass the extracted client certificate to the auth provider

        set $target http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth;
        proxy_pass $target;
      }

      # The following is for dataprepservice as a load balancer
      location = /_dataprepservice_special {
        internal;

        proxy_set_header            Content-Type "application/json";

        set $target http://qliksense-data-prep.default.svc.cluster.local:9072/session/route;
        proxy_pass $target;
      }

      # This block is for app open websocket upgrade requests. It calls qix-sessions to get an engine
      # session and then proxies the websocket upgrade to the returned engine.
      #
      # Here are some example paths that would match this location.
      #   /app/%3Ftransient%3D
      #   /app/a774322d-8230-4688-b459-3e037d53a560
      #   /app/a774322d-8230-4688-b459-3e037d53a560/identity/36fec6a7-61c5-41ba-b9f5-76997a53a82c
      #   /app/SessionApp_a774322d-8230-4688-b459-3e037d53a560
      #   /app/SessionApp_a774322d-8230-4688-b459-3e037d53a560/identity/36fec6a7-61c5-41ba-b9f5-76997a53a82c
      #   /qvapp/a774322d-8230-4688-b459-3e037d53a560
      #   /qvapp/a774322d-8230-4688-b459-3e037d53a560/identity/36fec6a7-61c5-41ba-b9f5-76997a53a82c
      #
      # Note that location does not contain the query string (e.g. ?example1=true&example2=yes).
      # This golang regex tester is good for testing changes to the localtion regex: https://regex101.com/.
      #
      # ^/app/(SessionApp_)?([a-zA-Z0-9\-]+|%3Ftransient%3D)(/identity/)?([a-zA-Z0-9\-]+)?.*|^/(qv)app/([a-zA-Z0-9\-])(/identity/)?([a-zA-Z0-9\-]+)?.*
      #
      location ~ ^/(qv)?app/(SessionApp_)?([a-zA-Z0-9\-]+|%3Ftransient%3D)(/identity/)?([a-zA-Z0-9\-]+)?.* {
        set $engine_path '';

        set $session_app $2;
        set $app_id $3;
        set $session_id $5;
        set $qv $1;

        set $auth_path http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth;
        set $qix_session_path http://qliksense-qix-sessions.default.svc.cluster.local:8080/v1/engine-sessions;

        access_by_lua_block {
          local http = require "resty.http"
          local httpc = http.new()
          local headers = {}

          -- Set specific headers
          headers["Content-Length"] = ""
          headers["X-Forwarded-Proto"] = ""
          headers["X-Original-URL"] = string.format("%s://%s%s", ngx.var.scheme, ngx.var.http_host, ngx.var.request_uri)
          headers["X-Original-Method"] = ngx.var.request_method
          headers["X-Original-Origin"] = ngx.var.http_origin
          headers["X-Sent-From"] = "nginx-ingress-controller"
          headers["X-Real-IP"] = ngx.var.the_real_ip
          headers["X-Forwarded-For"] = ngx.var.the_real_ip
          headers["X-Auth-Request-Redirect"] = ngx.var.request_uri
          headers["Host"] = "edge-auth.default.svc.cluster.local"
          headers["qlik-web-integration-id"] = ngx.req.get_uri_args()["qlik-web-integration-id"]

          -- Copy incoming headers
          for h,v in pairs(ngx.req.get_headers()) do
              headers[h] = v
          end

          -- Authenticate
          local authres, err = httpc:request_uri(ngx.var.auth_path, { headers = headers })

          if err then
            ngx.log(ngx.ERR, "Error calling edge_auth - " .. tostring(err))
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          if authres.status == ngx.HTTP_UNAUTHORIZED or authres.status == ngx.HTTP_FORBIDDEN then
            ngx.log(ngx.NOTICE, authres.status .. " received from edge_auth")
            ngx.exit(authres.status)
          end

          if authres.status ~= ngx.HTTP_OK then
            ngx.log(ngx.ERR, "Didn't receive valid responseCode from edge-auth")
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          -- Set upstream Authorization header
          ngx.req.set_header("Authorization", authres.headers["Authorization"])

          -- Find upstream engine

          local engReqBody = "{\"appId\":\"" .. ngx.var.app_id .. "\","

          if string.len(ngx.var.session_id) > 0 then
            engReqBody = engReqBody .. "\"id\":\"" .. ngx.var.session_id .. "\","
          end

          if "qv" == ngx.var.qv then
            engReqBody = engReqBody .. "\"workloadType\":\"qv-analyse\"}"
          elseif "SessionApp_" == ngx.var.session_app then
            engReqBody = engReqBody .. "\"workloadType\":\"sessionapp\"}"
          else
            engReqBody = engReqBody .. "\"workloadType\":\"analyse\"}"
          end

          local reqHeaders = {}
          reqHeaders["Content-Type"] = "application/json"
          reqHeaders["Authorization"] = authres.headers["Authorization"]

          local qix_session_res, qix_session_err = httpc:request_uri(ngx.var.qix_session_path, {
            method = "POST",
            headers = reqHeaders,
            body = engReqBody
          })

          if qix_session_err then
            ngx.log(ngx.ERR, "Error calling qix_session " .. tostring(qix_session_err))
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          if qix_session_res.status ~= ngx.HTTP_CREATED then
            ngx.log(ngx.ERR, "Error from qix_session request = " .. qix_session_res.status)
            ngx.exit(qix_session_res.status)
          end

          local cjson = require "cjson";
          local qix_sessions_route_data = cjson.decode(qix_session_res.body);

          local engine_path = ""
          if qix_sessions_route_data.links.engineUrl.href then
            engine_path = qix_sessions_route_data.links.engineUrl.href .. "/TTL/120"
          else
            ngx.log(ngx.ERR, "Invalid or empty engine path received from qix-sessions")
            return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          local app_placement_type = qix_sessions_route_data.placementDetails.appPlacementType
          local selectors = qix_sessions_route_data.placementDetails.selectors
          local selector_used = qix_sessions_route_data.placementDetails.selectorUsed
          local from_cache = tostring(qix_sessions_route_data.fromCache)
          local resp_value = ""

          local parsed_selectors = "[";
          if (type(selectors)) == "table" then
            for i,selector in ipairs(selectors) do
              parsed_selectors = parsed_selectors .. "\"" .. selector .. "\","
            end
            parsed_selectors = parsed_selectors:sub(1, -2)
          end
          parsed_selectors = parsed_selectors .. "]"


          if app_placement_type and parsed_selectors and selector_used then
            resp_value = "{\"appPlacementType\":\"" .. app_placement_type .. "\"," .. "\"selectors\":" .. parsed_selectors .. "," .. "\"selectorUsed\":\"" .. selector_used .. "\"," .. "\"fromCache\":\"" .. from_cache .. "\"}"
            ngx.header["Placement-Details"] = resp_value
          end

          ngx.var.engine_path = engine_path
          ngx.log(ngx.NOTICE, "forwarding request to url " .. engine_path)
        }

        proxy_set_header X-Real-IP $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Port 80;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Upgrade $http_upgrade;
        proxy_connect_timeout 7d;
        proxy_read_timeout 7d;
        proxy_send_timeout 7d;
        proxy_http_version 1.1;
        proxy_pass $engine_path;
      }

      # This block controls the data-prep websocket LB and proxying logic
      location ~ ^/dataprepservice/app/(.+) {
        set $dps_path '';

        set $app_id $1;

        access_by_lua_block {
          local authres = ngx.location.capture("/_external-auth-engine")

          if authres.status == ngx.HTTP_UNAUTHORIZED or authres.status == ngx.HTTP_FORBIDDEN then
            ngx.log(ngx.NOTICE, authres.status .. " received from edge_auth")
            ngx.exit(authres.status)
          end

          if authres.status ~= ngx.HTTP_OK then
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          ngx.req.set_header("Authorization", authres.header["Authorization"])

          local reqBody = "{\"appId\":\"" .. ngx.var.app_id .. "\"}"
          local dps_res = ngx.location.capture("/_dataprepservice_special", {
            method = ngx.HTTP_POST,
            body = reqBody
          })

          if dps_res.status ~= ngx.HTTP_OK then
            ngx.log(ngx.ERR, "Error from dataprepservice route request = " .. dps_res.status)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          local cjson = require "cjson";
          local dps_route_data = cjson.decode(dps_res.body);
          local dps_path = dps_route_data.url
          if not dps_path then
            ngx.log(ngx.ERR, "Invalid or empty path received from dataprepservice")
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          ngx.var.dps_path = string.format("%s/app/%s", dps_path, ngx.var.app_id)
          ngx.log(ngx.ERR, "Forwarding dataprepservice WS request to url " .. ngx.var.dps_path)
        }

        proxy_set_header X-Real-IP $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Port 80;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Upgrade $http_upgrade;
        proxy_connect_timeout 7d;
        proxy_read_timeout 7d;
        proxy_send_timeout 7d;
        proxy_http_version 1.1;
        proxy_pass $dps_path;
      }

      # This block controls the data-prep REST API LB and proxying logic
      location ~ ^/api/dataprepservice/v1/apps/([^/]*)/(.*) {
        set $dps_path '';
        set $auth_path http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth;
        set $dps_route_path http://qliksense-data-prep.default.svc.cluster.local:9072/session/route;

        set $app_id $1;
        set $end_point $2;

        set $redir https://$best_http_host$request_uri;
        # enforce ssl on server side
        access_by_lua_block {

          local function redirect_to_https()
            return ngx.var.pass_access_scheme == "http" and (ngx.var.scheme == "http" or ngx.var.scheme == "https")
          end

          if redirect_to_https() then
            ngx.redirect(ngx.var.redir, ngx.HTTP_MOVED_PERMANETLY)
          end

          local http = require "resty.http"
          local httpc = http.new()

          local random = math.random

          local function guid()
            local template ='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
            return string.gsub(template, '[xy]', function (found)
              local gen = (found == 'x') and random(0, 0xf) or random(8, 0xb)
              return string.format('%x', gen)
            end)
          end

          local headers = {}
          for h,v in pairs(ngx.req.get_headers()) do
            headers[h] = v
          end

          headers["Host"] = "edge-auth.default.svc.cluster.local"
          headers["X-Original-URL"] = string.format("%s://%s%s", ngx.var.scheme, ngx.var.http_host, ngx.var.request_uri)
          headers["X-Original-Method"] = ngx.var.request_method
          headers["X-Sent-From"] = "nginx-ingress-controller"
          headers["X-Real-IP"] = ngx.var.the_real_ip
          headers["X-Forwarded-For"] = ngx.var.the_real_ip
          headers["X-Auth-Request-Redirect"] = ngx.var.request_uri
          headers["X-DataPrep-Lua-Request-ID"] = guid();

          local res, err = httpc:request_uri(ngx.var.auth_path, {
              headers = headers,
              method = "GET",
              version = 1.1,
              keepalive_timeout = 60,
              keepalive_pool = 10 })

          if err then
            ngx.log(ngx.ERR, "Error calling edge_auth " .. tostring(err))
            local hdrStr = ""
            for key,value in pairs(headers) do
              if string.lower(key) ~= "cookie"  then
                hdrStr = hdrStr .. key .. ":" .. value .. " "
              end
            end
            ngx.log(ngx.ERR, "Auth Headers " .. hdrStr)
            ngx.log(ngx.ERR, "Edge Auth URI " .. ngx.var.auth_path)

            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          if res.status == ngx.HTTP_UNAUTHORIZED or res.status == ngx.HTTP_FORBIDDEN then
            ngx.log(ngx.NOTICE, res.status .. " received from edge_auth")
            ngx.exit(res.status)
          end

          if res.status ~= ngx.HTTP_OK then
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          ngx.req.set_header("Authorization", res.headers["Authorization"])

          local reqHeaders = {}
          reqHeaders["Content-Type"] = "application/json"
          reqHeaders["Authorization"] = res.headers["Authorization"]

          local reqBody = "{\"appId\":\"" .. ngx.var.app_id .. "\"}"

          local dps_res, dps_err = httpc:request_uri(ngx.var.dps_route_path, {
            method = "POST",
            headers = reqHeaders,
            body = reqBody
          })
          if dps_err then
            ngx.log(ngx.ERR, "Error calling dataprepservice " .. tostring(dps_err))
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end
          if dps_res.status ~= ngx.HTTP_OK then
            ngx.log(ngx.ERR, "Error from dataprepservice route request = " .. dps_res.status)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          local cjson = require "cjson";
          local dps_route_data = cjson.decode(dps_res.body);
          local dps_path = dps_route_data.url
          if not dps_path then
            ngx.log(ngx.ERR, "Invalid or empty path received from dataprepservice")
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          local query_params = ngx.encode_args(ngx.req.get_uri_args())
          if query_params then
            query_params = "?" .. query_params
          end

          ngx.var.dps_path = string.format("%s/v1/apps/%s/%s%s", dps_path, ngx.var.app_id, ngx.var.end_point, query_params)
          ngx.log(ngx.NOTICE, "Forwarding dataprepservice request to url " .. ngx.var.dps_path)
        }

        proxy_set_header X-Real-IP $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Port 80;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_connect_timeout 7d;
        proxy_read_timeout 7d;
        proxy_send_timeout 7d;
        proxy_pass $dps_path;
      }
    nginx.org/client-max-body-size: 500m
  labels:
    app: elastic-infra
    chart: elastic-infra-2.23.0
    heritage: Tiller
    release: qliksense
  name: qliksense-elastic-infra-elastic-infra-api-404
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-elastic-infra-nginx-ingress-controller
          servicePort: 80
        path: /api
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
    nginx.ingress.kubernetes.io/proxy-body-size: 500m
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.org/client-max-body-size: 500m
  labels:
    app: engine
    chart: engine-1.54.9
    heritage: Tiller
    release: qliksense
  name: qliksense-engine
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-engine
          servicePort: 9076
        path: /api/v1/apps/import
      - backend:
          serviceName: qliksense-engine
          servicePort: 9076
        path: /api/v1/apps
      - backend:
          serviceName: qliksense-engine
          servicePort: 9076
        path: /api/engine/openapi
      - backend:
          serviceName: qliksense-engine
          servicePort: 9076
        path: /api/engine/openapi/rpc
      - backend:
          serviceName: qliksense-engine
          servicePort: 9076
        path: /api/engine/asyncapi
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
  labels:
    app: eventing
    chart: eventing-1.2.0
    heritage: Tiller
    release: qliksense
  name: qliksense-eventing
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-eventing
          servicePort: 8080
        path: /api/v1/events
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      set $host_and_uri $http_host$request_uri;
      if ( $host_and_uri ~* "^.{2049,}$" ) { return 414; }
      rewrite (?i)/api/(.*) /$1 break;
      more_clear_input_headers "X-Forwarded-Host" "X-Forwarded-For" "X-Forwarded-Proto" "X-Original-URI" "X-Original-URL";
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: feature-flags
    chart: feature-flags-1.9.7
    heritage: Tiller
    release: qliksense
  name: qliksense-feature-flags
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-feature-flags
          servicePort: 8080
        path: /api/v0/features
      - backend:
          serviceName: qliksense-feature-flags
          servicePort: 8080
        path: /api/v1/features
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/v1/(.*) /v1/$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: generic-links
    chart: generic-links-1.1.10
    heritage: Tiller
    release: qliksense
  name: qliksense-generic-links
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-generic-links
          servicePort: 6080
        path: /api/v1/generic-links
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
      more_clear_input_headers "X-Forwarded-Host" "X-Forwarded-For" "X-Forwarded-Proto" "X-Original-URI" "X-Original-URL";
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: groups
    chart: groups-1.4.19
    heritage: Tiller
    release: qliksense
  name: qliksense-groups
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-groups
          servicePort: 8080
        path: /api/v1/groups
      - backend:
          serviceName: qliksense-groups
          servicePort: 8080
        path: /api/v1/qlik-groups
      - backend:
          serviceName: qliksense-groups
          servicePort: 8080
        path: /api/v1/idp-groups
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/configuration-snippet: |
      if ( $request_method  !~ ^(GET|HEAD)$ ) {
        add_header Allow "GET, HEAD" always;
        return 405;
      }
    nginx.ingress.kubernetes.io/rewrite-target: /
  labels:
    app: hub
    chart: hub-1.3.49
    heritage: Tiller
    release: qliksense
  name: qliksense-hub
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-hub
          servicePort: 3023
        path: /
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
  labels:
    app: insights
    chart: insights-1.7.4
    heritage: Tiller
    release: qliksense
  name: qliksense-insights-api
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-insights
          servicePort: 9292
        path: /api/v1/insights
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-signin: https://$host/login?returnto=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/rewrite-target: /insight
  labels:
    app: insights
    chart: insights-1.7.4
    heritage: Tiller
    release: qliksense
  name: qliksense-insights-insight
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-insights
          servicePort: 9292
        path: /insight
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-signin: https://$host/login?returnto=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/rewrite-target: /share
  labels:
    app: insights
    chart: insights-1.7.4
    heritage: Tiller
    release: qliksense
  name: qliksense-insights-share
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-insights
          servicePort: 9292
        path: /share
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
  labels:
    app: licenses
    chart: licenses-1.15.10
    heritage: Tiller
    release: qliksense
  name: qliksense-licenses
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-licenses
          servicePort: 9200
        path: /api/v1/licenses
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: locale
    chart: locale-1.3.2
    heritage: Tiller
    release: qliksense
  name: qliksense-locale
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-locale
          servicePort: 8080
        path: /api/v1/locale
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^([^.]*[^/])$ $1/ permanent;
      more_set_headers "Cache-Control" "Content-Security-Policy: frame-ancestors 'none'" "Pragma" "X-Content-Type-Options: nosniff" "X-Frame-Options: DENY" "X-XSS-Protection: 1; mode=block";
      if ( $request_method  !~ ^(GET|HEAD)$ ) {
        add_header Allow "GET, HEAD" always;
        return 405;
      }
  labels:
    app: management-console
    chart: management-console-1.6.127
    heritage: Tiller
    release: qliksense
  name: qliksense-management-console
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-management-console
          servicePort: 3024
        path: /console
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/v1/(.*) /v1/$1 break;
  labels:
    app: nl-broker
    chart: nl-broker-1.1.3
    heritage: Tiller
    release: qliksense
  name: qliksense-nl-broker
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-nl-broker
          servicePort: 30301
        path: /api/v1/sentences
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/v1/(.*) /v1/$1 break;
  labels:
    app: nl-parser
    chart: nl-parser-1.0.5
    heritage: Tiller
    release: qliksense
  name: qliksense-nl-parser
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-nl-parser
          servicePort: 30302
        path: /api/v1/parse
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/odag/(.*) /$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
  labels:
    app: odag
    chart: odag-1.8.8
    heritage: Tiller
    release: qliksense
  name: qliksense-odag
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-odag
          servicePort: 9098
        path: /api/odag/openapi
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/v1/(.*) /v1/$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: odag
    chart: odag-1.8.8
    heritage: Tiller
    release: qliksense
  name: qliksense-odag-api
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-odag
          servicePort: 9098
        path: /api/v1/odag
      - backend:
          serviceName: qliksense-odag
          servicePort: 9098
        path: /api/v1/odaglinks
      - backend:
          serviceName: qliksense-odag
          servicePort: 9098
        path: /api/v1/odagisavailable
      - backend:
          serviceName: qliksense-odag
          servicePort: 9098
        path: /api/v1/odagsettings
      - backend:
          serviceName: qliksense-odag
          servicePort: 9098
        path: /api/v1/odagrequests
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/v1/(.*) /v1/$1 break;
  labels:
    app: policy-decisions
    chart: policy-decisions-1.8.17
    heritage: Tiller
    release: qliksense
  name: qliksense-policy-decisions
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-policy-decisions
          servicePort: 5080
        path: /api/v1/rules
      - backend:
          serviceName: qliksense-policy-decisions
          servicePort: 5080
        path: /api/v1/rulesets
      - backend:
          serviceName: qliksense-policy-decisions
          servicePort: 5080
        path: /api/v1/policies
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/precedent/(.*) /$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: precedents
    chart: precedents-1.1.18
    heritage: Tiller
    release: qliksense
  name: qliksense-precedents
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-precedents
          servicePort: 9054
        path: /api/precedent
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
  labels:
    app: qix-data-connection
    chart: qix-data-connection-1.7.14
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-data-connection
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-qix-data-connection
          servicePort: 9011
        path: /api/v1/dataconnections
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: qix-data-reload
    chart: reloads-1.6.3
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-data-reload
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-qix-data-reload
          servicePort: 8080
        path: /api/v1/reloads
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
    nginx.ingress.kubernetes.io/proxy-body-size: 500m
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.org/client-max-body-size: 500m
  labels:
    app: qix-datafiles
    chart: qix-datafiles-1.10.21
    heritage: Tiller
    release: qliksense
  name: qliksense-qix-datafiles
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-qix-datafiles
          servicePort: 8080
        path: /api/v1/qix-datafiles
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/rewrite-target: /opendoc.htm
  labels:
    app: qlikview-client
    chart: qlikview-client-1.0.12
    heritage: Tiller
    release: qliksense
  name: qliksense-qlikview-client
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-qlikview-client
          servicePort: 9003
        path: /qv/opendoc.htm
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
  labels:
    app: qlikview-client
    chart: qlikview-client-1.0.12
    heritage: Tiller
    release: qliksense
  name: qliksense-qlikview-client-ajax
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-qlikview-client
          servicePort: 9003
        path: /QvAjaxZfc
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/v1/(.*) /v1/$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: quotas
    chart: quotas-1.0.2
    heritage: Tiller
    release: qliksense
  name: qliksense-quotas
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-quotas
          servicePort: 6080
        path: /api/v1/quotas
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
  labels:
    app: reload-tasks
    chart: reload-tasks-1.5.0
    heritage: Tiller
    release: qliksense
  name: qliksense-reload-tasks
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-reload-tasks
          servicePort: 8080
        path: /api/v1/reload-tasks
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/v1/(.*) /v1/$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: reporting
    release: qliksense
  name: qliksense-reporting
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-reporting
          servicePort: 8282
        path: /api/v1/images
      - backend:
          serviceName: qliksense-reporting
          servicePort: 8282
        path: /api/v1/reports
      - backend:
          serviceName: qliksense-reporting
          servicePort: 8282
        path: /api/v1/files
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/extensions/?(.*) /v1/extensions/$1 break;
      rewrite (?i)/api/(.*) /$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 250m
    nginx.org/client-max-body-size: 250m
  labels:
    app: resource-library
    chart: resource-library-1.10.3
    heritage: Tiller
    release: qliksense
  name: qliksense-resource-library
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-resource-library
          servicePort: 21068
        path: /extensions
      - backend:
          serviceName: qliksense-resource-library
          servicePort: 21068
        path: /api/v1/extensions
      - backend:
          serviceName: qliksense-resource-library
          servicePort: 21068
        path: /api/v1/themes
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-signin: https://$host/login?returnto=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "Cache-Control" "Pragma" "X-XSS-Protection: 1; mode=block" "X-Content-Type-Options: nosniff";
  labels:
    app: sense-client
    chart: sense-client-1.5.33
    heritage: Tiller
    release: qliksense
  name: qliksense-sense-client
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-sense-client
          servicePort: 9050
        path: /sense
      - backend:
          serviceName: qliksense-sense-client
          servicePort: 9050
        path: /dataloadeditor
      - backend:
          serviceName: qliksense-sense-client
          servicePort: 9050
        path: /datamodelviewer
      - backend:
          serviceName: qliksense-sense-client
          servicePort: 9050
        path: /single
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "Cache-Control" "Pragma" "Access-Control-Allow-Origin: *";
  labels:
    app: sense-client
    chart: sense-client-1.5.33
    heritage: Tiller
    release: qliksense
  name: qliksense-sense-client-resources
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-sense-client
          servicePort: 9050
        path: /resources
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/v1/(.*) /v1/$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: spaces
    chart: spaces-2.8.1
    heritage: Tiller
    release: qliksense
  name: qliksense-spaces
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-spaces
          servicePort: 6080
        path: /api/v1/spaces
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: temporary-contents
    chart: temporary-contents-1.3.0
    heritage: Tiller
    release: qliksense
  name: qliksense-temporary-contents
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-temporary-contents
          servicePort: 6080
        path: /api/v1/temp-contents
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      set $host_and_uri $http_host$request_uri;
      if ( $host_and_uri ~* "^.{2049,}$" ) { return 414; }
      rewrite (?i)/api/(.*) /$1 break;
      more_clear_input_headers "X-Forwarded-Host" "X-Forwarded-For" "X-Forwarded-Proto" "X-Original-URI" "X-Original-URL";
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: tenants
    chart: tenants-2.5.0
    heritage: Tiller
    release: qliksense
  name: qliksense-tenants
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-tenants
          servicePort: 8080
        path: /api/v1/tenants
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      set $host_and_uri $http_host$request_uri;
      if ( $host_and_uri ~* "^.{2049,}$" ) { return 414; }
      rewrite (?i)/api/(.*) /$1 break;
      more_clear_input_headers "X-Forwarded-Host" "X-Forwarded-For" "X-Forwarded-Proto" "X-Original-URI" "X-Original-URL";
  labels:
    app: tenants
    chart: tenants-2.5.0
    heritage: Tiller
    release: qliksense
  name: qliksense-tenants-web-integrations
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-tenants
          servicePort: 8080
        path: /api/v1/web-integrations
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: qlik-nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://qliksense-edge-auth.default.svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      set $host_and_uri $http_host$request_uri;
      if ( $host_and_uri ~* "^.{2049,}$" ) { return 414; }
      rewrite (?i)/api/(.*) /$1 break;
      more_clear_input_headers "X-Forwarded-Host" "X-Forwarded-For" "X-Forwarded-Proto" "X-Original-URI" "X-Original-URL";
    nginx.ingress.kubernetes.io/enable-cors: "true"
  labels:
    app: users
    chart: users-1.8.9
    heritage: Tiller
    release: qliksense
  name: qliksense-users
  namespace: default
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: qliksense-users
          servicePort: 8080
        path: /api/v1/users
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    app: chronos-worker
    chart: chronos-worker-1.4.7
    heritage: Tiller
    release: qliksense
  name: qliksense-chronos-worker-deny-external-egress
  namespace: default
spec:
  egress:
  - ports:
    - port: 53
      protocol: UDP
    - port: 53
      protocol: TCP
  - to:
    - namespaceSelector: {}
  podSelector:
    matchLabels:
      app: chronos-worker
  policyTypes:
  - Egress
---
apiVersion: qixmanager.qlik.com/v1
kind: Engine
metadata:
  labels:
    app: engine
    chart: engine-1.54.9
    heritage: Tiller
    release: qliksense
  name: qliksense-engine-reload
  namespace: default
spec:
  metadata:
    annotations:
      prometheus.io/job: engine-reload
      prometheus.io/port: "9090"
      prometheus.io/scrape: "true"
    labels:
      metricsPort: "9090"
      qix-engine: qix-engine
      qix-engine-version: 12.521.0
      qlik.com/dynamic: "true"
      qlik.com/engine-type: qliksense
      qlik.com/workload-type: reload
      qliksense-messaging-nats-client: "true"
      servicePort: "9076"
  podSpec:
    containers:
    - args:
      - -S
      - AcceptEULA=$(ACCEPT_EULA)
      - -S
      - DocumentDirectory=/qlik/apps
      - -S
      - EnableRestartOnSessionStall=1
      - -S
      - PrometheusServicePort=9090
      - -S
      - DesktopPort=9076
      - -S
      - EnableNumericalAbbreviation=0
      - -S
      - HttpTrafficLogVerbosity=4
      - -S
      - TrafficLogVerbosity=0
      - -S
      - SystemLogVerbosity=4
      - -S
      - AuditLogVerbosity=0
      - -S
      - PerformanceLogVerbosity=0
      - -S
      - QixPerformanceLogVerbosity=0
      - -S
      - SessionLogVerbosity=4
      - -S
      - ScriptLogVerbosity=4
      - -S
      - SmartSearchQueryLogVerbosity=3
      - -S
      - SmartSearchIndexLogVerbosity=3
      - -S
      - SSEVerbosity=4
      - -S
      - EventBusLogVerbosity=4
      - -S
      - EnableExtServiceLogs=1
      - -S
      - ExternalServicesLogVerbosity=4
      - -S
      - BasePathPrefix=/api
      - -S
      - FolderConnectionInterface=0
      - -S
      - Autosave=1
      - -S
      - AutosaveInterval=5
      - -S
      - ValidateJsonWebTokens=2
      - -S
      - JWKSServiceUrl=$(KEYS_URI)/keys/qlik.api.internal
      - -S
      - JWTSignPrivateKeyPath=/etc/secrets/jwtPrivateKey
      - -S
      - JWTSignPrivateKeyId=$(TOKEN_AUTH_PRIVATE_KEY_ID)
      - -S
      - InternalTokenServiceUrl=$(TOKEN_AUTH_URI)/v1
      - -S
      - EnableRenewUserToken=1
      - -S
      - EnableABAC=1
      - -S
      - Gen3=1
      - -S
      - EnableFilePolling=1
      - -S
      - PersistenceMode=2
      - -S
      - EnableAccessControlTrace=1
      - -S
      - SystemRules=/etc/config/rules.yaml
      - -S
      - EnableDataConnectivityService=1
      - -S
      - EnableGrpcFileStreamConnector=1
      - -S
      - DataConnectorServiceUrl=$(DCAAS_URI)
      - -S
      - ConnectivityServiceUrl=$(QIX_DATA_CONNECTION_URI)
      - -S
      - ConnectorGetDataRetryCount=3
      - -S
      - ConnectorGetDataRetryIntervalInSeconds=10
      - -S
      - HostedFileRetryCount=3
      - -S
      - HostedFileRetryIntervalInSeconds=10
      - -S
      - SSEPlugin=GeoOperations,$(GEO_OPERATIONS_URI)
      - -S
      - LicenseServiceUrl=$(LICENSES_URI)
      - -S
      - LicenseCacheTimeoutSeconds=3600
      - -S
      - EnableSpaces=1
      - -S
      - SpacesServiceUrl=$(SPACES_URI)
      - -S
      - EnableEncryptData=1
      - -S
      - UseEncryptionService=1
      - -S
      - EncryptionServiceUrl=$(ENCRYPTION_URI)
      - -S
      - EnableFeatureFlagService=1
      - -S
      - FeatureFlagServiceUrl=$(FEATURE_FLAGS_URI)
      - -S
      - EnableGroupsService=1
      - -S
      - GroupsServiceUrl=$(GROUPS_URI)
      - -S
      - EnableAppExport=1
      - -S
      - EnableTempContentService=1
      - -S
      - TempContentServiceUrl=$(TEMPORARY_CONTENTS_URI)
      - -S
      - UseSTAN=1
      - -S
      - STANUrl=$(NATS_URI)
      - -S
      - STANCluster=$(NATS_STREAMING_CLUSTER_ID)
      - -S
      - STANUseToken=1
      - -S
      - STANMaxReconnect=60
      - -S
      - STANReconnectWait=2
      - -S
      - STANTimeout=10
      - -S
      - UseEventBus=1
      - -S
      - EnvironmentName="example"
      - -S
      - RegionName="example"
      - -S
      - ShutdownWait=1
      env:
      - name: PROMETHEUS_PORT
        value: "9090"
      - name: GRPC_DNS_RESOLVER
        value: native
      - name: ACCEPT_EULA
        valueFrom:
          configMapKeyRef:
            key: acceptEULA
            name: qliksense-configs-k5hgd4cf2c
      - name: KEYS_URI
        valueFrom:
          configMapKeyRef:
            key: keysUri
            name: qliksense-configs-k5hgd4cf2c
      - name: TOKEN_AUTH_PRIVATE_KEY_ID
        valueFrom:
          secretKeyRef:
            key: tokenAuthPrivateKeyId
            name: qliksense-engine-secrets-2cc229m58m
      - name: TOKEN_AUTH_URI
        valueFrom:
          configMapKeyRef:
            key: tokenAuthUri
            name: qliksense-configs-k5hgd4cf2c
      - name: LICENSES_URI
        valueFrom:
          configMapKeyRef:
            key: licensesUri
            name: qliksense-configs-k5hgd4cf2c
      - name: SPACES_URI
        valueFrom:
          configMapKeyRef:
            key: spacesUri
            name: qliksense-configs-k5hgd4cf2c
      - name: FEATURE_FLAGS_URI
        valueFrom:
          configMapKeyRef:
            key: featureFlagsUri
            name: qliksense-configs-k5hgd4cf2c
      - name: GROUPS_URI
        valueFrom:
          configMapKeyRef:
            key: groupsUri
            name: qliksense-configs-k5hgd4cf2c
      - name: TEMPORARY_CONTENTS_URI
        valueFrom:
          configMapKeyRef:
            key: temporaryContentsUri
            name: qliksense-configs-k5hgd4cf2c
      - name: NATS_URI
        valueFrom:
          configMapKeyRef:
            key: natsUri
            name: qliksense-configs-k5hgd4cf2c
      - name: NATS_STREAMING_CLUSTER_ID
        valueFrom:
          configMapKeyRef:
            key: natsStreamingClusterId
            name: qliksense-configs-k5hgd4cf2c
      - name: ENCRYPTION_URI
        valueFrom:
          configMapKeyRef:
            key: encryptionUri
            name: qliksense-configs-k5hgd4cf2c
      - name: DCAAS_URI
        valueFrom:
          configMapKeyRef:
            key: dcaasUri
            name: qliksense-configs-k5hgd4cf2c
      - name: QIX_DATA_CONNECTION_URI
        valueFrom:
          configMapKeyRef:
            key: qixDataConnectionUri
            name: qliksense-configs-k5hgd4cf2c
      - name: GEO_OPERATIONS_URI
        valueFrom:
          configMapKeyRef:
            key: geoOperationsUri
            name: qliksense-configs-k5hgd4cf2c
      image: qlik-docker-qsefe.bintray.io/engine:12.521.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        httpGet:
          path: /health
          port: 9076
      name: engine-reload
      ports:
      - containerPort: 9076
      - containerPort: 9090
        name: metrics
      readinessProbe:
        httpGet:
          path: /health
          port: 9076
      volumeMounts:
      - mountPath: /qlik/apps
        name: apps-storage
      - mountPath: /etc/secrets
        name: secrets-service2service
        readOnly: true
      - mountPath: /etc/config
        name: rules-volume
      - mountPath: /home/engine/Qlik/Sense
        name: storagepath
    dnsConfig:
      options:
      - name: timeout
        value: "1"
      - name: single-request-reopen
    imagePullSecrets:
    - name: artifactory-docker-secret
    terminationGracePeriodSeconds: 30
    volumes:
    - name: apps-storage
      persistentVolumeClaim:
        claimName: qliksense-engine
    - name: secrets-service2service
      secret:
        items:
        - key: tokenAuthPrivateKey
          path: jwtPrivateKey
        secretName: qliksense-engine-secrets-2cc229m58m
    - configMap:
        defaultMode: 493
        name: engine-prestop-hook
        optional: true
      name: engine-prestop-hook
    - configMap:
        name: qliksense-engine-engine-rules-cm
      name: rules-volume
    - emptyDir: {}
      name: storagepath
  workloadType: reload
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: engine
    release: qliksense
  name: qliksense-engine
  namespace: default
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: qix-datafiles
    release: qliksense
  name: qliksense-qix-datafiles
  namespace: default
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: resource-library
    release: qliksense
  name: qliksense-resource-library
  namespace: default
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: temporary-contents
    release: qliksense
  name: qliksense-temporary-contents
  namespace: default
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
