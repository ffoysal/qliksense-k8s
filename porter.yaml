name: Qliksense
version: 0.3.0-aws
description: "Qliksense application cnab bundle"
invocationImage: qlik/qliksense-cnab-invocation:v0.3.0-aws
tag: qlik/qliksense-cnab-bundle:v0.3.0-aws

dockerfile: Dockerfile.tmpl

mixins:
  - kustomize
  - qliksense
  - kubernetes
  - exec
  - aws
  - helm



# See https://porter.sh/wiring/#credentials
credentials:
  - name: AWS_ACCESS_KEY_ID
    env: AWS_ACCESS_KEY_ID
    description: "AWS access key"
  - name: AWS_SECRET_ACCESS_KEY
    env: AWS_SECRET_ACCESS_KEY
    description: "AWS Secret access key"



parameters:
  - name: cluster
    type: string
    default: hacking
    description: "Kubernetes cluster name"
  - name: region
    type: string
    default: eu-west-1
    description: "AWS region name" 
  - name: acceptEULA
    description: "Qliksense End User Licesense Aggrement"
    type: string
    applyTo:
    - install
    - upgrade
  - name: profile
    type: string
    description: "Select a profile i.e docker-desktop, aws-eks, gke, azure. default is docker-desktop"
    default: docker-desktop
  - name: mongoDbUri
    description: "The mongodb uri to connect"
    type: string
    default: "mongodb://qliksense-mongodb:27017/qliksense?ssl=false"
  - name: scName
    description: "Storage Class Name to be used in PVCs"
    type: string
    default: efs
  - name: namespace
    description: "Which namespace the qliksense will be installed"
    type: string
    default: ""
  - name: kubeconfig
    ##Before running uninstall 'porter instances outputs show kubeconfig -i <name> > mykube'
    ## porter uninstall hack --param acceptEULA=yes -c demo2 --param kubeconfig=$(pwd)/mykube
    description: "The kubeconfig was generated during install."
    type: file
    path: /root/.kube/config
    default: ""
    applyTo:
    - uninstall
    - upgrade


outputs:
- name: LoadBalancer
  description: "Ingress LoadBalancer hostname"
  type: string
  applyTo:
  - install
  - upgrade
- name: kubeconfig
  description: "Kubeconfig for the newly created "
  type: file
  applyTo:
  - install
  path: /root/.kube/config


install:
  - exec:
      description: "Installing: Setting up kubernetes cluster"
      command: bash
      flags:
        c: "/cnab/app/hack-setup.sh {{ bundle.parameters.cluster }} {{ bundle.parameters.region }}"
  - exec:
      description: "Display Cluster info"
      command: bash
      flags:
        c: cat /root/.kube/config
      outputs:
      - name: kubeconfig
        path: /root/.kube/config
  - qliksense:
      description: "Installing: Creating patch based on CR"
      name: qliksense-operator
      cr:
        manifestsRoot: "/cnab/app"
        configs:
        - dataKey: acceptEULA
          values:
            qliksense: "{{ bundle.parameters.acceptEULA }}"
        secrets:
        - secretKey: mongoDbUri
          values:
            qliksense: "{{ bundle.parameters.mongoDbUri }}"
        storageClassName: "{{ bundle.parameters.scName }}"
        namespace: "{{ bundle.parameters.namespace }}"
        rotateKeys: "yes"
  - kustomize:
      description: "Installing: Use Kustomize to generate CRD for Qliksense"
      name: CRD-install
      kustomization_input:
          - "manifests/base/manifests/qliksense-init/"
      kubernetes_manifest_output: manifests/base/manifests/
  - kubernetes:
      description: "Installing: run Kubernetes to create CRD resource"
      manifests:
        - manifests/base/manifests/
      wait: true
      validate: false
  - kustomize:
      description: "Installing: Use Kustomize to generate the k8s resources for Qliksense"
      name: qliksense-install
      kustomization_input:
          - "manifests/{{ bundle.parameters.profile }}"
      kubernetes_manifest_output: manifests/
  - kubernetes:
      description: "Installing: run Kubernetes to create k8s resource"
      manifests:
        - manifests/
      wait: true
      validate: false
      outputs:
        - name: LoadBalancer
          resourceType: service
          resourceName: qliksense-elastic-infra-nginx-ingress-controller
          jsonPath: "{.status.loadBalancer.ingress[0].hostname}"
upgrade:
  - qliksense:
      description: "Upgrading: Creating patch based on CR"
      name: qliksense-operator
      cr:
        manifestsRoot: "/cnab/app"
        configs:
        - dataKey: acceptEULA
          values:
            qliksense: "{{ bundle.parameters.acceptEULA }}"
        secrets:
        - secretKey: mongoDbUri
          values:
            qliksense: "{{ bundle.parameters.mongoDbUri }}"
        storageClassName: "{{ bundle.parameters.scName }}"
        rotateKeys: "yes"
  - kustomize:
      description: "Upgrading: Use Kustomize to generate the k8s resources for Qliksense"
      name: "upgrade qliksense"
      kustomization_input:
          - "manifests/{{ bundle.parameters.profile }}"
      kubernetes_manifest_output: manifests/
  - kubernetes:
      description: "Upgrading: run Kubernetes to create/upgrade k8s resource"
      manifests:
        - manifests/
      wait: true
      validate: false

uninstall:
  - exec:
      description: "Uninstalling: delete all qliksense resources"
      command: kubectl
      arguments:
      - delete
      - deployment,services,statefulset,ingress,configmap,secrets,role,serviceaccount,rolebinding,pvc,crd,clusterrolebinding,clusterrole,serviceaccount,storageclass
      flags:
        l: release=qliksense
  - exec:
      description: "Uninstalling: Deleteing kubernetes cluster"
      command: bash
      flags:
        c: "/cnab/app/hack-delete.sh {{ bundle.parameters.cluster }} {{ bundle.parameters.region }}"

